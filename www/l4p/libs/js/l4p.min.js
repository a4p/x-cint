/*! l4p 2014-04-09 */
"use strict";

function openChildBrowser(url, extension, onLocationChange, onClose) {
    a4p.InternalLog.log("openChildBrowser", url + " extension:" + extension);
    var closeChildBrowserAfterLocationChange = !1;
    if (!window.device) {
        a4p.InternalLog.log("openChildBrowser", "window.open");
        var initialLocation, initialUrl, new_window = window.open(url, "_blank", "menubar=no,scrollbars=yes,resizable=1,height=400,width=600");
        a4p.isDefinedAndNotNull(new_window.location) && (initialLocation = new_window.location.href), 
        a4p.isDefinedAndNotNull(new_window.document) && (initialUrl = new_window.document.URL), 
        a4p.InternalLog.log("openChildBrowser", "initialLocation=" + initialLocation + " initialUrl=" + initialUrl);
        var locationChanged = !1, new_window_tracker = function() {
            if (a4p.isDefinedAndNotNull(new_window.location) && "string" == typeof new_window.location.href || a4p.isDefinedAndNotNull(new_window.document) && "string" == typeof new_window.document.URL, 
            locationChanged) {
                if (a4p.isDefinedAndNotNull(new_window.location) && "string" == typeof new_window.location.href && new_window.location.href.indexOf("about:blank") >= 0) return a4p.InternalLog.log("openChildBrowser", "onLocationChange"), 
                onLocationChange && onLocationChange(), closeChildBrowserAfterLocationChange = !0, 
                new_window.close(), void 0;
                if (a4p.isDefinedAndNotNull(new_window.document) && "string" == typeof new_window.document.URL && new_window.document.URL.indexOf("about:blank") >= 0) return a4p.InternalLog.log("openChildBrowser", "onUrlChange"), 
                onLocationChange && onLocationChange(), closeChildBrowserAfterLocationChange = !0, 
                new_window.close(), void 0;
            } else {
                if (a4p.isDefinedAndNotNull(new_window.location) && "string" == typeof new_window.location.href && initialLocation != new_window.location.href) return a4p.InternalLog.log("openChildBrowser", "new location=" + new_window.location.href), 
                locationChanged = !0, setTimeout(new_window_tracker, 100), void 0;
                if (a4p.isDefinedAndNotNull(new_window.document) && "string" == typeof new_window.document.URL && initialUrl != new_window.document.URL) return a4p.InternalLog.log("openChildBrowser", "new url=" + new_window.document.URL), 
                locationChanged = !0, setTimeout(new_window_tracker, 100), void 0;
            }
            return new_window.closed ? (a4p.InternalLog.log("openChildBrowser", "onClose"), 
            closeChildBrowserAfterLocationChange || onClose && onClose(), void 0) : (setTimeout(new_window_tracker, 100), 
            void 0);
        };
        return setTimeout(new_window_tracker, 100), void 0;
    }
    if (window.device) {
        var ref = window.open(url, "_blank", "location=yes");
        ref.addEventListener("loadstart", function() {}), ref.addEventListener("loadstop", function(e) {
            "string" == typeof e.url && e.url.indexOf("about:blank") >= 0 && (closeChildBrowserAfterLocationChange = !0, 
            onLocationChange && onLocationChange(), ref.close());
        }), ref.addEventListener("loaderror", function() {}), ref.addEventListener("exit", function() {
            closeChildBrowserAfterLocationChange || onClose && onClose();
        });
    }
}

function closeWindow() {
    window.close();
}

function isArray(obj) {
    return obj instanceof Array ? !0 : "object" != typeof obj ? !1 : a4p.isUndefined(obj) || null === obj ? !1 : "[object Array]" === Object.prototype.toString.call(obj) ? !0 : !1;
}

function updateImage(source, img) {
    return source.src = img && "/." != img ? img : "./img/broken.png", source.onerror = "", 
    !0;
}

function ImgError() {
    return setTimeout("updateImage(source,img)", 1e4), !1;
}

function getErrorObject() {
    try {
        throw Error("");
    } catch (err) {
        return err;
    }
}

function a4pExportJson(input, maxDepth) {
    var key, type, str = "{\n", first = !0;
    for (key in input) input.hasOwnProperty(key) && ("Contact" == key || "Attendee" == key || "Account" == key || "Opportunity" == key || "Event" == key || "Document" == key) && (type = key, 
    first ? first = !1 : str += ",\n", str += '	"' + key + '":[\n', "object" == typeof input[key] && maxDepth > 0 && (str += a4pExportJsonObject("		", input[key], maxDepth - 1, type)), 
    str += "	]");
    return str += "\n}\n";
}

function a4pExportJsonObject(offset, input, maxDepth, type) {
    var key, str = "", first = !0;
    for (key in input) input.hasOwnProperty(key) && (first ? first = !1 : str += ",\n", 
    "object" == typeof input[key] ? maxDepth > 0 && (str += 2 == maxDepth ? offset + "{\n" : offset + '"' + key + '":{', 
    str += a4pExportJsonObject(offset + "	", input[key], maxDepth - 1, type), str += 2 == maxDepth ? offset + "}" : "}") : ("string" == typeof input[key] && (input[key] = input[key].replace(/\r/gi, " ").replace(/\n/gi, " ")), 
    str += 0 == maxDepth ? '"' + key + '":"' + input[key] + '"' : offset + '"' + key + '":"' + input[key] + '"'));
    return 1 == maxDepth && "Document" == type && (str += ",\n" + offset + '"url":"img/samples/docs/' + input.name + '"'), 
    0 != maxDepth && (str += "\n"), str;
}

function logEvent(e) {
    var online, status, type, message, bCon = checkConnection();
    online = bCon ? "yes" : "no", status = cacheStatusValues[cache.status], type = e.type, 
    message = "CACHE online: " + online, message += ", event: " + type, message += ", status: " + status, 
    "error" == type && bCon && (message += " (prolly a syntax error in manifest)"), 
    a4p.InternalLog.log(message);
}

function checkCache() {
    cache && (cacheStatusValues[0] = "uncached", cacheStatusValues[1] = "idle", cacheStatusValues[2] = "checking", 
    cacheStatusValues[3] = "downloading", cacheStatusValues[4] = "updateready", cacheStatusValues[5] = "obsolete", 
    cache.addEventListener("cached", logEvent, !1), cache.addEventListener("checking", logEvent, !1), 
    cache.addEventListener("downloading", logEvent, !1), cache.addEventListener("error", logEvent, !1), 
    cache.addEventListener("noupdate", logEvent, !1), cache.addEventListener("obsolete", logEvent, !1), 
    cache.addEventListener("progress", logEvent, !1), cache.addEventListener("updateready", logEvent, !1));
}

function checkConnection() {
    var bCon = !1;
    if (a4p.InternalLog.log("checkConnection", "launched"), navigator.connection && navigator.connection.type) {
        var networkState = navigator.connection.type, states = {};
        states[Connection.UNKNOWN] = "Unknown connection", states[Connection.ETHERNET] = "Ethernet connection", 
        states[Connection.WIFI] = "WiFi connection", states[Connection.CELL_2G] = "Cell 2G connection", 
        states[Connection.CELL_3G] = "Cell 3G connection", states[Connection.CELL_4G] = "Cell 4G connection", 
        states[Connection.CELL] = "Cell generic connection", states[Connection.NONE] = "No network connection", 
        a4p.InternalLog.log("checkConnection", "Cordova Connection type: " + states[networkState]), 
        bCon = networkState != Connection.NONE;
    } else a4p.BrowserCapabilities && a4p.BrowserCapabilities.online ? bCon = !0 : a4p.BrowserCapabilities || (bCon = navigator.onLine), 
    a4p.InternalLog.log("checkConnection", "without Cordova but online ? " + bCon);
    return bCon;
}

function getUrlVars(ihref) {
    var href = ihref;
    (a4p.isUndefined(href) || !href) && (href = window.location.href), a4p.InternalLog.log("getUrlVars", "href:" + href);
    for (var hash, vars = [], hashes = href.slice(href.indexOf("#") + 1).split("&"), i = 0; i < hashes.length; i++) hash = hashes[i].split("="), 
    vars.push(hash[0]), vars[hash[0]] = hash[1];
    return vars;
}

function SHA256(s) {
    function safe_add(x, y) {
        var lsw = (65535 & x) + (65535 & y), msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return msw << 16 | 65535 & lsw;
    }
    function S(X, n) {
        return X >>> n | X << 32 - n;
    }
    function R(X, n) {
        return X >>> n;
    }
    function Ch(x, y, z) {
        return x & y ^ ~x & z;
    }
    function Maj(x, y, z) {
        return x & y ^ x & z ^ y & z;
    }
    function Sigma0256(x) {
        return S(x, 2) ^ S(x, 13) ^ S(x, 22);
    }
    function Sigma1256(x) {
        return S(x, 6) ^ S(x, 11) ^ S(x, 25);
    }
    function Gamma0256(x) {
        return S(x, 7) ^ S(x, 18) ^ R(x, 3);
    }
    function Gamma1256(x) {
        return S(x, 17) ^ S(x, 19) ^ R(x, 10);
    }
    function core_sha256(m, l) {
        var a, b, c, d, e, f, g, h, i, j, T1, T2, K = new Array(1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298), HASH = new Array(1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225), W = new Array(64);
        m[l >> 5] |= 128 << 24 - l % 32, m[(l + 64 >> 9 << 4) + 15] = l;
        for (var i = 0; i < m.length; i += 16) {
            a = HASH[0], b = HASH[1], c = HASH[2], d = HASH[3], e = HASH[4], f = HASH[5], g = HASH[6], 
            h = HASH[7];
            for (var j = 0; 64 > j; j++) W[j] = 16 > j ? m[j + i] : safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]), 
            T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]), 
            T2 = safe_add(Sigma0256(a), Maj(a, b, c)), h = g, g = f, f = e, e = safe_add(d, T1), 
            d = c, c = b, b = a, a = safe_add(T1, T2);
            HASH[0] = safe_add(a, HASH[0]), HASH[1] = safe_add(b, HASH[1]), HASH[2] = safe_add(c, HASH[2]), 
            HASH[3] = safe_add(d, HASH[3]), HASH[4] = safe_add(e, HASH[4]), HASH[5] = safe_add(f, HASH[5]), 
            HASH[6] = safe_add(g, HASH[6]), HASH[7] = safe_add(h, HASH[7]);
        }
        return HASH;
    }
    function str2binb(str) {
        for (var bin = Array(), mask = (1 << chrsz) - 1, i = 0; i < str.length * chrsz; i += chrsz) bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << 24 - i % 32;
        return bin;
    }
    function Utf8Encode(string) {
        if (0 === string.length) return string;
        string = string.replace(/\r\n/g, "\n");
        for (var utftext = "", n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);
            128 > c ? utftext += String.fromCharCode(c) : c > 127 && 2048 > c ? (utftext += String.fromCharCode(192 | c >> 6), 
            utftext += String.fromCharCode(128 | 63 & c)) : (utftext += String.fromCharCode(224 | c >> 12), 
            utftext += String.fromCharCode(128 | 63 & c >> 6), utftext += String.fromCharCode(128 | 63 & c));
        }
        return utftext;
    }
    function binb2hex(binarray) {
        for (var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef", str = "", i = 0; i < 4 * binarray.length; i++) str += hex_tab.charAt(15 & binarray[i >> 2] >> 8 * (3 - i % 4) + 4) + hex_tab.charAt(15 & binarray[i >> 2] >> 8 * (3 - i % 4));
        return str;
    }
    if (0 === s.length) return "";
    var chrsz = 8, hexcase = 0;
    return s = Utf8Encode(s), binb2hex(core_sha256(str2binb(s), s.length * chrsz));
}

function successHandler(data) {
    a4p.InternalLog.log("Analytics", "initialization success : " + data);
}

function errorHandler(data) {
    a4p.InternalLog.log("Analytics", "initialization pb : " + data);
}

function removeObjectFromList(list, dbid) {
    return removeSubKeyFromList(list, "id", "dbid", dbid);
}

function replaceObjectFromList(list, dbid, object) {
    return replaceSubKeyFromList(list, "id", "dbid", dbid, object);
}

function addObjectToList(list, object) {
    return addSubKeyToList(list, "id", "dbid", object);
}

function getObjectFromList(list, dbid) {
    return getSubKeyFromList(list, "id", "dbid", dbid);
}

function removeLinkFromList(list, dbid) {
    return removeKeyFromList(list, "dbid", dbid);
}

function replaceLinkFromList(list, dbid, object) {
    return replaceKeyFromList(list, "dbid", dbid, object);
}

function addLinkToList(list, object) {
    return addKeyToList(list, "dbid", object);
}

function getLinkFromList(list, dbid) {
    return getKeyFromList(list, "dbid", dbid);
}

function removeIdFromList(list, id) {
    return removeKeyFromList(list, "id", id);
}

function replaceIdFromList(list, id, object) {
    return replaceKeyFromList(list, "id", id, object);
}

function addIdToList(list, object) {
    return addKeyToList(list, "id", object);
}

function getIdFromList(list, id) {
    return getKeyFromList(list, "id", id);
}

function removeKeyFromList(list, key, value) {
    for (var i = list.length - 1; i >= 0; i--) if (list[i][key] == value) return list.splice(i, 1);
    return !1;
}

function replaceKeyFromList(list, key, value, object) {
    for (var i = list.length - 1; i >= 0; i--) if (list[i][key] == value) return list.splice(i, 1, object);
    return !1;
}

function addKeyToList(list, key, object) {
    for (var i = list.length - 1; i >= 0; i--) if (list[i][key] == object[key]) return !1;
    return list.push(object), !0;
}

function getKeyFromList(list, key, value) {
    for (var i = list.length - 1; i >= 0; i--) if (list[i][key] == value) return list[i];
    return !1;
}

function removeSubKeyFromList(list, sub, key, value) {
    for (var i = list.length - 1; i >= 0; i--) if (a4p.isDefined(list[i][sub]) && list[i][sub][key] == value) return list.splice(i, 1);
    return !1;
}

function replaceSubKeyFromList(list, sub, key, value, object) {
    for (var i = list.length - 1; i >= 0; i--) if (a4p.isDefined(list[i][sub]) && list[i][sub][key] == value) return list.splice(i, 1, object);
    return !1;
}

function addSubKeyToList(list, sub, key, object) {
    for (var i = list.length - 1; i >= 0; i--) if (a4p.isDefined(list[i][sub]) && list[i][sub][key] == object[sub][key]) return !1;
    return list.push(object), !0;
}

function getSubKeyFromList(list, sub, key, value) {
    for (var i = list.length - 1; i >= 0; i--) if (a4p.isDefined(list[i][sub]) && list[i][sub][key] == value) return list[i];
    return !1;
}

function removeValueFromList(list, value) {
    for (var i = list.length - 1; i >= 0; i--) if (list[i] == value) return list.splice(i, 1);
    return !1;
}

function replaceValueFromList(list, oldValue, newValue) {
    for (var i = list.length - 1; i >= 0; i--) if (list[i] == oldValue) return list.splice(i, 1, newValue);
    return !1;
}

function addValueToList(list, value) {
    for (var i = list.length - 1; i >= 0; i--) if (list[i] == value) return !1;
    return list.push(value), !0;
}

function isValueInList(list, value) {
    for (var i = list.length - 1; i >= 0; i--) if (list[i] == value) return !0;
    return !1;
}

function Bridge() {}

function normalizedPath(dirPath, fileName, fileExtension) {
    var filePath = dirPath;
    return filePath = "/" == filePath.charAt(filePath.length - 1) ? "/" == fileName.charAt(0) ? filePath.substring(0, filePath.length - 1) + fileName + "." + fileExtension : filePath + fileName + "." + fileExtension : "/" == fileName.charAt(0) ? filePath + fileName + "." + fileExtension : filePath + "/" + fileName + "." + fileExtension;
}

function transferErrorMessage(fileTransferError) {
    var msg = "";
    switch (fileTransferError.code) {
      case FileTransferError.FILE_NOT_FOUND_ERR:
        msg = "File not found";
        break;

      case FileTransferError.CONNECTION_ERR:
        msg = "Connection error";
        break;

      case FileTransferError.INVALID_URL_ERR:
        msg = "Invalid URL error";
        break;

      default:
        msg = "Unknown FileTransferError code (code= " + fileTransferError.code + ", type=" + typeof fileTransferError + ")";
    }
    return msg;
}

function showFileInFS(fileRelPath, fileName, fileExtension) {
    a4p.InternalLog.log("showFileInFS", fileRelPath + "  Name:" + fileName + "  Extension:" + fileExtension);
    try {
        var localPath = gFileSystem.root.fullPath;
        "Android" === device.platform && 0 === localPath.indexOf("file://") && (localPath = localPath.substring(7));
        var fullPath = localPath + fileRelPath + fileName;
        a4p.InternalLog.log("showFileInFS", "get file : " + fullPath), openChildBrowser(fullPath, fileExtension);
    } catch (e) {
        fileErrorHandler(e);
    }
}

function getFileSystem(success, arg1, arg2, arg3) {
    if (gFileSystem) return a4p.InternalLog.log("getFileSystem", "allready did : launch"), 
    success(arg1, arg2, arg3);
    if (window.requestFileSystem) try {
        a4p.InternalLog.log("getFileSystem", "window.requestFileSystem"), window.requestFileSystem(LocalFileSystem.PERSISTENT, 10485760, function(fs) {
            return a4p.InternalLog.log("getFileSystem", "get FileSystem"), gFileSystem = fs, 
            success(arg1, arg2, arg3);
        }, fileErrorHandler);
    } catch (e) {
        fileErrorHandler(e);
    } else a4p.InternalLog.log("getFileSystem", "Impossible to use file, No FileSystem !");
}

function a4pDumpData(input, maxDepth) {
    var str = "";
    return "object" == typeof input ? input instanceof Array ? maxDepth > 0 ? (str += "[\n", 
    str += a4pDumpArray("  ", input, maxDepth - 1), str += "]\n") : str += "[Array]\n" : maxDepth > 0 ? (str += "{\n", 
    str += a4pDumpObject("  ", input, maxDepth - 1), str += "}\n") : str += "[" + typeof input + "]\n" : str += input + "\n", 
    str;
}

function a4pDumpArray(offset, input, maxDepth) {
    for (var str = "", key = 0, nb = input.length; nb > key; key++) "object" == typeof input[key] ? input[key] instanceof Array ? maxDepth > 0 ? (str += offset + key + " : [\n", 
    str += a4pDumpArray(offset + "  ", input[key], maxDepth - 1), str += offset + "]\n") : str += offset + key + " : [Array]\n" : maxDepth > 0 ? (str += offset + key + " : {\n", 
    str += a4pDumpObject(offset + "  ", input[key], maxDepth - 1), str += offset + "}\n") : str += offset + key + " : [" + typeof input[key] + "]\n" : str += offset + key + " : " + input[key] + "\n";
    return str;
}

function a4pDumpObject(offset, input, maxDepth) {
    var key, str = "";
    for (key in input) input.hasOwnProperty(key) && ("object" == typeof input[key] ? input[key] instanceof Array ? maxDepth > 0 ? (str += offset + key + " : [\n", 
    str += a4pDumpArray(offset + "  ", input[key], maxDepth - 1), str += offset + "]\n") : str += offset + key + " : [Array]\n" : maxDepth > 0 ? (str += offset + key + " : {\n", 
    str += a4pDumpObject(offset + "  ", input[key], maxDepth - 1), str += offset + "}\n") : str += offset + key + " : [" + typeof input[key] + "]\n" : str += offset + key + " : " + input[key] + "\n");
    return str;
}

function a4pTimestampFormat(timestamp) {
    var date = new Date(timestamp);
    return a4pPadNumber(date.getFullYear(), 4) + "-" + a4pPadNumber(date.getMonth() + 1, 2) + "-" + a4pPadNumber(date.getDate(), 2) + " " + a4pPadNumber(date.getHours(), 2) + ":" + a4pPadNumber(date.getMinutes(), 2) + ":" + a4pPadNumber(date.getSeconds(), 2);
}

function a4pDateFormat(date) {
    return date ? a4pPadNumber(date.getFullYear(), 4) + "-" + a4pPadNumber(date.getMonth() + 1, 2) + "-" + a4pPadNumber(date.getDate(), 2) + " " + a4pPadNumber(date.getHours(), 2) + ":" + a4pPadNumber(date.getMinutes(), 2) + ":" + a4pPadNumber(date.getSeconds(), 2) : "";
}

function a4pTimestampParse(date) {
    var newDate = a4pDateParse(date);
    return newDate !== !1 ? newDate.getTime() : 0;
}

function a4pDateParse(date) {
    if (!date || "string" != typeof date || "" == date) return !1;
    var yearS = parseInt(date.substr(0, 4), 10) || 0, monthS = parseInt(date.substr(5, 2), 10) || 0, dayS = parseInt(date.substr(8, 2), 10) || 0, hourS = parseInt(date.substr(11, 2), 10) || 0, minuteS = parseInt(date.substr(14, 2), 10) || 0, secS = parseInt(date.substr(17, 2), 10) || 0, newDate = new Date(yearS, monthS - 1, dayS, hourS, minuteS, secS, 0);
    return newDate.getFullYear() !== yearS || newDate.getMonth() !== monthS - 1 || newDate.getDate() !== dayS ? !1 : newDate;
}

function a4pDateFormatObject(object) {
    var yearS = "1970", monthS = "01", dayS = "01", hourS = "00", minuteS = "00", secondS = "00";
    if ("[object Date]" === Object.prototype.toString.call(object)) isNaN(object.getTime()) || (yearS = "" + object.getFullYear(), 
    monthS = "" + (object.getMonth() + 1), dayS = "" + object.getDate(), hourS = "" + object.getHours(), 
    minuteS = "" + object.getMinutes(), secondS = "" + object.getSeconds()); else if ("string" == typeof object) {
        var dateReg = new RegExp("([0-9][0-9][0-9][0-9])-([0-9]\\d)-([0-9]\\d)+", "g"), dateParts = object.split(dateReg);
        yearS = dateParts[1] || "0", monthS = dateParts[2] || "0", dayS = dateParts[3] || "0";
        var timeReg = new RegExp("([01]\\d|2[0-9]):([0-5]\\d):([0-5]\\d)"), timeParts = object.match(timeReg);
        null != timeParts ? (hourS = timeParts[1] || "00", minuteS = timeParts[2] || "00", 
        secondS = timeParts[3] || "00") : (hourS = "00", minuteS = "00", secondS = "00");
    }
    for (;yearS.length < 4; ) yearS = "0" + yearS;
    for (;monthS.length < 2; ) monthS = "0" + monthS;
    for (;dayS.length < 2; ) dayS = "0" + dayS;
    for (;hourS.length < 2; ) hourS = "0" + hourS;
    for (;minuteS.length < 2; ) minuteS = "0" + minuteS;
    for (;secondS.length < 2; ) secondS = "0" + secondS;
    var newDate = yearS + "-" + monthS + "-" + dayS + " " + hourS + ":" + minuteS + ":" + secondS;
    return newDate;
}

function a4pDateExtractDate(dateString) {
    for (var dateReg = new RegExp("([0-9][0-9][0-9][0-9])-([0-9]\\d)-([0-9]\\d)+", "g"), dateParts = dateString.split(dateReg), yearS = dateParts[1] || "0", monthS = dateParts[2] || "0", dayS = dateParts[3] || "0"; yearS.length < 4; ) yearS = "0" + yearS;
    for (;monthS.length < 2; ) monthS = "0" + monthS;
    for (;dayS.length < 2; ) dayS = "0" + dayS;
    return "" + yearS + "-" + monthS + "-" + dayS;
}

function a4pDateExtractTime(dateString) {
    var timeReg = new RegExp("([01]\\d|2[0-9]):([0-5]\\d):([0-5]\\d)"), timeParts = dateString.match(timeReg), hourS = "00", minuteS = "00", secondS = "00";
    for (null != timeParts ? (hourS = timeParts[1] || "00", minuteS = timeParts[2] || "00", 
    secondS = timeParts[3] || "00") : (hourS = "00", minuteS = "00", secondS = "00"); hourS.length < 2; ) hourS = "0" + hourS;
    for (;minuteS.length < 2; ) minuteS = "0" + minuteS;
    for (;secondS.length < 2; ) secondS = "0" + secondS;
    return "" + hourS + ":" + minuteS + ":" + secondS;
}

function a4pPadNumber(num, digits, trim) {
    var neg = "";
    for (0 > num && (neg = "-", num = -num), num = "" + num; num.length < digits; ) num = "0" + num;
    return trim && num.length > digits && (num = num.substr(num.length - digits)), neg + num;
}

function strCompare(str1, str2) {
    for (var lg1 = str1.length, lg2 = str2.length, nb = lg2 > lg1 ? lg1 : lg2, i = 0; nb > i; i++) {
        var c1 = str1.charCodeAt(i), c2 = str2.charCodeAt(i);
        if (c2 > c1) return -1;
        if (c1 > c2) return 1;
    }
    return lg2 > lg1 ? -1 : lg1 > lg2 ? 1 : 0;
}

function a4pFormat(input) {
    if (a4p.isUndefined(input) || !input) return a4p.ErrorLog.log("a4pFormat", "invalid string " + input), 
    "";
    for (var formatted = input, max = arguments.length, i = 1; max > i; i++) {
        var regexp = new RegExp("\\{" + (i - 1) + "\\}", "gi");
        formatted = formatted.replace(regexp, arguments[i]);
    }
    return formatted;
}

function a4pFirstDayOfMonth(year, month) {
    return new Date(year, month - 1, 1, 0, 0, 0, 0);
}

function a4pLastDayOfMonth(year, month) {
    return new Date(year, month, 0, 0, 0, 0, 0);
}

function a4pDayOfSameWeek(date, dayOfWeek) {
    return new Date(date.getFullYear(), date.getMonth(), date.getDate() + dayOfWeek - (date.getDay() || 7), 0, 0, 0, 0);
}

function a4pWeek(date) {
    var thursday = a4pDayOfSameWeek(date, 4), fourthJanuary = new Date(thursday.getFullYear(), 0, 4, 0, 0, 0, 0), thursdayOfWeek1 = a4pDayOfSameWeek(fourthJanuary, 4), nbDays = Math.round((thursday.getTime() - thursdayOfWeek1.getTime()) / 864e5);
    return 1 + Math.floor(nbDays / 7);
}

var a4p;

a4p || (a4p = {}), a4p.Aes = function() {
    function cipher(input, w) {
        for (var Nb = 4, Nr = w.length / Nb - 1, round = 0, state = [ [], [], [], [] ], i = 0; 4 * Nb > i; i++) state[i % 4][Math.floor(i / 4)] = input[i];
        for (state = addRoundKey(state, w, round, Nb), round++; Nr > round; round++) state = subBytes(state, Nb), 
        state = shiftRows(state, Nb), state = mixColumns(state, Nb), state = addRoundKey(state, w, round, Nb);
        state = subBytes(state, Nb), state = shiftRows(state, Nb), state = addRoundKey(state, w, round, Nb);
        for (var output = new Array(4 * Nb), i = 0; 4 * Nb > i; i++) output[i] = state[i % 4][Math.floor(i / 4)];
        return output;
    }
    function decipher(input, w) {
        for (var Nb = 4, Nr = w.length / Nb - 1, round = Nr, state = [ [], [], [], [] ], i = 0; 4 * Nb > i; i++) state[i % 4][Math.floor(i / 4)] = input[i];
        for (state = addRoundKey(state, w, round, Nb), round--; round > 0; round--) state = invShiftRows(state, Nb), 
        state = invSubBytes(state, Nb), state = addRoundKey(state, w, round, Nb), state = invMixColumns(state, Nb);
        state = invShiftRows(state, Nb), state = invSubBytes(state, Nb), state = addRoundKey(state, w, round, Nb);
        for (var output = new Array(4 * Nb), i = 0; 4 * Nb > i; i++) output[i] = state[i % 4][Math.floor(i / 4)];
        return output;
    }
    function keyExpansion(key) {
        for (var Nb = 4, Nk = key.length / 4, Nr = Nk + 6, w = new Array(Nb * (Nr + 1)), temp = new Array(4), i = 0; Nk > i; i++) {
            var r = [ key[4 * i], key[4 * i + 1], key[4 * i + 2], key[4 * i + 3] ];
            w[i] = r;
        }
        for (var i = Nk; Nb * (Nr + 1) > i; i++) {
            w[i] = new Array(4);
            for (var t = 0; 4 > t; t++) temp[t] = w[i - 1][t];
            if (0 == i % Nk) {
                temp = subWord(rotWord(temp));
                for (var t = 0; 4 > t; t++) temp[t] ^= rCon[i / Nk][t];
            } else Nk > 6 && 4 == i % Nk && (temp = subWord(temp));
            for (var t = 0; 4 > t; t++) w[i][t] = w[i - Nk][t] ^ temp[t];
        }
        return w;
    }
    function subBytes(s, Nb) {
        for (var r = 0; 4 > r; r++) for (var c = 0; Nb > c; c++) s[r][c] = sBox[s[r][c]];
        return s;
    }
    function invSubBytes(s, Nb) {
        for (var r = 0; 4 > r; r++) for (var c = 0; Nb > c; c++) s[r][c] = invsBox[s[r][c]];
        return s;
    }
    function shiftRows(s, Nb) {
        for (var t = new Array(4), r = 1; 4 > r; r++) {
            for (var c = 0; 4 > c; c++) t[c] = s[r][(c + r) % Nb];
            for (var c = 0; 4 > c; c++) s[r][c] = t[c];
        }
        return s;
    }
    function invShiftRows(s, Nb) {
        for (var t = new Array(4), r = 1; 4 > r; r++) {
            for (var c = 0; 4 > c; c++) t[c] = s[r][c];
            for (var c = 0; 4 > c; c++) s[r][(c + r) % Nb] = t[c];
        }
        return s;
    }
    function mixColumns(s) {
        for (var c = 0; 4 > c; c++) {
            for (var a = new Array(4), a2 = new Array(4), i = 0; 4 > i; i++) a[i] = s[i][c], 
            a2[i] = 128 & a[i] ? 283 ^ a[i] << 1 : a[i] << 1;
            s[0][c] = a2[0] ^ a[1] ^ a2[1] ^ a[2] ^ a[3], s[1][c] = a2[1] ^ a[2] ^ a2[2] ^ a[3] ^ a[0], 
            s[2][c] = a2[2] ^ a[3] ^ a2[3] ^ a[0] ^ a[1], s[3][c] = a2[3] ^ a[0] ^ a2[0] ^ a[1] ^ a[2];
        }
        return s;
    }
    function invMixColumns(s) {
        for (var c = 0; 4 > c; c++) {
            for (var a = new Array(4), a2 = new Array(4), a4 = new Array(4), a8 = new Array(4), i = 0; 4 > i; i++) a[i] = s[i][c], 
            a2[i] = 128 & a[i] ? 283 ^ a[i] << 1 : a[i] << 1, a4[i] = 128 & a2[i] ? 283 ^ a2[i] << 1 : a2[i] << 1, 
            a8[i] = 128 & a4[i] ? 283 ^ a4[i] << 1 : a4[i] << 1;
            s[0][c] = a8[0] ^ a4[0] ^ a2[0] ^ a8[1] ^ a2[1] ^ a[1] ^ a8[2] ^ a4[2] ^ a[2] ^ a8[3] ^ a[3], 
            s[1][c] = a8[1] ^ a4[1] ^ a2[1] ^ a8[2] ^ a2[2] ^ a[2] ^ a8[3] ^ a4[3] ^ a[3] ^ a8[0] ^ a[0], 
            s[2][c] = a8[2] ^ a4[2] ^ a2[2] ^ a8[3] ^ a2[3] ^ a[3] ^ a8[0] ^ a4[0] ^ a[0] ^ a8[1] ^ a[1], 
            s[3][c] = a8[3] ^ a4[3] ^ a2[3] ^ a8[0] ^ a2[0] ^ a[0] ^ a8[1] ^ a4[1] ^ a[1] ^ a8[2] ^ a[2];
        }
        return s;
    }
    function addRoundKey(state, w, rnd, Nb) {
        for (var r = 0; 4 > r; r++) for (var c = 0; Nb > c; c++) state[r][c] ^= w[4 * rnd + c][r];
        return state;
    }
    function subWord(w) {
        for (var i = 0; 4 > i; i++) w[i] = sBox[w[i]];
        return w;
    }
    function rotWord(w) {
        for (var tmp = w[0], i = 0; 3 > i; i++) w[i] = w[i + 1];
        return w[3] = tmp, w;
    }
    var Aes = {};
    Aes.encrypt = function(plaintext, stringkey) {
        var blockSize = 16;
        if (16 != stringkey.length && 24 != stringkey.length && 32 != stringkey.length) return "";
        for (var key = new Array(stringkey.length), i = 0; i < stringkey.length; i++) key[i] = 255 & stringkey.charCodeAt(i);
        for (var counterBlock = new Array(blockSize), keySchedule = keyExpansion(key), blockCount = Math.ceil(plaintext.length / blockSize), ciphertxt = new Array(blockCount), i = 0; blockSize > i; i++) counterBlock[i] = 0;
        for (var b = 0; blockCount > b; b++) {
            for (var i = 0; blockSize > i; i++) counterBlock[i] ^= 255 & plaintext.charCodeAt(b * blockSize + i);
            for (var cipherCntr = cipher(counterBlock, keySchedule), blockLength = blockCount - 1 > b ? blockSize : (plaintext.length - 1) % blockSize + 1, cipherChar = new Array(blockLength), i = 0; blockLength > i; i++) cipherChar[i] = String.fromCharCode(cipherCntr[i]);
            ciphertxt[b] = cipherChar.join("");
            for (var i = 0; blockSize > i; i++) counterBlock[i] = 0;
        }
        return ciphertxt.join("");
    }, Aes.decrypt = function(ciphertext, stringkey) {
        var blockSize = 16;
        if (16 != stringkey.length && 24 != stringkey.length && 32 != stringkey.length) return "";
        for (var key = new Array(stringkey.length), i = 0; i < stringkey.length; i++) key[i] = 255 & stringkey.charCodeAt(i);
        for (var counterBlock = new Array(blockSize), keySchedule = keyExpansion(key), blockCount = Math.ceil(ciphertext.length / blockSize), plaintxt = new Array(blockCount), i = 0; blockSize > i; i++) counterBlock[i] = 0;
        for (var b = 0; blockCount > b; b++) {
            for (var i = 0; blockSize > i; i++) counterBlock[i] ^= 255 & ciphertext.charCodeAt(b * blockSize + i);
            for (var cipherCntr = decipher(counterBlock, keySchedule), blockLength = blockCount - 1 > b ? blockSize : (ciphertext.length - 1) % blockSize + 1, cipherChar = new Array(blockLength), i = 0; blockLength > i; i++) cipherChar[i] = String.fromCharCode(cipherCntr[i]);
            plaintxt[b] = cipherChar.join("");
            for (var i = 0; blockSize > i; i++) counterBlock[i] = 0;
        }
        return plaintxt.join("");
    }, Aes.ctrEncrypt = function(plaintext, stringkey) {
        var blockSize = 16;
        if (16 != stringkey.length && 24 != stringkey.length && 32 != stringkey.length) return "";
        plaintext = a4p.Utf8.encode(plaintext);
        for (var key = new Array(stringkey.length), i = 0; i < stringkey.length; i++) key[i] = 255 & stringkey[i];
        for (var counterBlock = new Array(blockSize), nonce = new Date().getTime(), nonceMs = nonce % 1e3, nonceSec = Math.floor(nonce / 1e3), nonceRnd = Math.floor(65535 * Math.random()), i = 0; 2 > i; i++) counterBlock[i] = 255 & nonceMs >>> 8 * i;
        for (var i = 0; 2 > i; i++) counterBlock[i + 2] = 255 & nonceRnd >>> 8 * i;
        for (var i = 0; 4 > i; i++) counterBlock[i + 4] = 255 & nonceSec >>> 8 * i;
        for (var ctrTxt = "", i = 0; 8 > i; i++) ctrTxt += String.fromCharCode(counterBlock[i]);
        for (var keySchedule = keyExpansion(key), blockCount = Math.ceil(plaintext.length / blockSize), ciphertxt = new Array(blockCount), b = 0; blockCount > b; b++) {
            for (var c = 0; 4 > c; c++) counterBlock[15 - c] = 255 & b >>> 8 * c;
            for (var c = 0; 4 > c; c++) counterBlock[15 - c - 4] = b / 4294967296 >>> 8 * c;
            for (var cipherCntr = cipher(counterBlock, keySchedule), blockLength = blockCount - 1 > b ? blockSize : (plaintext.length - 1) % blockSize + 1, cipherChar = new Array(blockLength), i = 0; blockLength > i; i++) cipherChar[i] = cipherCntr[i] ^ plaintext.charCodeAt(b * blockSize + i), 
            cipherChar[i] = String.fromCharCode(cipherChar[i]);
            ciphertxt[b] = cipherChar.join("");
        }
        var ciphertext = ctrTxt + ciphertxt.join("");
        return ciphertext;
    }, Aes.ctrDecrypt = function(ciphertext, stringkey) {
        var blockSize = 16;
        if (16 != stringkey.length && 24 != stringkey.length && 32 != stringkey.length) return "";
        for (var key = new Array(stringkey.length), i = 0; i < stringkey.length; i++) key[i] = 255 & stringkey[i];
        for (var counterBlock = new Array(8), ctrTxt = ciphertext.slice(0, 8), i = 0; 8 > i; i++) counterBlock[i] = ctrTxt.charCodeAt(i);
        for (var keySchedule = keyExpansion(key), nBlocks = Math.ceil((ciphertext.length - 8) / blockSize), ct = new Array(nBlocks), b = 0; nBlocks > b; b++) ct[b] = ciphertext.slice(8 + b * blockSize, 8 + b * blockSize + blockSize);
        ciphertext = ct;
        for (var plaintxt = new Array(ciphertext.length), b = 0; nBlocks > b; b++) {
            for (var c = 0; 4 > c; c++) counterBlock[15 - c] = 255 & b >>> 8 * c;
            for (var c = 0; 4 > c; c++) counterBlock[15 - c - 4] = 255 & (b + 1) / 4294967296 - 1 >>> 8 * c;
            for (var cipherCntr = cipher(counterBlock, keySchedule), plaintxtByte = new Array(ciphertext[b].length), i = 0; i < ciphertext[b].length; i++) plaintxtByte[i] = cipherCntr[i] ^ ciphertext[b].charCodeAt(i), 
            plaintxtByte[i] = String.fromCharCode(plaintxtByte[i]);
            plaintxt[b] = plaintxtByte.join("");
        }
        var plaintext = plaintxt.join("");
        return plaintext = a4p.Utf8.decode(plaintext);
    };
    var sBox = [ 99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22 ], invsBox = [ 82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125 ], rCon = [ [ 0, 0, 0, 0 ], [ 1, 0, 0, 0 ], [ 2, 0, 0, 0 ], [ 4, 0, 0, 0 ], [ 8, 0, 0, 0 ], [ 16, 0, 0, 0 ], [ 32, 0, 0, 0 ], [ 64, 0, 0, 0 ], [ 128, 0, 0, 0 ], [ 27, 0, 0, 0 ], [ 54, 0, 0, 0 ] ];
    return Aes;
}();

var LocalFileSystem, Metadata, FileError, ProgressEvent, File, DirectoryEntry, DirectoryReader, FileWriter, FileEntry, FileSystem, FileReader, FileTransferError, FileUploadOptions, FileUploadResult, FileTransfer, Camera, a4p;

a4p || (a4p = {}), a4p.uid = [ "0", "0", "0" ], a4p.idStr = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", 
a4p.idNext = {
    "0": 1,
    "1": 2,
    "2": 3,
    "3": 4,
    "4": 5,
    "5": 6,
    "6": 7,
    "7": 8,
    "8": 9,
    "9": 10,
    A: 11,
    B: 12,
    C: 13,
    D: 14,
    E: 15,
    F: 16,
    G: 17,
    H: 18,
    I: 19,
    J: 20,
    K: 21,
    L: 22,
    M: 23,
    N: 24,
    O: 25,
    P: 26,
    Q: 27,
    R: 28,
    S: 29,
    T: 30,
    U: 31,
    V: 32,
    W: 33,
    X: 34,
    Y: 35,
    Z: 0
}, a4p.nextUid = function() {
    for (var index = a4p.uid.length; index; ) {
        index--;
        var i = a4p.idNext[a4p.uid[index]];
        if (a4p.uid[index] = a4p.idStr[i], i > 0) return a4p.uid.join("");
    }
    return a4p.uid.unshift("0"), a4p.uid.join("");
}, a4p.getUid = function() {
    return a4p.uid.join("");
}, a4p.initUid = function(seed) {
    if (a4p.isUndefined(seed)) return a4p.uid = [ "0", "0", "0" ], void 0;
    seed = seed.toUpperCase(), a4p.uid = [];
    for (var i = 0, n = seed.length; n > i; i++) {
        var c = seed.charAt(i);
        a4p.isDefined(a4p.idNext[c]) && a4p.uid.push(c);
    }
    for (;a4p.uid.length < 3; ) a4p.uid.unshift("0");
}, a4p.isUndefined = function(obj) {
    return "undefined" == typeof obj;
}, a4p.isDefined = function(obj) {
    return "undefined" != typeof obj;
}, a4p.isUndefinedOrNull = function(obj) {
    return "undefined" == typeof obj || null === obj;
}, a4p.isDefinedAndNotNull = function(obj) {
    return "undefined" != typeof obj && null !== obj;
}, a4p.isEmptyOrFalse = function(obj) {
    switch (typeof obj) {
      case "object":
        return null === obj ? !0 : 0 == Object.getOwnPropertyNames(obj).length ? !0 : obj instanceof Array ? 0 === obj.length : !1;

      case "string":
        return 0 === obj.length;

      case "number":
        return 0 == obj;

      case "boolean":
        return !obj;

      case "function":
        return !1;

      case "undefined":
        return !0;
    }
    return !obj;
}, a4p.isTrueOrNonEmpty = function(obj) {
    switch (typeof obj) {
      case "object":
        return null === obj ? !1 : 0 == Object.getOwnPropertyNames(obj).length ? !1 : obj instanceof Array ? 0 !== obj.length : !0;

      case "string":
        return 0 !== obj.length;

      case "number":
        return 0 != obj;

      case "boolean":
        return obj;

      case "function":
        return !0;

      case "undefined":
        return !1;
    }
    return !!obj;
}, a4p.safeApply = function(scope, expr, beforeFct, afterFct) {
    beforeFct && a4p.safeApply(scope, beforeFct), scope.$root.$$phase ? scope.$root.$evalAsync(function() {
        scope.$eval(expr);
    }) : scope.$apply(expr), afterFct && a4p.safeApply(scope, afterFct);
}, a4p.promiseWakeupNb = 0, a4p.promiseWakeupTimeout = null, a4p.promiseWakeup = function(scope, httpPromise, fctOnHttpSuccess, fctOnHttpError) {
    function tick() {
        a4p.promiseWakeupNb > 0 && (a4p.safeApply(scope), a4p.promiseWakeupTimeout = setTimeout(tick, 1e3));
    }
    var promiseWakeupOnHttpSuccess = function(response) {
        a4p.promiseWakeupNb--, a4p.promiseWakeupNb <= 0 && (a4p.InternalLog.log("a4p.promiseWakeup.tick", "stop"), 
        a4p.promiseWakeupNb = 0, clearTimeout(a4p.promiseWakeupTimeout), a4p.promiseWakeupTimeout = null), 
        fctOnHttpSuccess(response);
    }, promiseWakeupOnHttpError = function(response) {
        a4p.promiseWakeupNb--, a4p.promiseWakeupNb <= 0 && (a4p.InternalLog.log("a4p.promiseWakeup.tick", "stop"), 
        a4p.promiseWakeupNb = 0, clearTimeout(a4p.promiseWakeupTimeout), a4p.promiseWakeupTimeout = null), 
        fctOnHttpError(response);
    };
    0 == a4p.promiseWakeupNb && (a4p.InternalLog.log("a4p.promiseWakeup.tick", "start"), 
    a4p.promiseWakeupTimeout = setTimeout(tick, 1e3)), a4p.promiseWakeupNb++, httpPromise.then(promiseWakeupOnHttpSuccess, promiseWakeupOnHttpError);
};

var cache = window.applicationCache, cacheStatusValues = [], a4pTranslateDatesToPxSize = function(date_start, date_end, totalSize) {
    var date1 = date_start;
    if ("string" == typeof date1 && (date1 = a4pDateParse(date_start)), !date1) return totalSize;
    var date2 = date_end;
    if ("string" == typeof date2 && (date2 = a4pDateParse(date_end)), !date2) return totalSize;
    var milliseconds = date2.getTime() - date1.getTime();
    if (0 > milliseconds) return totalSize;
    var days = milliseconds / 1e3 / 86400;
    return days > 1 && (days = 1), Math.round(days * totalSize);
}, a4pTranslateDateToPx = function(date, totalSize) {
    var date1 = date;
    if ("string" == typeof date1 && (date1 = a4pDateParse(date)), !date1) return 0;
    var days = (60 * date1.getHours() + date1.getMinutes()) / 1440;
    return Math.round(days * totalSize);
};

a4p.not = function(f) {
    return function() {
        var result = f.apply(this, arguments);
        return !result;
    };
}, a4p.mapper = function(f) {
    return function(a) {
        return map(a, f);
    };
}, a4p.memoize = function(f) {
    var cache = {};
    return function() {
        var key = arguments.length + Array.prototype.join.call(arguments, ",");
        return key in cache ? cache[key] : cache[key] = f.apply(this, arguments);
    };
}, a4p.extend = function(o, p) {
    for (var prop in p) o[prop] = p[prop];
    return o;
}, a4p.merge = function(o, p) {
    for (var prop in p) o.hasOwnProperty(prop) || (o[prop] = p[prop]);
    return o;
}, a4p.restrict = function(o, p) {
    for (var prop in o) prop in p || delete o[prop];
    return o;
}, a4p.subtract = function(o, p) {
    for (var prop in p) delete o[prop];
    return o;
}, a4p.union = function(o, p) {
    return a4p.extend(a4p.extend({}, o), p);
}, a4p.intersection = function(o, p) {
    return a4p.restrict(a4p.extend({}, o), p);
}, a4p.keys = function(o) {
    if ("object" != typeof o) throw new TypeError();
    var result = [];
    for (var prop in o) o.hasOwnProperty(prop) && result.push(prop);
    return result;
}, a4p.create = function(proto, props) {
    function F() {}
    if (null == proto) throw new TypeError();
    if (Object.create) return Object.create(proto, props);
    var t = typeof proto;
    if ("object" !== t && "function" !== t) throw new TypeError();
    F.prototype = proto;
    var o = new F();
    return a4p.extend(o, props);
}, a4p.even = function(x) {
    return 0 === x % 2;
}, a4p.odd = a4p.not(a4p.even), a4p.foreach = function(a, f, t) {
    try {
        a.forEach(f, t);
    } catch (e) {
        if (e === a4p.foreach.break) return;
        throw e;
    }
}, a4p.foreach.break = new Error("StopIteration");

var a4p;

a4p || (a4p = {}), a4p.Analytics = function() {
    function Analytics(localStorage, googleAnalytics_UA_ID) {
        this.localStorage = null, a4p.isDefined(localStorage) && localStorage && (this.localStorage = localStorage), 
        this.mAnalyticsArray = [], this.mAnalyticsFunctionnalitiesArray = [], this.localStorage && (this.mAnalyticsArray = this.localStorage.get(mAnalyticsLS, this.mAnalyticsArray), 
        this.mAnalyticsFunctionnalitiesArray = this.localStorage.get(mAnalyticsFunctionnalitiesLS, this.mAnalyticsFunctionnalitiesArray)), 
        this.vid = "vid_undefined", this.uid = "uid_undefined", this.initDone = !1, this.bEnabled = !0, 
        this.googleAnalytics_UA_ID = googleAnalytics_UA_ID, this.gaQueue = null, this.gaPanalytics = null, 
        this.gaPlugin = null;
    }
    var mAnalyticsLS = "a4p.Analytics", mAnalyticsFunctionnalitiesLS = "a4p.Analytics.functionalities";
    return Analytics.prototype.init = function() {
        this.initDone || ("undefined" != typeof _gaq ? (a4p.InternalLog.log("Analytics", "googleAnalytics official launched."), 
        this.gaQueue = _gaq || [], this.gaQueue.push([ "_setAccount", this.googleAnalytics_UA_ID ]), 
        this.gaQueue.push([ "_trackPageview" ])) : a4p.InternalLog.log("Analytics", "googleAnalytics not defined."), 
        "undefined" != typeof window.plugins && "undefined" != typeof window.plugins.gaPlugin && (a4p.InternalLog.log("Analytics", "GAPlugin launched."), 
        this.gaPlugin = window.plugins.gaPlugin, this.gaPlugin.init(successHandler, errorHandler, this.googleAnalytics_UA_ID, 10)), 
        this.initDone = !0);
    }, Analytics.prototype.setVid = function(vid) {
        this.vid = vid, a4p.InternalLog.log("Analytics", "set vid " + this.vid);
    }, Analytics.prototype.setUid = function(uid) {
        a4p.InternalLog.log("Analytics", "set uid " + uid), uid && "" != uid && (this.uid = uid);
    }, Analytics.prototype.setEnabled = function(enable) {
        this.bEnabled = 1 == enable, a4p.InternalLog.log("Analytics", "set enabled " + this.bEnabled);
    }, Analytics.prototype.add = function(category, action, value) {
        if (this.bEnabled && category && action) {
            var shouldBeTrackedAsEvent = !0;
            if ("Once" == category) {
                for (var i = 0; i < this.mAnalyticsFunctionnalitiesArray.length && shouldBeTrackedAsEvent; i++) this.mAnalyticsFunctionnalitiesArray[i] === action && (shouldBeTrackedAsEvent = !1);
                shouldBeTrackedAsEvent && this.mAnalyticsFunctionnalitiesArray.push(action);
            }
            a4p.InternalLog.log("Analytics", "shouldBeTrackedAsEvent ?" + shouldBeTrackedAsEvent);
            var paramEvent = {
                vid: this.vid,
                uid: this.uid,
                type: "event",
                category: category,
                action: action,
                value: value || 1
            }, paramView = {
                vid: this.vid,
                uid: this.uid,
                type: "view",
                category: category,
                action: action,
                value: value || 1
            };
            a4p.InternalLog.log("Analytics", "add " + paramEvent.toString()), shouldBeTrackedAsEvent && this.mAnalyticsArray.push(paramEvent), 
            this.mAnalyticsArray.push(paramView), this.localStorage && this.localStorage.set(mAnalyticsLS, this.mAnalyticsArray), 
            this.localStorage && this.localStorage.set(mAnalyticsFunctionnalitiesLS, this.mAnalyticsFunctionnalitiesArray), 
            checkConnection() && this.run();
        }
    }, Analytics.prototype.run = function() {
        if (this.bEnabled) {
            a4p.InternalLog.log("Analytics", "run - pushing " + this.mAnalyticsArray.length + " elements");
            var bOK = !0;
            try {
                for (var i = 0; i < this.mAnalyticsArray.length; i++) {
                    var param = this.mAnalyticsArray[i];
                    if ("view" == param.type) {
                        var url = "" + this.vid + " - " + param.category + " - " + param.action;
                        a4p.InternalLog.log("Analytics", "track view " + url), this.gaQueue && this.gaQueue.push([ "_trackPageview", url ]), 
                        this.gaPanalytics && this.gaPanalytics.trackView(url), this.gaPlugin && this.gaPlugin.trackPage(successHandler, errorHandler, url);
                    } else {
                        var cat = this.vid + " - " + param.category, act = param.category + " - " + param.action, lab = param.uid, val = param.value;
                        a4p.InternalLog.log("Analytics", "track event " + cat + ", " + act + ", " + lab + ", " + val), 
                        this.gaQueue && this.gaQueue.push([ "_trackEvent", cat, act, lab, val ]), this.gaPanalytics && this.gaPanalytics.trackEvent(cat, act, lab, val), 
                        this.gaPlugin && this.gaPlugin.trackEvent(successHandler, errorHandler, cat, act, lab, val);
                    }
                }
            } catch (e) {
                a4p.ErrorLog.log("Analytics", " run pb : " + a4p.formatError(e)), bOK = !1;
            }
            bOK && (this.mAnalyticsArray = [], this.localStorage && this.localStorage.set(mAnalyticsLS, this.mAnalyticsArray));
        }
    }, Analytics;
}();

var a4p;

a4p || (a4p = {}), a4p.Base64 = function() {
    function uint6ToB64(nUint6) {
        return 26 > nUint6 ? nUint6 + 65 : 52 > nUint6 ? nUint6 + 71 : 62 > nUint6 ? nUint6 - 4 : 62 === nUint6 ? 43 : 63 === nUint6 ? 47 : 65;
    }
    function b64ToUint6(nChr) {
        return nChr > 64 && 91 > nChr ? nChr - 65 : nChr > 96 && 123 > nChr ? nChr - 71 : nChr > 47 && 58 > nChr ? nChr + 4 : 43 === nChr ? 62 : 47 === nChr ? 63 : 0;
    }
    var Base64 = {};
    Base64.encode = function(input) {
        for (var chr1, chr2, chr3, enc1, enc2, enc3, enc4, output = "", i = 0; i < input.length; ) chr1 = input.charCodeAt(i++), 
        chr2 = input.charCodeAt(i++), chr3 = input.charCodeAt(i++), enc1 = chr1 >> 2, enc2 = (3 & chr1) << 4 | chr2 >> 4, 
        enc3 = (15 & chr2) << 2 | chr3 >> 6, enc4 = 63 & chr3, isNaN(chr2) ? enc3 = enc4 = 64 : isNaN(chr3) && (enc4 = 64), 
        output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);
        return output;
    }, Base64.encodeFromUint8Array = function(input) {
        for (var nMod3, sB64Enc = "", nLen = input.length, nUint24 = 0, nIdx = 0; nLen > nIdx; nIdx++) nMod3 = nIdx % 3, 
        nIdx > 0 && 0 === 4 * nIdx / 3 % 76 && (sB64Enc += "\r\n"), nUint24 |= input[nIdx] << (24 & 16 >>> nMod3), 
        (2 === nMod3 || 1 === input.length - nIdx) && (sB64Enc += String.fromCharCode(uint6ToB64(63 & nUint24 >>> 18), uint6ToB64(63 & nUint24 >>> 12), uint6ToB64(63 & nUint24 >>> 6), uint6ToB64(63 & nUint24)), 
        nUint24 = 0);
        return sB64Enc.replace(/A(?=A$|$)/g, "=");
    }, Base64.decode = function(input) {
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4, output = "", i = 0;
        for (input = input.replace(/[^A-Za-z0-9\+\/\=]/g, ""); i < input.length; ) enc1 = keyStr.indexOf(input.charAt(i++)), 
        enc2 = keyStr.indexOf(input.charAt(i++)), enc3 = keyStr.indexOf(input.charAt(i++)), 
        enc4 = keyStr.indexOf(input.charAt(i++)), chr1 = enc1 << 2 | enc2 >> 4, chr2 = (15 & enc2) << 4 | enc3 >> 2, 
        chr3 = (3 & enc3) << 6 | enc4, output += String.fromCharCode(chr1), 64 != enc3 && (output += String.fromCharCode(chr2)), 
        64 != enc4 && (output += String.fromCharCode(chr3));
        return output;
    }, Base64.decodeToUint8Array = function(input) {
        for (var nMod3, nMod4, nBlocksSize = 1, sB64Enc = input.replace(/[^A-Za-z0-9\+\/]/g, ""), nInLen = sB64Enc.length, nOutLen = nBlocksSize ? Math.ceil((3 * nInLen + 1 >> 2) / nBlocksSize) * nBlocksSize : 3 * nInLen + 1 >> 2, taBytes = new Uint8Array(nOutLen), nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInLen > nInIdx; nInIdx++) if (nMod4 = 3 & nInIdx, 
        nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4, 3 === nMod4 || 1 === nInLen - nInIdx) {
            for (nMod3 = 0; 3 > nMod3 && nOutLen > nOutIdx; nMod3++, nOutIdx++) taBytes[nOutIdx] = 255 & nUint24 >>> (24 & 16 >>> nMod3);
            nUint24 = 0;
        }
        return taBytes;
    };
    var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    return Base64;
}();

var a4p;

a4p || (a4p = {}), a4p.BezierDrawer = function() {
    function BezierDrawer(canvas) {
        this.canvas = canvas, this.ctx = canvas.getContext("2d"), this.begin = function() {
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        }, this.add = function(p0, q0, q1, p1) {
            this.ctx.beginPath(), this.ctx.strokeStyle = "cyan", this.ctx.lineWidth = "6", this.ctx.moveTo(p0.x, p0.y), 
            this.ctx.bezierCurveTo(q0.x, q0.y, q1.x, q1.y, p1.x, p1.y), this.ctx.stroke(), this.ctx.strokeStyle = "red", 
            this.ctx.lineWidth = "1", this.ctx.beginPath(), this.ctx.arc(p0.x, p0.y, 2, 0, 2 * Math.PI), 
            this.ctx.stroke(), this.ctx.strokeStyle = "green", this.ctx.lineWidth = "1", this.ctx.beginPath(), 
            this.ctx.arc(q0.x, q0.y, 2, 0, 2 * Math.PI), this.ctx.stroke(), this.ctx.strokeStyle = "green", 
            this.ctx.lineWidth = "1", this.ctx.beginPath(), this.ctx.arc(q1.x, q1.y, 2, 0, 2 * Math.PI), 
            this.ctx.stroke(), this.ctx.strokeStyle = "red", this.ctx.lineWidth = "1", this.ctx.beginPath(), 
            this.ctx.arc(p1.x, p1.y, 2, 0, 2 * Math.PI), this.ctx.stroke(), this.ctx.strokeStyle = "green", 
            this.ctx.lineWidth = "1", this.ctx.beginPath(), this.ctx.moveTo(p0.x, p0.y), this.ctx.lineTo(q0.x, q0.y), 
            this.ctx.stroke(), this.ctx.strokeStyle = "green", this.ctx.lineWidth = "1", this.ctx.beginPath(), 
            this.ctx.moveTo(q1.x, q1.y), this.ctx.lineTo(p1.x, p1.y), this.ctx.stroke();
        }, this.end = function() {};
    }
    return BezierDrawer;
}();

var a4p;

a4p || (a4p = {}), a4p.BezierInterpolator = function() {
    function BezierInterpolator(scale) {
        var p0, q0, q1, p1, samplePoint0, samplePoint1, sample10X, sample10Y, sampleDist10;
        this.listeners = [], this.sampleScale = scale || .33, this.controlPoints = [], this.nbCurve = 0, 
        this.begin = function() {
            this.controlPoints = [], this.nbCurve = 0, p0 = null, q0 = null, q1 = null, p1 = null, 
            samplePoint0 = null, samplePoint1 = null;
            for (var i = 0; i < this.listeners.length; i++) this.listeners[i].begin();
        }, this.add = function(x, y) {
            if (null == samplePoint0) return samplePoint0 = {
                x: x,
                y: y
            }, void 0;
            if (null == samplePoint1) {
                if (x == samplePoint0.x && y == samplePoint0.y) return;
                return samplePoint1 = {
                    x: x,
                    y: y
                }, sample10X = samplePoint1.x - samplePoint0.x, sample10Y = samplePoint1.y - samplePoint0.y, 
                sampleDist10 = Math.sqrt(sample10X * sample10X + sample10Y * sample10Y), p0 = {
                    x: samplePoint0.x,
                    y: samplePoint0.y
                }, q0 = {
                    x: samplePoint0.x + this.sampleScale * sample10X,
                    y: samplePoint0.y + this.sampleScale * sample10Y
                }, this.controlPoints.push(p0), this.controlPoints.push(q0), void 0;
            }
            if (x != samplePoint1.x || y != samplePoint1.y) {
                var tangentX = x - samplePoint0.x, tangentY = y - samplePoint0.y, tangentDist = Math.sqrt(tangentX * tangentX + tangentY * tangentY);
                q1 = {
                    x: samplePoint1.x - this.sampleScale * tangentX * sampleDist10 / tangentDist,
                    y: samplePoint1.y - this.sampleScale * tangentY * sampleDist10 / tangentDist
                }, p1 = {
                    x: samplePoint1.x,
                    y: samplePoint1.y
                }, this.controlPoints.push(q1), this.controlPoints.push(p1);
                for (var i = 0; i < this.listeners.length; i++) this.listeners[i].add(p0, q0, q1, p1);
                sample10X = x - samplePoint1.x, sample10Y = y - samplePoint1.y, sampleDist10 = Math.sqrt(sample10X * sample10X + sample10Y * sample10Y), 
                p0 = p1, q0 = {
                    x: samplePoint1.x + this.sampleScale * tangentX * sampleDist10 / tangentDist,
                    y: samplePoint1.y + this.sampleScale * tangentY * sampleDist10 / tangentDist
                }, this.controlPoints.push(q0), samplePoint0 = samplePoint1, samplePoint1 = {
                    x: x,
                    y: y
                }, this.nbCurve++;
            }
        }, this.end = function() {
            if (this.controlPoints.length > 1) {
                q1 = {
                    x: samplePoint1.x - this.sampleScale * sample10X,
                    y: samplePoint1.y - this.sampleScale * sample10Y
                }, p1 = {
                    x: samplePoint1.x,
                    y: samplePoint1.y
                }, this.controlPoints.push(q1), this.controlPoints.push(p1);
                for (var i = 0; i < this.listeners.length; i++) this.listeners[i].add(p0, q0, q1, p1);
                this.nbCurve++;
            }
            for (var i = 0; i < this.listeners.length; i++) this.listeners[i].end();
        };
    }
    return BezierInterpolator.prototype.size = function() {
        return this.nbCurve;
    }, BezierInterpolator.prototype.addListener = function(listener) {
        this.listeners.push(listener);
    }, BezierInterpolator;
}(), Bridge.prototype.setUrl = function(url, email, appId, right) {
    a4p.InternalLog.log("bridge.js", "setUrl"), window.device && "Android" === window.device.platform && cordova.exec(null, null, "Bridge", "setUrl", [ url, email, appId, right ]);
}, Bridge.prototype.getUrl = function(email, success, fail) {
    return a4p.InternalLog.log("bridge.js", "getUrl"), window.device ? "Android" === window.device.platform ? (a4p.InternalLog.log("bridge.js", "exec getUrl"), 
    cordova.exec(success, fail, "Bridge", "getUrl", [ email ])) : null : null;
}, window.plugins || (window.plugins = {}), window.plugins.bridge = new Bridge();

var a4p;

a4p || (a4p = {}), a4p.BrowserCapabilities = function(navigator, window, document) {
    function prefixStyle(style) {
        return "" === capacities.vendor ? style : (style = style.charAt(0).toUpperCase() + style.substr(1), 
        capacities.vendor + style);
    }
    for (var capacities = {
        vendor: "",
        cssVendor: ""
    }, dummyStyle = document.createElement("div").style, vendors = "t,webkitT,MozT,msT,OT".split(","), nbVendors = vendors.length, i = 0; nbVendors > i; i++) {
        var t = vendors[i] + "ransform";
        if (t in dummyStyle) {
            capacities.vendor = vendors[i].substr(0, vendors[i].length - 1), capacities.cssVendor = "-" + capacities.vendor.toLowerCase() + "-";
            break;
        }
    }
    return capacities.transform = prefixStyle("transform"), capacities.transitionProperty = prefixStyle("transitionProperty"), 
    capacities.transitionDuration = prefixStyle("transitionDuration"), capacities.transformOrigin = prefixStyle("transformOrigin"), 
    capacities.transitionTimingFunction = prefixStyle("transitionTimingFunction"), capacities.transitionDelay = prefixStyle("transitionDelay"), 
    capacities.isAndroid = /android/gi.test(navigator.appVersion), capacities.isIDevice = /iphone|ipad/gi.test(navigator.appVersion), 
    capacities.isTouchPad = /hp-tablet/gi.test(navigator.appVersion), capacities.isPhantom = /phantom/gi.test(navigator.userAgent), 
    capacities.hasTouch = ("ontouchstart" in window || "createTouch" in document) && (capacities.isAndroid || capacities.isIDevice) && !capacities.isPhantom, 
    capacities.has3d = prefixStyle("perspective") in dummyStyle, capacities.hasTransform = "" != capacities.vendor, 
    capacities.hasTransitionEnd = prefixStyle("transition") in dummyStyle, capacities.online = navigator.onLine, 
    capacities.RESIZE_EVENT = "onorientationchange" in window ? "orientationchange" : "resize", 
    capacities.TRNEND_EVENT = function() {
        if ("" == capacities.vendor) return !1;
        var transitionEnd = {
            "": "transitionend",
            webkit: "webkitTransitionEnd",
            Moz: "transitionend",
            O: "otransitionend",
            ms: "MSTransitionEnd"
        };
        return transitionEnd[capacities.vendor];
    }(), capacities.nextFrame = window.requestAnimationFrame ? function(callback) {
        return window.requestAnimationFrame(callback);
    } : window.webkitRequestAnimationFrame ? function(callback) {
        return window.webkitRequestAnimationFrame(callback);
    } : window.mozRequestAnimationFrame ? function(callback) {
        return window.mozRequestAnimationFrame(callback);
    } : window.oRequestAnimationFrame ? function(callback) {
        return window.oRequestAnimationFrame(callback);
    } : window.msRequestAnimationFrame ? function(callback) {
        return window.msRequestAnimationFrame(callback);
    } : function(callback) {
        return setTimeout(callback, 1);
    }, capacities.cancelFrame = window.cancelRequestAnimationFrame ? function(handle) {
        return window.cancelRequestAnimationFrame(handle);
    } : window.webkitCancelAnimationFrame ? function(handle) {
        return window.webkitCancelAnimationFrame(handle);
    } : window.webkitCancelRequestAnimationFrame ? function(handle) {
        return window.webkitCancelRequestAnimationFrame(handle);
    } : window.mozCancelRequestAnimationFrame ? function(handle) {
        return window.mozCancelRequestAnimationFrame(handle);
    } : window.oCancelRequestAnimationFrame ? function(handle) {
        return window.oCancelRequestAnimationFrame(handle);
    } : window.msCancelRequestAnimationFrame ? function(handle) {
        return window.msCancelRequestAnimationFrame(handle);
    } : function(handle) {
        return clearTimeout(handle);
    }, capacities.translateZ = capacities.has3d && !capacities.isAndroid ? " translateZ(0)" : "", 
    dummyStyle = null, capacities;
}(navigator, window, document), function($) {
    var gStar = 0, methods = {
        initRaty: function(selfRaty) {
            var RatyReadOnly = !1;
            0 == selfRaty && (RatyReadOnly = !1), $("#star").raty({
                cancel: !0,
                cancelOff: "/raty/cancel-off.png",
                cancelOn: "/raty/cancel-on.png",
                hintList: [ "1", "2", "3", "4", "5" ],
                number: 5,
                readOnly: RatyReadOnly,
                scoreName: "score",
                start: selfRaty,
                starOff: "/raty/star-off.png",
                starOn: "/raty/star-on.png",
                click: function(score) {
                    methods.saveRaty(score), methods.clickRaty(score);
                }
            });
        },
        saveRaty: function(selfRaty) {
            gStar = selfRaty;
        },
        clickRaty: function() {
            $.fn.raty.readOnly(!0);
        }
    };
    $.fn.feedback = function() {
        var html = '<div class="control-group"><label class="control-label" for="feedback_company_name" lang="en" name="Company">Company</label><div class="controls"><input type="text" id="feedback_company_name" class="editable" placeholder="Your company\'s name"></div></div><div class="control-group"><label class="control-label" for="feedback_phone" lang="en" name="Your Phone">Your Phone</label><div class="controls"><input type="tel" class="editable" id="feedback_phone"  placeholder="Your Phone"></div></div><div class="control-group"><div class="controls" id="rate"><div id="star"></div></div></div><div class="control-group"><div class="controls"><textarea id="feedback_feedback" class="editable" placeholder="Your feedback is usefull to improve our application!"></textarea></div></div>';
        return this.empty(), this.append(html), methods.initRaty(2), this;
    }, $.fn.feedback.save = function() {
        var feedback_company_name = $("#feedback_company_name").val(), feedback_phone = $("#feedback_phone").val(), feedback_feedback = $("#feedback_feedback").val(), feedback_star = gStar;
        window.localStorage.feedback_company_name = feedback_company_name, window.localStorage.feedback_phone = feedback_phone, 
        window.localStorage.feedback_feedback = feedback_feedback, window.localStorage.feedback_star = feedback_star;
    };
}(jQuery);

var a4p;

a4p || (a4p = {});

var json_encode = $.toJSON || Object.toJSON || window.JSON && (JSON.encode || JSON.stringify), json_decode = $.evalJSON || window.JSON && (JSON.decode || JSON.parse) || function(str) {
    return String(str).evalJSON();
};

a4p.Fifo = function() {
    function Fifo(uid) {
        a4p.isUndefined(uid) && (uid = "xxx"), this.mSQLFifoName = "a4p." + uid + ".sql", 
        this.mJSFuncFifoName = "a4p." + uid + ".js.function", this.mJSArgsFifoName = "a4p." + uid + ".js.params", 
        this.mMsgFifoName = "a4p." + uid + ".msg", this.mMailFifoName = "a4p." + uid + ".mail", 
        this.mPb = !1;
    }
    return Fifo.prototype.clear = function() {
        var bok = !0;
        return a4p.InternalLog.log("fifoClear"), $.jStorage.set(this.mSQLFifoName, ""), 
        $.jStorage.set(this.mJSFuncFifoName, ""), $.jStorage.set(this.mJSArgsFifoName, ""), 
        $.jStorage.set(this.mMailFifoName, ""), $.jStorage.set(this.mMsgFifoName, ""), bok;
    }, Fifo.prototype.getFuncFifoName = function() {
        return this.mJSFuncFifoName;
    }, Fifo.prototype.getArgsFifoName = function() {
        return this.mJSArgsFifoName;
    }, Fifo.prototype.getSQL = function(bRemoveAfter) {
        var fifo = $.jStorage.get(this.mSQLFifoName);
        return a4p.InternalLog.log("fifoGetSQL", fifo), bRemoveAfter && $.jStorage.set(this.mSQLFifoName, ""), 
        null == fifo ? "" : fifo;
    }, Fifo.prototype.addSQL = function(sql) {
        var bok = !0;
        if (a4p.InternalLog.log("fifoAddSQL", sql), a4p.isUndefined(sql) || 0 === sql.length || !sql) return !1;
        var fifo = this.getSQL();
        return fifo += sql, $.jStorage.set(this.mSQLFifoName, fifo), bok;
    }, Fifo.prototype.getArray = function(fifoName) {
        var fifo = $.jStorage.get(fifoName);
        return 0 === fifo.length && (fifo = new Array()), fifo;
    }, Fifo.prototype.callJS = function(bRemoveAfter, success) {
        var count = 0, anyPb = !1;
        a4p.InternalLog.log("fifoCallJS", bRemoveAfter);
        var funcs = this.getArray(this.mJSFuncFifoName), args = this.getArray(this.mJSArgsFifoName), funcsAfter = funcs.slice(0), argsAfter = args.slice(0);
        for (var i in funcs) if (funcs.hasOwnProperty(i)) {
            var func = json_decode(funcs[i]), arg = json_decode(args[i]);
            a4p.InternalLog.log("fifoCallJS", "func:" + func + " args:" + arg);
            var bok = function() {
                try {
                    var ok = window[func](arg);
                    if (0 == ok) return !1;
                } catch (e) {
                    return a4p.InternalLog.log("fifoCallJS", "Pb : " + e.message), !1;
                }
                return !0;
            }();
            bok || (setMessage("pb_fifo", "func:" + func + " args:" + arg), anyPb = !0), bRemoveAfter && (funcsAfter.splice(0, 1), 
            argsAfter.splice(0, 1)), count += 1;
        }
        return $.jStorage.set(this.mJSFuncFifoName, funcsAfter), $.jStorage.set(this.mJSArgsFifoName, argsAfter), 
        count == funcs.length && success && success(), count > 0 && (this.mPb = anyPb), 
        count;
    }, Fifo.prototype.addJS = function(fn, params, forceDuplicate) {
        if (a4p.InternalLog.log("fifoAddJS", "fn:" + fn + " p:" + params), "function" == typeof fn) return a4p.ErrorLog.log("fifoAddJS", "ERROR not a function name"), 
        !1;
        var funcs = this.getArray(this.mJSFuncFifoName), args = this.getArray(this.mJSArgsFifoName), funcsCount = funcs.length, argsCount = args.length, fifoFunction = fn;
        (a4p.isUndefined(params) || !params || null == params) && (params = "");
        var testStorage_elm = document.createElement("a4pFifo");
        testStorage_elm.setAttribute("Params", json_encode(params));
        var elArgs = testStorage_elm.getAttribute("Params");
        testStorage_elm.setAttribute("Func", json_encode(fifoFunction));
        var elFunc = testStorage_elm.getAttribute("Func");
        forceDuplicate = a4p.isDefined(forceDuplicate) && 1 == forceDuplicate;
        var insert = !0;
        if (!forceDuplicate) for (var i = 0; funcsCount > i && argsCount > i; i++) funcs[i] === elFunc && args[i] === elArgs && (insert = !1);
        return insert ? (a4p.InternalLog.log("fifoAddJS", "INSERT elFunc:" + elFunc + " elArgs:" + elArgs), 
        funcs[funcsCount] = elFunc, args[argsCount] = elArgs, $.jStorage.set(this.mJSFuncFifoName, funcs), 
        $.jStorage.set(this.mJSArgsFifoName, args), !0) : (a4p.InternalLog.log("fifoAddJS", "IGNORED because already inserted in fifo"), 
        !1);
    }, Fifo.prototype.launch = function() {
        if (a4p.InternalLog.log("fifoLaunch"), !checkConnection()) return a4p.InternalLog.log("fifoLaunch", "Offline"), 
        a4pSpinner.setOffline(), void 0;
        if (!gYouCanUpdate) return setMessage("pb_limite_refresh"), a4p.InternalLog.log("fifoLaunch", "You can't update twice in 5 minutes"), 
        void 0;
        a4pSpinner.setOffline(!1), a4pSpinner.run();
        var count = this.callJS(!0, function() {});
        return 0 == count && a4pSpinner.done(this.mPb), count;
    }, Fifo.prototype.getErrors = function(bRemoveAfter) {
        var msgs = this.getArray(this.mMsgFifoName);
        return bRemoveAfter && 1 == bRemoveAfter && $.jStorage.set(this.mMsgFifoName, ""), 
        msgs;
    }, Fifo.prototype.addError = function(msg) {
        var msgs = this.getErrors(), date = new Date(), msgEl = {
            text: msg,
            date: date.toString("dd-MM-yy HH:mm:ss")
        }, testStorage_elm = document.createElement("Msg");
        testStorage_elm.setAttribute("Msg", json_encode(msgEl));
        var el = testStorage_elm.getAttribute("Msg");
        return msgs[msgs.length] = el, $.jStorage.set(this.mMsgFifoName, msgs), !0;
    }, Fifo.prototype.addMail = function() {
        var bok = !0;
        a4p.InternalLog.log("fifoAddMail");
        var mails = this.getArray(this.mMailFifoName);
        return mails[mails.length] = "", $.jStorage.set(this.mMailFifoName, mails), bok;
    }, Fifo.prototype.getMailCount = function(bErase) {
        var mails = this.getArray(this.mMailFifoName), count = mails.length;
        return a4p.InternalLog.log("fifoGetMailCount", count), bErase && 1 == bErase && (a4p.InternalLog.log("fifoGetMailCount", "erase"), 
        $.jStorage.set(this.mMailFifoName, "")), count;
    }, Fifo;
}();

var a4pFifo = new a4p.Fifo("a4p"), gFileSystem = null, fileErrorHandler = function(e) {
    var msg = "Unknown Error - " + e.code;
    if (a4p.InternalLog.log("fileErrorHandler", e.code), e.source) switch (e.code) {
      case FileTransferError.FILE_NOT_FOUND_ERR:
        msg = "FILE_NOT_FOUND_ERR";
        break;

      case FileTransferError.INVALID_URL_ERR:
        msg = "INVALID_URL_ERR";
        break;

      case FileTransferError.CONNECTION_ERR:
        msg = "CONNECTION_ERR";
    } else switch (e.code) {
      case FileError.QUOTA_EXCEEDED_ERR:
        msg = "QUOTA_EXCEEDED_ERR";
        break;

      case FileError.NOT_FOUND_ERR:
        msg = "NOT_FOUND_ERR";
        break;

      case FileError.SECURITY_ERR:
        msg = "SECURITY_ERR";
        break;

      case FileError.INVALID_MODIFICATION_ERR:
        msg = "INVALID_MODIFICATION_ERR";
        break;

      case FileError.INVALID_STATE_ERR:
        msg = "INVALID_STATE_ERR";
        break;

      case FileError.NO_MODIFICATION_ALLOWED_ERR:
        msg = "NO_MODIFICATION_ALLOWED_ERR";
        break;

      case FileError.SYNTAX_ERR:
        msg = "SYNTAX_ERR";
        break;

      case FileError.TYPE_MISMATCH_ERR:
        msg = "TYPE_MISMATCH_ERR";
        break;

      case FileError.PATH_EXISTS_ERR:
        msg = "PATH_EXISTS_ERR";
    }
    e.source && (msg = msg + " error source " + e.source), e.target && (msg = msg + " error target " + e.target), 
    e.description && (msg = msg + " error description " + e.description), a4p.InternalLog.log("fileErrorHandler", "File Error: " + msg), 
    onFillCompleted(!1), a4p.InternalLog.log("fileErrorHandler", "onFillCompleted : false");
}, a4p;

a4p || (a4p = {});

var a4p;

a4p || (a4p = {});

var geo_code, geo_city, geo_success = function(position) {
    var lat = position.coords.latitude, lng = position.coords.longitude;
    geo_codeLatLng(lat, lng);
}, geo_error = function() {
    a4p.ErrorLog.log("geo_error", "Geocoder failed");
}, geo_codeLatLng = function(lat, lng) {
    var latlng = new google.maps.LatLng(lat, lng);
    geo_code.geocode({
        latLng: latlng
    }, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) if (a4p.InternalLog.log("geo_codeLatLng", results), 
        results[1]) {
            a4p.InternalLog.log("geo_codeLatLng", results[0].formatted_address), geo_city = results[0].formatted_address;
            for (var i = 0; i < results[0].address_components.length; i++) for (var b = 0; b < results[0].address_components[i].types.length; b++) if ("administrative_area_level_1" == results[0].address_components[i].types[b]) {
                city = results[0].address_components[i];
                break;
            }
            a4p.InternalLog.log("geo_codeLatLng", city.short_name + " " + city.long_name), geo_city = '<?php print Lang::_t("(near)",$current_user);?> ' + geo_city;
            var option = new Option(geo_city, geo_city, !0, !0);
            $("#rdv-header-location").append(option), $("#rdv-header-location").val(option);
        } else a4p.InternalLog.log("geo_codeLatLng", "Geocoder No results found"); else a4p.InternalLog.log("geo_codeLatLng", "Geocoder failed due to: " + status);
    });
}, loadLocation = function() {
    geo_code = new google.maps.Geocoder(), navigator.geolocation && navigator.geolocation.getCurrentPosition(geo_success, geo_error);
}, a4p;

a4p || (a4p = {}), a4p.GestureDrawer = function() {
    function GestureDrawer(canvas) {
        this.canvas = canvas, this.ctx = canvas.getContext("2d"), this.begin = function() {}, 
        this.add = function(event) {
            this.ctx.strokeStyle = "blue", this.ctx.lineWidth = "1", this.ctx.beginPath(), this.ctx.arc(event.x, event.y, 2, 0, 2 * Math.PI), 
            this.ctx.stroke(), this.ctx.strokeStyle = "blue", this.ctx.lineWidth = "1", this.ctx.beginPath(), 
            this.ctx.moveTo(event.x, event.y), "W" == event.line ? this.ctx.lineTo(event.x - event.dist, event.y) : "SW" == event.line ? this.ctx.lineTo(event.x - event.dist / Math.sqrt(2), event.y + event.dist / Math.sqrt(2)) : "S" == event.line ? this.ctx.lineTo(event.x, event.y + event.dist) : "SE" == event.line ? this.ctx.lineTo(event.x + event.dist / Math.sqrt(2), event.y + event.dist / Math.sqrt(2)) : "E" == event.line ? this.ctx.lineTo(event.x + event.dist, event.y) : "NE" == event.line ? this.ctx.lineTo(event.x + event.dist / Math.sqrt(2), event.y - event.dist / Math.sqrt(2)) : "N" == event.line ? this.ctx.lineTo(event.x, event.y - event.dist) : "NW" == event.line && this.ctx.lineTo(event.x - event.dist / Math.sqrt(2), event.y - event.dist / Math.sqrt(2)), 
            this.ctx.stroke();
        }, this.end = function() {};
    }
    return GestureDrawer;
}();

var a4p;

a4p || (a4p = {}), a4p.GestureInterpolator = function() {
    function GestureInterpolator() {
        function triggerMove(self, move) {
            self.lastMove = {
                line: move.line,
                rotate: move.rotate
            }, self.moves.push({
                x: move.x,
                y: move.y,
                timeStamp: move.timeStamp,
                angle: move.angle,
                dist: move.dist,
                line: move.line,
                rotate: move.rotate
            });
            for (var i = 0; i < self.listeners.length; i++) self.listeners[i].add(move);
        }
        var samplePoint0, samplePoint1, sample10X, sample10Y, sampleDist10, sampleAngle10, move0;
        this.listeners = [], this.moves = [], this.lastMove = null, this.begin = function() {
            this.moves = [], this.fromIdx = 0, samplePoint0 = null, samplePoint1 = null, move0 = null;
            for (var i = 0; i < this.listeners.length; i++) this.listeners[i].begin();
        }, this.add = function(x, y, timeStamp) {
            if (null == samplePoint0) return samplePoint0 = {
                x: x,
                y: y,
                timeStamp: timeStamp
            }, void 0;
            var self = this;
            if (null == samplePoint1) {
                if (x == samplePoint0.x && y == samplePoint0.y) return;
                return samplePoint1 = {
                    x: x,
                    y: y,
                    timeStamp: timeStamp
                }, sample10X = samplePoint1.x - samplePoint0.x, sample10Y = samplePoint1.y - samplePoint0.y, 
                sampleDist10 = Math.sqrt(sample10X * sample10X + sample10Y * sample10Y), sampleAngle10 = Math.atan2(sample10Y, sample10X), 
                move0 = {
                    x: samplePoint0.x,
                    y: samplePoint0.y,
                    timeStamp: samplePoint0.timeStamp,
                    angle: sampleAngle10,
                    dist: sampleDist10,
                    line: orientation(sampleAngle10),
                    rotate: ""
                }, triggerMove(self, move0), void 0;
            }
            if (x != samplePoint1.x || y != samplePoint1.y) {
                var oldDist = sampleDist10, tangentX = x - samplePoint0.x, tangentY = y - samplePoint0.y;
                Math.sqrt(tangentX * tangentX + tangentY * tangentY);
                var tangentAngle = Math.atan2(tangentY, tangentX), line = orientation(tangentAngle), rotate = "";
                sample10X = x - samplePoint1.x, sample10Y = y - samplePoint1.y, sampleDist10 = Math.sqrt(sample10X * sample10X + sample10Y * sample10Y), 
                sampleAngle10 = Math.atan2(sample10Y, sample10X);
                var newMove = !1;
                if (line != move0.line) {
                    var angle = angleOf(tangentAngle, move0.angle), angleNbStep = angleNbStepOf(tangentAngle, move0.angle);
                    rotate = rotation(angle, angleNbStep), newMove = !0;
                }
                newMove && "" != this.lastMove.rotate && rotate != this.lastMove.rotate && (move0 = {
                    x: move0.x,
                    y: move0.y,
                    timeStamp: move0.timeStamp,
                    angle: move0.angle,
                    dist: move0.dist,
                    line: move0.line,
                    rotate: ""
                }, triggerMove(self, move0)), move0 = {
                    x: samplePoint1.x,
                    y: samplePoint1.y,
                    timeStamp: samplePoint1.timeStamp,
                    angle: tangentAngle,
                    dist: (oldDist + sampleDist10) / 2,
                    line: line,
                    rotate: rotate
                }, newMove && triggerMove(self, move0), samplePoint0 = samplePoint1, samplePoint1 = {
                    x: x,
                    y: y,
                    timeStamp: timeStamp
                };
            }
        }, this.end = function() {
            if (null != samplePoint1) {
                var line = orientation(sampleAngle10), rotate = "", newMove = !1;
                if (line != move0.line) {
                    var angle = angleOf(sampleAngle10, move0.angle), angleNbStep = angleNbStepOf(sampleAngle10, move0.angle);
                    rotate = rotation(angle, angleNbStep), newMove = !0;
                }
                var self = this;
                newMove && "" != this.lastMove.rotate && rotate != this.lastMove.rotate && (move0 = {
                    x: move0.x,
                    y: move0.y,
                    timeStamp: move0.timeStamp,
                    angle: move0.angle,
                    dist: move0.dist,
                    line: move0.line,
                    rotate: ""
                }, triggerMove(self, move0)), move0 = {
                    x: samplePoint1.x,
                    y: samplePoint1.y,
                    timeStamp: samplePoint1.timeStamp,
                    angle: sampleAngle10,
                    dist: sampleDist10,
                    line: line,
                    rotate: rotate
                }, newMove && triggerMove(self, move0), "" != this.lastMove.rotate && (move0 = {
                    x: move0.x,
                    y: move0.y,
                    timeStamp: move0.timeStamp,
                    angle: move0.angle,
                    dist: move0.dist,
                    line: move0.line,
                    rotate: ""
                }, triggerMove(self, move0));
            }
            for (var i = 0; i < this.listeners.length; i++) this.listeners[i].end();
        };
    }
    function orientation(angle) {
        return angle > Math.PI - step ? "W" : angle > Math.PI - 3 * step ? "SW" : angle > Math.PI - 5 * step ? "S" : angle > Math.PI - 7 * step ? "SE" : angle > Math.PI - 9 * step ? "E" : angle > Math.PI - 11 * step ? "NE" : angle > Math.PI - 13 * step ? "N" : angle > Math.PI - 15 * step ? "NW" : "W";
    }
    function angleOf(angle1, angle0) {
        var angle = angle1 - angle0;
        return angle <= -Math.PI ? angle += 2 * Math.PI : angle > Math.PI && (angle -= 2 * Math.PI), 
        angle;
    }
    function angleNbStepOf(angle1, angle0) {
        var nbStep = Math.round(angle1 / (2 * step)) - Math.round(angle0 / (2 * step));
        return -4 >= nbStep ? nbStep += 8 : nbStep > 4 && (nbStep -= 8), nbStep;
    }
    function rotation(angle, nbStep) {
        return 1 == Math.abs(nbStep) ? 0 > angle ? "left" : "right" : "";
    }
    var step = Math.PI / 8;
    return GestureInterpolator.prototype.addListener = function(listener) {
        this.listeners.push(listener);
    }, GestureInterpolator.prototype.size = function() {
        return this.moves.length;
    }, GestureInterpolator;
}();

var a4p;

a4p || (a4p = {}), a4p.Hex = function() {
    var Hex = {};
    Hex.encode = function(input) {
        for (var output = "", i = 0; i < input.length; i++) {
            var x = input.charCodeAt(i);
            output += hexTab.charAt(15 & x >>> 4) + hexTab.charAt(15 & x);
        }
        return output;
    }, Hex.decode = function(input) {
        var output = "";
        input.length % 2 > 0 && (input = "0" + input);
        for (var i = 0; i < input.length; i += 2) output += String.fromCharCode(parseInt(input.charAt(i) + input.charAt(i + 1), 16));
        return output;
    };
    var hexTab = "0123456789abcdef";
    return Hex;
}();

var a4p;

a4p || (a4p = {}), a4p.Json = function($) {
    function Json() {
        this.version = "0.1";
    }
    if (!Object.toJSON && !window.JSON) throw new Error("Object.toJSON or window.JSON needs to be loaded before a4p.Json!");
    return Json.uriEncode = function(obj) {
        var name, value, fullSubName, subName, subValue, innerObj, i, query = "";
        for (name in obj) if (obj.hasOwnProperty(name)) if (value = obj[name], value instanceof Array) for (i = 0; i < value.length; ++i) subValue = value[i], 
        fullSubName = name + "[" + i + "]", innerObj = {}, innerObj[fullSubName] = subValue, 
        query += Json.uriEncode(innerObj) + "&"; else if (value instanceof Object) for (subName in value) value.hasOwnProperty(subName) && (subValue = value[subName], 
        fullSubName = name + "[" + subName + "]", innerObj = {}, innerObj[fullSubName] = subValue, 
        query += Json.uriEncode(innerObj) + "&"); else void 0 !== value && null !== value && (query += encodeURIComponent(name) + "=" + encodeURIComponent(value) + "&");
        return query.length ? query.substr(0, query.length - 1) : query;
    }, Json.object2String = $.toJSON || Object.toJSON || window.JSON && (JSON.encode || JSON.stringify), 
    Json.string2Object = $.evalJSON || window.JSON && (JSON.decode || JSON.parse) || function(str) {
        return String(str).evalJSON();
    }, Json;
}(window.$ || window.jQuery);

var a4p;

a4p || (a4p = {}), a4p.formatError = function(arg) {
    return arg instanceof Error && (arg.stack ? arg = arg.message && -1 === arg.stack.indexOf(arg.message) ? "Error: " + arg.message + "\n" + arg.stack : arg.stack : arg.sourceURL && (arg = arg.message + "\n" + arg.sourceURL + ":" + arg.line)), 
    arg;
}, a4p.Log = function() {
    function Log(nbMax) {
        this.nbMax = nbMax || 1e3, this.nbMax < 1 && (this.nbMax = 1), this.logEntries = [], 
        this.callbackHandle = 0, this.callbacks = [];
    }
    return Log.prototype.getLog = function() {
        return this.logEntries;
    }, Log.prototype.clearLog = function() {
        this.logEntries = [];
    }, Log.prototype.setNbMax = function(nbMax) {
        this.nbMax = nbMax || 1e3, this.nbMax < 1 && (this.nbMax = 1), this.logEntries.length > this.nbMax && this.logEntries.splice(0, this.logEntries.length - this.nbMax);
    }, Log.prototype.log = function(msg, details, traceStackOffset) {
        details = details || "";
        var now = new Date();
        now = a4pDateFormat(now) + "." + now.getMilliseconds();
        var stack, from = "";
        if (traceStackOffset = traceStackOffset || 0, stack = new Error().stack) {
            var caller_stack = stack.split("\n"), caller_line = caller_stack[2 + traceStackOffset];
            if (caller_line) {
                var index = caller_line.indexOf("at ") + 3;
                from = " at " + caller_line.substr(index);
            }
        }
        details ? console.log(now + from + " : " + msg + " : " + details) : console.log(now + from + " : " + msg);
        var logEntry = {
            date: now,
            msg: msg,
            details: details
        };
        this.logEntries.length >= this.nbMax && this.logEntries.splice(0, 1), this.logEntries.push(logEntry);
        for (var idx = 0, nb = this.callbacks.length; nb > idx; idx++) try {
            this.callbacks[idx].callback(this.callbacks[idx].id, logEntry);
        } catch (e) {
            console.log("Error on callback#" + idx + " called from Log for the logEntry " + a4pDumpData(logEntry, 1) + " : " + a4p.formatError(e));
        }
        return logEntry;
    }, Log.prototype.addListener = function(fct) {
        return this.callbackHandle++, this.callbacks.push({
            id: this.callbackHandle,
            callback: fct
        }), this.callbackHandle;
    }, Log.prototype.cancelListener = function(callbackHandle) {
        for (var idx = this.callbacks.length - 1; idx >= 0; idx--) if (this.callbacks[idx].id == callbackHandle) return this.callbacks.splice(idx, 1), 
        !0;
        return !1;
    }, Log;
}(), a4p.ErrorLog = new a4p.Log(1e3), a4p.InternalLog = new a4p.Log(1e3);

var a4p;

a4p || (a4p = {}), a4p.MoveDrawer = function() {
    function MoveDrawer(canvas) {
        this.canvas = canvas, this.ctx = canvas.getContext("2d"), this.begin = function() {
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        }, this.add = function(p0) {
            this.ctx.strokeStyle = "red", this.ctx.lineWidth = "1", this.ctx.beginPath(), this.ctx.arc(p0.x, p0.y, 2, 0, 2 * Math.PI), 
            this.ctx.stroke(), this.ctx.strokeStyle = "green", this.ctx.lineWidth = "1", this.ctx.beginPath(), 
            this.ctx.arc(p0.x + p0.dx, p0.y + p0.dy, 2, 0, 2 * Math.PI), this.ctx.stroke(), 
            this.ctx.strokeStyle = "green", this.ctx.lineWidth = "1", this.ctx.beginPath(), 
            this.ctx.moveTo(p0.x, p0.y), this.ctx.lineTo(p0.x + p0.dx, p0.y + p0.dy), this.ctx.stroke();
        }, this.end = function() {};
    }
    return MoveDrawer;
}();

var a4p;

a4p || (a4p = {}), a4p.MoveInterpolator = function() {
    function MoveInterpolator() {
        var samplePoint0, samplePoint1, sample10X, sample10Y, sampleDist10, sampleAngle10;
        this.listeners = [], this.moves = [], this.begin = function() {
            this.moves = [], samplePoint0 = null, samplePoint1 = null;
            for (var i = 0; i < this.listeners.length; i++) this.listeners[i].begin();
        }, this.add = function(x, y, timeStamp) {
            if (null == samplePoint0) return samplePoint0 = {
                x: x,
                y: y,
                timeStamp: timeStamp
            }, void 0;
            if (null != samplePoint1) {
                if (x != samplePoint1.x || y != samplePoint1.y) {
                    var oldDist = sampleDist10, tangentX = x - samplePoint0.x, tangentY = y - samplePoint0.y, tangentDist = Math.sqrt(tangentX * tangentX + tangentY * tangentY), tangentAngle = Math.atan2(tangentY, tangentX);
                    sample10X = x - samplePoint1.x, sample10Y = y - samplePoint1.y, sampleDist10 = Math.sqrt(sample10X * sample10X + sample10Y * sample10Y), 
                    sampleAngle10 = Math.atan2(sample10Y, sample10X);
                    var compass2 = orientation(tangentAngle);
                    this.moves.push({
                        x: samplePoint1.x,
                        y: samplePoint1.y,
                        dx: tangentX * (oldDist + sampleDist10) / 2 / tangentDist,
                        dy: tangentY * (oldDist + sampleDist10) / 2 / tangentDist,
                        d: (oldDist + sampleDist10) / 2,
                        angle: tangentAngle,
                        compass: compass2,
                        timeStamp: samplePoint1.timeStamp
                    });
                    for (var idx2 = 0; idx2 < this.listeners.length; idx2++) this.listeners[idx2].add({
                        x: samplePoint1.x,
                        y: samplePoint1.y,
                        dx: tangentX * (oldDist + sampleDist10) / 2 / tangentDist,
                        dy: tangentY * (oldDist + sampleDist10) / 2 / tangentDist,
                        d: (oldDist + sampleDist10) / 2,
                        angle: tangentAngle,
                        compass: compass2,
                        timeStamp: samplePoint1.timeStamp
                    });
                    samplePoint0 = samplePoint1, samplePoint1 = {
                        x: x,
                        y: y,
                        timeStamp: timeStamp
                    };
                }
            } else {
                if (x == samplePoint0.x && y == samplePoint0.y) return;
                samplePoint1 = {
                    x: x,
                    y: y,
                    timeStamp: timeStamp
                }, sample10X = samplePoint1.x - samplePoint0.x, sample10Y = samplePoint1.y - samplePoint0.y, 
                sampleDist10 = Math.sqrt(sample10X * sample10X + sample10Y * sample10Y), sampleAngle10 = Math.atan2(sample10Y, sample10X);
                var compass1 = orientation(sampleAngle10);
                this.moves.push({
                    x: samplePoint0.x,
                    y: samplePoint0.y,
                    dx: sample10X,
                    dy: sample10Y,
                    d: sampleDist10,
                    angle: sampleAngle10,
                    compass: compass1,
                    timeStamp: samplePoint0.timeStamp
                });
                for (var idx1 = 0; idx1 < this.listeners.length; idx1++) this.listeners[idx1].add({
                    x: samplePoint0.x,
                    y: samplePoint0.y,
                    dx: sample10X,
                    dy: sample10Y,
                    d: sampleDist10,
                    angle: sampleAngle10,
                    compass: compass1,
                    timeStamp: samplePoint0.timeStamp
                });
            }
        }, this.end = function() {
            if (null != samplePoint1) {
                var compass1 = orientation(sampleAngle10);
                this.moves.push({
                    x: samplePoint1.x,
                    y: samplePoint1.y,
                    dx: sample10X,
                    dy: sample10Y,
                    d: sampleDist10,
                    angle: sampleAngle10,
                    compass: compass1,
                    timeStamp: samplePoint1.timeStamp
                });
                for (var i = 0; i < this.listeners.length; i++) this.listeners[i].add({
                    x: samplePoint1.x,
                    y: samplePoint1.y,
                    dx: sample10X,
                    dy: sample10Y,
                    d: sampleDist10,
                    angle: sampleAngle10,
                    compass: compass1,
                    timeStamp: samplePoint1.timeStamp
                });
            }
            for (var idx1 = 0; idx1 < this.listeners.length; idx1++) this.listeners[idx1].end();
        };
    }
    function orientation(angle) {
        return angle > Math.PI - step ? "W" : angle > Math.PI - 3 * step ? "SW" : angle > Math.PI - 5 * step ? "S" : angle > Math.PI - 7 * step ? "SE" : angle > Math.PI - 9 * step ? "E" : angle > Math.PI - 11 * step ? "NE" : angle > Math.PI - 13 * step ? "N" : angle > Math.PI - 15 * step ? "NW" : "W";
    }
    MoveInterpolator.prototype.size = function() {
        return this.moves.length;
    }, MoveInterpolator.prototype.addListener = function(listener) {
        this.listeners.push(listener);
    };
    var step = Math.PI / 8;
    return MoveInterpolator;
}();

var a4p;

a4p || (a4p = {}), a4p.throttle = function(func, wait) {
    var context, args, timeout, result, previous = 0, later = function() {
        previous = new Date(), timeout = null, result = func.apply(context, args);
    };
    return function() {
        var now = new Date(), remaining = wait - (now - previous);
        return context = this, args = arguments, 0 >= remaining ? (window.clearTimeout(timeout), 
        timeout = null, previous = now, result = func.apply(context, args)) : timeout || (timeout = window.setTimeout(later, remaining)), 
        result;
    };
}, a4p.delay = function(func, wait) {
    var context, args, timeout, previous = 0, later = function() {
        var now = new Date().getTime(), remaining = wait - (now - previous);
        remaining > 0 ? timeout = window.setTimeout(later, remaining) : (timeout = null, 
        func.apply(context, args));
    };
    return function() {
        return previous = new Date().getTime(), timeout || (context = this, args = arguments, 
        timeout = window.setTimeout(later, wait)), timeout;
    };
};

var a4p;

a4p || (a4p = {}), a4p.PointSampler = function() {
    function PointSampler(maxIdleTime, minDistance) {
        var sourcePoint0, sourcePoint1, ptTimeout, lg0, lg1, addSampleTimeout = null;
        this.listeners = [], this.maxIdleTime = maxIdleTime || 10, this.minSqrDistance = minDistance * minDistance || 10, 
        this.stats = {
            timeout: 0,
            angle: 0,
            lg: 0
        }, this.points = [], this.beginSample = function() {
            sourcePoint0 = null, sourcePoint1 = null, ptTimeout = null, lg0 = 0, lg1 = 0, null != addSampleTimeout && clearTimeout(addSampleTimeout), 
            addSampleTimeout = null, this.stats = {
                timeout: 0,
                angle: 0,
                lg: 0
            };
            for (var i = 0; i < this.listeners.length; i++) this.listeners[i].begin();
        }, this.addSample = function(x, y, timeStamp) {
            var self = this;
            if (null == sourcePoint0) {
                null != addSampleTimeout && clearTimeout(addSampleTimeout), addSampleTimeout = null, 
                ptTimeout = null, this.points.push({
                    x: x,
                    y: y
                });
                for (var i = 0; i < this.listeners.length; i++) this.listeners[i].add(x, y, timeStamp);
                return sourcePoint0 = {
                    x: x,
                    y: y
                }, void 0;
            }
            if (null != sourcePoint1) {
                lg1 = (x - sourcePoint1.x) * (x - sourcePoint1.x) + (y - sourcePoint1.y) * (y - sourcePoint1.y);
                var lg2 = (x - sourcePoint0.x) * (x - sourcePoint0.x) + (y - sourcePoint0.y) * (y - sourcePoint0.y);
                if (lg1 > this.minSqrDistance) if (lg1 + lg0 > 1.5 * lg2) {
                    null != addSampleTimeout && clearTimeout(addSampleTimeout), addSampleTimeout = null, 
                    ptTimeout = null, this.stats.lg++, this.points.push({
                        x: x,
                        y: y
                    });
                    for (var i = 0; i < this.listeners.length; i++) this.listeners[i].add(x, y, timeStamp);
                    sourcePoint0 = sourcePoint1, sourcePoint1 = {
                        x: x,
                        y: y
                    }, lg0 = lg1;
                } else if (lg1 + lg0 - lg2 > 36) {
                    null != addSampleTimeout && clearTimeout(addSampleTimeout), addSampleTimeout = null, 
                    ptTimeout = null, this.stats.angle++, this.points.push({
                        x: x,
                        y: y
                    });
                    for (var i = 0; i < this.listeners.length; i++) this.listeners[i].add(x, y, timeStamp);
                    sourcePoint0 = sourcePoint1, sourcePoint1 = {
                        x: x,
                        y: y
                    }, lg0 = lg1;
                } else ptTimeout = {
                    x: x,
                    y: y,
                    timeStamp: timeStamp
                }, null == addSampleTimeout && (addSampleTimeout = setTimeout(function() {
                    self.stats.timeout++, self.points.push({
                        x: ptTimeout.x,
                        y: ptTimeout.y
                    });
                    for (var i = 0; i < self.listeners.length; i++) self.listeners[i].add(ptTimeout.x, ptTimeout.y, ptTimeout.timeStamp);
                    sourcePoint0 = sourcePoint1, sourcePoint1 = {
                        x: ptTimeout.x,
                        y: ptTimeout.y
                    }, ptTimeout = null, addSampleTimeout = null, lg0 = lg1;
                }, this.maxIdleTime)); else ptTimeout = {
                    x: x,
                    y: y,
                    timeStamp: timeStamp
                }, null == addSampleTimeout && (addSampleTimeout = setTimeout(function() {
                    self.stats.timeout++, self.points.push({
                        x: ptTimeout.x,
                        y: ptTimeout.y
                    });
                    for (var i = 0; i < self.listeners.length; i++) self.listeners[i].add(ptTimeout.x, ptTimeout.y, ptTimeout.timeStamp);
                    sourcePoint0 = sourcePoint1, sourcePoint1 = {
                        x: ptTimeout.x,
                        y: ptTimeout.y
                    }, ptTimeout = null, addSampleTimeout = null, lg0 = lg1;
                }, this.maxIdleTime));
            } else if (lg0 = (x - sourcePoint0.x) * (x - sourcePoint0.x) + (y - sourcePoint0.y) * (y - sourcePoint0.y), 
            lg0 > this.minSqrDistance) {
                null != addSampleTimeout && clearTimeout(addSampleTimeout), addSampleTimeout = null, 
                ptTimeout = null, this.stats.lg++, this.points.push({
                    x: x,
                    y: y
                });
                for (var i = 0; i < this.listeners.length; i++) this.listeners[i].add(x, y, timeStamp);
                sourcePoint1 = {
                    x: x,
                    y: y
                };
            } else ptTimeout = {
                x: x,
                y: y,
                timeStamp: timeStamp
            }, null == addSampleTimeout && (addSampleTimeout = setTimeout(function() {
                self.stats.timeout++, self.points.push({
                    x: ptTimeout.x,
                    y: ptTimeout.y
                });
                for (var i = 0; i < self.listeners.length; i++) self.listeners[i].add(ptTimeout.x, ptTimeout.y, ptTimeout.timeStamp);
                sourcePoint1 = {
                    x: ptTimeout.x,
                    y: ptTimeout.y
                }, ptTimeout = null, addSampleTimeout = null;
            }, this.maxIdleTime));
        }, this.endSample = function() {
            if (null != addSampleTimeout && clearTimeout(addSampleTimeout), addSampleTimeout = null, 
            null != ptTimeout) {
                this.points.push({
                    x: ptTimeout.x,
                    y: ptTimeout.y
                });
                for (var i = 0; i < this.listeners.length; i++) this.listeners[i].add(ptTimeout.x, ptTimeout.y, ptTimeout.timeStamp);
            }
            sourcePoint0 = null, sourcePoint1 = null, ptTimeout = null, lg0 = 0, lg1 = 0;
            for (var i = 0; i < this.listeners.length; i++) this.listeners[i].end();
        };
    }
    return PointSampler.prototype.addListener = function(listener) {
        this.listeners.push(listener);
    }, PointSampler;
}();

var a4p;

a4p || (a4p = {}), a4p.Resize = function(navigator, window, document) {
    function refreshResizers() {
        attrIndex = {}, refreshWriteQueue = [];
        for (var key, fn, nodeDependent, value, idx = 0, nb = rootListener.length; nb > idx; idx++) {
            for (var resizer = rootListener[idx], varIdx = 0, varNb = resizer.scopeVars.length; varNb > varIdx; varIdx++) key = resizer.scopeVars[varIdx].key, 
            fn = resizer.scopeVars[varIdx].fn, nodeDependent = resizer.scopeVars[varIdx].nodeDependent, 
            value = fn(resizer.scope, {}), setVar(resizer, key, value);
            for (var cssIdx = 0, cssNb = resizer.cssKeys.length; cssNb > cssIdx; cssIdx++) {
                switch (key = resizer.cssKeys[cssIdx].key, fn = resizer.cssKeys[cssIdx].fn, nodeDependent = resizer.cssKeys[cssIdx].nodeDependent, 
                value = fn(resizer.scope, {}), key) {
                  case "top":
                    a4p.isDefined(listenersIndex[resizer.name]) && listenersIndex[resizer.name].id == resizer.id && (attrIndex["@" + resizer.name + ".clientTop"] = value, 
                    attrIndex["@" + resizer.name + ".offsetTop"] = value), attrIndex["@" + resizer.id + ".clientTop"] = value, 
                    attrIndex["@" + resizer.id + ".offsetTop"] = value;
                    break;

                  case "left":
                    a4p.isDefined(listenersIndex[resizer.name]) && listenersIndex[resizer.name].id == resizer.id && (attrIndex["@" + resizer.name + ".clientLeft"] = value, 
                    attrIndex["@" + resizer.name + ".offsetLeft"] = value), attrIndex["@" + resizer.id + ".clientLeft"] = value, 
                    attrIndex["@" + resizer.id + ".offsetLeft"] = value;
                    break;

                  case "width":
                    a4p.isDefined(listenersIndex[resizer.name]) && listenersIndex[resizer.name].id == resizer.id && (attrIndex["@" + resizer.name + ".clientWidth"] = value, 
                    attrIndex["@" + resizer.name + ".offsetWidth"] = value), attrIndex["@" + resizer.id + ".clientWidth"] = value, 
                    attrIndex["@" + resizer.id + ".offsetWidth"] = value;
                    break;

                  case "height":
                    a4p.isDefined(listenersIndex[resizer.name]) && listenersIndex[resizer.name].id == resizer.id && (attrIndex["@" + resizer.name + ".clientHeight"] = value, 
                    attrIndex["@" + resizer.name + ".offsetHeight"] = value), attrIndex["@" + resizer.id + ".clientHeight"] = value, 
                    attrIndex["@" + resizer.id + ".offsetHeight"] = value;
                    break;

                  case "minHeight":
                    break;

                  case "minWidth":
                    break;

                  case "lineHeight":                }
                refreshWriteQueue.push({
                    resizer: resizer,
                    cssAttr: key,
                    value: value,
                    nodeDependent: nodeDependent
                });
            }
        }
        for (var jobIdx = 0, jobNb = refreshWriteQueue.length; jobNb > jobIdx; jobIdx++) {
            var job = refreshWriteQueue[jobIdx];
            setCss(job.resizer, job.cssAttr, "" + job.value + "px");
        }
        rootScope && a4p.safeApply(rootScope);
    }
    function endRefreshResizers() {
        for (var previousAttrIndex = attrIndex, previousRefreshWrites = {}, i = 0, nb = refreshWriteQueue.length; nb > i; i++) {
            var job = refreshWriteQueue[i];
            previousRefreshWrites[job.resizer.id + "-" + job.cssAttr] = job.value;
        }
        refreshResizers();
        var dirty = !1;
        for (var optKey in attrIndex) attrIndex.hasOwnProperty(optKey) && previousAttrIndex[optKey] != attrIndex[optKey] && (dirty = !0, 
        a4p.ErrorLog.log("a4p.Resize", "COLLATERAL " + endRefreshResizersCount + " effect of resizers upon " + optKey + " : " + previousAttrIndex[optKey] + "," + attrIndex[optKey] + " : try to move some resize-css-* option in its DOM children."));
        for (var jobIdx = 0, jobNb = refreshWriteQueue.length; jobNb > jobIdx; jobIdx++) {
            var job = refreshWriteQueue[jobIdx];
            a4p.isUndefined(previousRefreshWrites[job.resizer.id + "-" + job.cssAttr]) ? (dirty = !0, 
            a4p.ErrorLog.log("a4p.Resize", "COLLATERAL " + endRefreshResizersCount + " effect of resizers upon " + job.resizer.name + "." + job.cssAttr + " which did not exist previously.")) : previousRefreshWrites[job.resizer.id + "-" + job.cssAttr] != job.value && (dirty = !0, 
            a4p.ErrorLog.log("a4p.Resize", "COLLATERAL " + endRefreshResizersCount + " effect of resizers upon " + job.resizer.name + "." + job.cssAttr + " which had another value previously."));
        }
        dirty && !endRefreshResizersCount ? (endRefreshResizersCount++, endRefreshResizersTimer = a4p.BrowserCapabilities.nextFrame(endRefreshResizers)) : orientationChangeEvent && Resize.windowAll();
    }
    function refreshAllTimeout() {
        endRefreshResizersTimer && (a4p.BrowserCapabilities.cancelFrame(endRefreshResizersTimer), 
        endRefreshResizersTimer = null), refreshResizers(), endRefreshResizersCount = 0, 
        endRefreshResizersTimer = a4p.BrowserCapabilities.nextFrame(endRefreshResizers);
    }
    function windowAllTimeout() {
        orientationChangeEvent = !1;
        for (var idx = 0, nb = rootListener.length; nb > idx; idx++) {
            var resizer = rootListener[idx];
            resizer.triggerEvent(EVT_WINDOW, {
                id: resizer.id,
                name: resizer.name,
                resizeOrientation: Resize.resizeOrientation,
                resizePortrait: Resize.resizePortrait,
                resizeOneColumn: Resize.resizeOneColumn,
                resizeWidth: Resize.resizeWidth,
                resizeHeight: Resize.resizeHeight
            });
        }
    }
    function orderResizeListeners() {
        Resize.isReordering = !0;
        for (var idx = rootListener.length - 1; idx >= 0; idx--) {
            var depNodes = rootListener[idx].dependingOnNodes();
            moveResizeListenerAfterDependentNodes(rootListener[idx], depNodes);
        }
        Resize.isReordering = !1;
    }
    function addResizeListener(resizeListener) {
        a4p.isUndefinedOrNull(listenersIndex[resizeListener.id]) && (listenersIndex[resizeListener.id] = resizeListener, 
        rootListener.push(resizeListener), listenersIndex[resizeListener.name] = resizeListener, 
        orderResizeListeners());
    }
    function removeResizeListener(resizeListener) {
        removeIdFromList(rootListener, resizeListener.id), a4p.isDefined(listenersIndex[resizeListener.id]) && delete listenersIndex[resizeListener.id], 
        a4p.isDefined(listenersIndex[resizeListener.name]) && listenersIndex[resizeListener.name].id == resizeListener.id && delete listenersIndex[resizeListener.name];
    }
    function moveResizeListenerAfterDependentNodes(resizeListener, dependentNodeNames) {
        var selfIdx, nb = rootListener.length, depNb = dependentNodeNames.length;
        for (selfIdx = 0; nb > selfIdx && rootListener[selfIdx].id != resizeListener.id; selfIdx++) ;
        for (var lastDepIdx = selfIdx, otherIdx = selfIdx + 1; nb > otherIdx; otherIdx++) for (var otherListenerId = rootListener[otherIdx].id, depIdx = 0; depNb > depIdx; depIdx++) {
            var depName = dependentNodeNames[depIdx];
            if (otherListenerId == listenersIndex[depName].id) {
                lastDepIdx = otherIdx;
                break;
            }
        }
        lastDepIdx > selfIdx && (rootListener.splice(selfIdx, 1), rootListener.splice(lastDepIdx, 0, resizeListener));
    }
    function setVar(self, name, newValue) {
        self.scope[name] = newValue;
    }
    function setCss(self, name, newValue) {
        var oldValue = self.DOMelement.style[name];
        self.element.css(name, newValue), newValue !== oldValue && window.setTimeout(function() {
            self.triggerEvent(EVT_CHANGED, {
                id: self.id,
                name: self.name,
                attr: name,
                value: newValue
            });
        }, a4p.BrowserCapabilities.isAndroid ? 200 : 0);
    }
    function nextUid() {
        for (var index = uid.length; index; ) {
            index--;
            var i = idNext[uid[index]];
            if (uid[index] = idStr[i], i > 0) return uid.join("");
        }
        return uid.unshift("0"), uid.join("");
    }
    function Resize($rootScope, scope, element, options) {
        rootScope = $rootScope, this.id = nextUid(), this.name = this.id, this.scope = scope, 
        this.timeStamp = 0, this.element = element, this.DOMelement = null, this.DOMelement = "object" == typeof element ? element[0] : document.getElementById(element), 
        this.options = {
            callApply: !1
        }, this.nodeList = [], this.nodeIndex = {}, this.cssKeys = [], this.scopeVars = [];
        for (var optKey in options) options.hasOwnProperty(optKey) && (this.options[optKey] = options[optKey], 
        "name" == optKey && (this.name = options[optKey]));
        var self = this;
        addResizeListener(this), this.element.bind("$destroy", function() {
            self.destroy();
        }), orientationChangeHandlerStarted || (window.addEventListener(a4p.BrowserCapabilities.RESIZE_EVENT, Resize.handleDocOrientationChange, !1), 
        orientationChangeHandlerStarted = !0, window.setTimeout(function() {
            a4p.safeApply($rootScope, function() {
                Resize.handleDocOrientationChange();
            });
        }, 200));
    }
    var orientationChangeHandlerStarted = !1, orientationChangeEvent = !1, endRefreshResizersTimer = null, endRefreshResizersTimeout = 200, endRefreshResizersCount = 0, rootListener = [], listenersIndex = {}, rootScope = null, attrIndex = {}, refreshWriteQueue = [], uid = [ "0", "0", "0" ], idStr = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", idNext = {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5,
        "5": 6,
        "6": 7,
        "7": 8,
        "8": 9,
        "9": 10,
        A: 11,
        B: 12,
        C: 13,
        D: 14,
        E: 15,
        F: 16,
        G: 17,
        H: 18,
        I: 19,
        J: 20,
        K: 21,
        L: 22,
        M: 23,
        N: 24,
        O: 25,
        P: 26,
        Q: 27,
        R: 28,
        S: 29,
        T: 30,
        U: 31,
        V: 32,
        W: 33,
        X: 34,
        Y: 35,
        Z: 0
    }, EVT_BEFORE_WINDOW = "BeforeWindow", EVT_WINDOW = "Window", EVT_CHANGED = "Changed";
    return Resize.prototype.destroy = function() {
        return removeResizeListener(this), !0;
    }, Resize.initWidth = 0, Resize.initHeight = 0, Resize.initOrientation = 0, Resize.initPortrait = !1, 
    Resize.initPortrait0Orientation = !1, Resize.resizeOrientation = "landscape", Resize.resizePortrait = !1, 
    Resize.resizeOneColumn = !1, Resize.resizeWidth = 240, Resize.resizeHeight = 240, 
    Resize.isReordering = !1, Resize.prototype.triggerEvent = function(name, evt) {
        var toSenseEventName = "toSense" + name;
        if (a4p.isDefined(this[toSenseEventName]) && null != this[toSenseEventName]) try {
            this[toSenseEventName](evt);
        } catch (exception) {}
        var onEventName = "on" + name;
        if (a4p.isDefined(this[onEventName]) && null != this[onEventName]) {
            try {
                this[onEventName](evt);
            } catch (exception) {}
            return !0;
        }
        return !1;
    }, Resize.prototype.getPathValue = function(path, key) {
        var value = 0, node;
        try {
            if (a4p.isTrueOrNonEmpty(path)) {
                if (!a4p.isDefined(attrIndex["@" + this.id + "." + path + "." + key])) return node = eval("this.DOMelement." + path), 
                Resize.isReordering && this.addDependentNode(node), value = node[key], a4p.isDefined(listenersIndex[this.name]) && listenersIndex[this.name].id == this.id && (attrIndex["@" + this.name + "." + path + "." + key] = value), 
                attrIndex["@" + this.id + "." + path + "." + key] = value, value;
                value = attrIndex["@" + this.id + "." + path + "." + key];
            } else {
                if (!a4p.isDefined(attrIndex["@" + this.id + "." + key])) return node = this.DOMelement, 
                value = node[key], a4p.isDefined(listenersIndex[this.name]) && listenersIndex[this.name].id == this.id && (attrIndex["@" + this.name + "." + key] = value), 
                attrIndex["@" + this.id + "." + key] = value, value;
                value = attrIndex["@" + this.id + "." + key];
            }
        } catch (e) {
            a4p.ErrorLog.log("a4p.Resize " + this.name, "getPathValue(" + path + ", " + key + ") has invalid parameters : " + e.message);
        }
        return value;
    }, Resize.prototype.addDependentNode = function(node) {
        for (var nodeResize = null, i = 0, nb = rootListener.length; nb > i; i++) if (rootListener[i].DOMelement == node) {
            nodeResize = rootListener[i];
            break;
        }
        nodeResize && (listenersIndex[nodeResize.name].id == nodeResize.id ? (a4p.isUndefined(this.nodeIndex[nodeResize.name]) && (this.nodeIndex[nodeResize.name] = !0, 
        this.nodeList.push(nodeResize.name)), a4p.isUndefined(this.nodeIndex[nodeResize.id]) && (this.nodeIndex[nodeResize.id] = !0)) : a4p.isUndefined(this.nodeIndex[nodeResize.id]) && (this.nodeIndex[nodeResize.id] = !0, 
        this.nodeList.push(nodeResize.id)));
    }, Resize.prototype.addScopeVar = function(key, fn) {
        this.scope[key] = 0, this.tmpNodeDependent = !1, fn(this.scope, {}), this.scopeVars.push({
            key: key,
            fn: fn,
            nodeDependent: this.tmpNodeDependent
        });
    }, Resize.prototype.addCssKey = function(key, fn) {
        this.tmpNodeDependent = !1, fn(this.scope, {}), this.tmpNodeDependent || a4p.ErrorLog.log("a4p.Resize", "USELESS resize-css-" + key + " option in resizer " + this.name + ' : try to use style="' + key + ':..." or ng-style="{' + key + ":getResize...()+'px'}\" to calculate it asap."), 
        this.cssKeys.push({
            key: key,
            fn: fn,
            nodeDependent: this.tmpNodeDependent
        });
    }, Resize.prototype.dependingOnNodes = function() {
        var key, fn;
        this.nodeList = [], this.nodeIndex = {};
        for (var varIdx = 0, varNb = this.scopeVars.length; varNb > varIdx; varIdx++) key = this.scopeVars[varIdx].key, 
        fn = this.scopeVars[varIdx].fn, fn(this.scope, {});
        for (var cssIdx = 0, cssNb = this.cssKeys.length; cssNb > cssIdx; cssIdx++) key = this.cssKeys[cssIdx].key, 
        fn = this.cssKeys[cssIdx].fn, fn(this.scope, {});
        return this.nodeList;
    }, Resize.prototype.resize = function() {
        return this.scopeVars.length > 0 ? (Resize.refreshAll(), !0) : this.cssKeys.length > 0 ? (Resize.refreshAll(), 
        !0) : !1;
    }, Resize.refreshAll = a4p.delay(refreshAllTimeout, 300), Resize.windowAll = a4p.delay(windowAllTimeout, 300), 
    Resize.handleDocOrientationChange = function() {
        window.setTimeout(Resize.handleDocOrientationChangeDelay, 750);
    }, Resize.handleDocOrientationChangeDelay = function() {
        var html = document.documentElement;
        if (0 == Resize.initWidth) a4p.InternalLog.log("a4p.Resize", "INIT orientationChange : window.orientation=" + window.orientation + ", window.innerWidth=" + window.innerWidth + ", window.outerWidth=" + window.outerWidth + ", screen.width=" + screen.width + ", html.clientWidth=" + html.clientWidth + ", window.innerHeight=" + window.innerHeight + ", window.outerHeight=" + window.outerHeight + ", screen.height=" + screen.height + ", html.clientHeight=" + html.clientHeight), 
        Resize.initWidth = html.clientWidth, window.innerWidth > 0 && window.innerWidth < Resize.initWidth && (Resize.initWidth = window.innerWidth), 
        Resize.resizeWidth = Resize.initWidth, Resize.initHeight = html.clientHeight, window.innerHeight > 0 && window.innerHeight < Resize.initHeight && (Resize.initHeight = window.innerHeight), 
        Resize.resizeHeight = Resize.initHeight, Resize.initOrientation = window.orientation, 
        a4p.isUndefined(Resize.initOrientation) || 0 == Resize.initOrientation || 180 == Resize.initOrientation ? (Resize.initPortrait = Resize.initWidth < Resize.initHeight, 
        Resize.initPortrait0Orientation = Resize.initPortrait) : (Resize.initPortrait = Resize.initWidth < Resize.initHeight, 
        Resize.initPortrait0Orientation = !Resize.initPortrait), Resize.resizePortrait = Resize.initPortrait, 
        Resize.resizeOrientation = Resize.initPortrait ? "portrait" : "landscape", a4p.InternalLog.log("a4p.Resize", "INIT orientation : initOrientation=" + Resize.initOrientation + ", initWidth=" + Resize.initWidth + ", initHeight=" + Resize.initHeight + ", initPortrait=" + Resize.initPortrait + ", initPortrait0Orientation=" + Resize.initPortrait0Orientation); else {
            a4p.InternalLog.log("a4p.Resize", "orientationChange : window.orientation=" + window.orientation + ", window.innerWidth=" + window.innerWidth + ", window.outerWidth=" + window.outerWidth + ", screen.width=" + screen.width + ", html.clientWidth=" + html.clientWidth + ", window.innerHeight=" + window.innerHeight + ", window.outerHeight=" + window.outerHeight + ", screen.height=" + screen.height + ", html.clientHeight=" + html.clientHeight);
            var initWidth = html.clientWidth;
            window.innerWidth > 0 && window.innerWidth < initWidth && (initWidth = window.innerWidth);
            var initHeight = html.clientHeight;
            window.innerHeight > 0 && window.innerHeight < initHeight && (initHeight = window.innerHeight), 
            a4p.isUndefined(window.orientation) ? (Resize.resizeOrientation = initHeight > initWidth ? "portrait" : "landscape", 
            Resize.resizePortrait = initHeight > initWidth) : initHeight > initWidth && window.innerWidth < window.innerHeight && window.outerWidth < window.outerHeight && html.clientWidth < html.clientHeight ? (Resize.resizeOrientation = "portrait", 
            Resize.resizePortrait = !0) : initWidth >= initHeight && window.innerWidth >= window.innerHeight && window.outerWidth >= window.outerHeight && html.clientWidth >= html.clientHeight ? (Resize.resizeOrientation = "landscape", 
            Resize.resizePortrait = !1) : 0 == window.orientation || 180 == window.orientation ? (Resize.resizeOrientation = Resize.initPortrait0Orientation ? "portrait" : "landscape", 
            Resize.resizePortrait = Resize.initPortrait0Orientation) : (Resize.resizeOrientation = Resize.initPortrait0Orientation ? "landscape" : "portrait", 
            Resize.resizePortrait = !Resize.initPortrait0Orientation), Resize.resizePortrait ? (Resize.resizeWidth = initHeight > initWidth ? initWidth : initHeight, 
            Resize.resizeHeight = initHeight > initWidth ? initHeight : initWidth) : (Resize.resizeWidth = initWidth >= initHeight ? initWidth : initHeight, 
            Resize.resizeHeight = initWidth >= initHeight ? initHeight : initWidth);
        }
        document.body.style.width = Resize.resizeWidth + "px", document.body.style.height = Resize.resizeHeight + "px", 
        Resize.resizeWidth < 500 ? (Resize.resizeOneColumn = !0, document.body.setAttribute("resizeOneColumn", "1")) : (Resize.resizeOneColumn = !1, 
        document.body.setAttribute("resizeOneColumn", "0")), a4p.InternalLog.log("a4p.Resize", "orientationChange : resizeOrientation=" + Resize.resizeOrientation + ", resizePortrait=" + Resize.resizePortrait + ", resizeOneColumn=" + Resize.resizeOneColumn + ", resizeWidth=" + Resize.resizeWidth + ", resizeHeight=" + Resize.resizeHeight), 
        window.setTimeout(function() {
            var scrollTop = $(window).scrollTop();
            0 >= scrollTop && window.scrollTo(0, 0);
        });
        for (var idx = 0, nb = rootListener.length; nb > idx; idx++) {
            var resizer = rootListener[idx];
            resizer.triggerEvent(EVT_BEFORE_WINDOW, {
                id: resizer.id,
                name: resizer.name,
                resizeOrientation: Resize.resizeOrientation,
                resizePortrait: Resize.resizePortrait,
                resizeOneColumn: Resize.resizeOneColumn,
                resizeWidth: Resize.resizeWidth,
                resizeHeight: Resize.resizeHeight
            });
        }
        orientationChangeEvent = !0, Resize.refreshAll();
    }, Resize.declareDirectives = function(directiveModule) {
        angular.forEach([ EVT_BEFORE_WINDOW, EVT_WINDOW, EVT_CHANGED ], function(name) {
            var directiveName = "resize" + name.charAt(0).toUpperCase() + name.slice(1).toLowerCase(), eventName = name.charAt(0).toUpperCase() + name.slice(1);
            directiveModule.directive(directiveName, [ "$parse", "$rootScope", function($parse, $rootScope) {
                return function(scope, element, attr) {
                    var resize = element.data("resize");
                    if (a4p.isUndefined(resize)) {
                        resize = Resize.newResize($parse, $rootScope, scope, element, attr);
                        var initFn = $parse(resize.options.init);
                        initFn(scope, {
                            $resize: resize
                        });
                    }
                    var fn = $parse(attr[directiveName]);
                    resize["on" + eventName] = function(event) {
                        resize.options.callApply ? a4p.safeApply(scope, function() {
                            fn(scope, {
                                $event: event
                            });
                        }) : fn(scope, {
                            $event: event
                        });
                    };
                };
            } ]);
        }), directiveModule.directive("resizeOpts", [ "$parse", "$rootScope", function($parse, $rootScope) {
            return function(scope, element, attr) {
                var resize = element.data("resize");
                if (a4p.isUndefined(resize)) {
                    resize = Resize.newResize($parse, $rootScope, scope, element, attr);
                    var initFn = $parse(resize.options.init);
                    initFn(scope, {
                        $resize: resize
                    });
                }
            };
        } ]), directiveModule.directive("resizeVars", [ "$parse", "$rootScope", function($parse, $rootScope) {
            return function(scope, element, attr) {
                var resize = element.data("resize");
                if (a4p.isUndefined(resize)) {
                    resize = Resize.newResize($parse, $rootScope, scope, element, attr);
                    var initFn = $parse(resize.options.init);
                    initFn(scope, {
                        $resize: resize
                    });
                }
                var vars = $parse(attr.resizeVars)(scope, {});
                for (var varName in vars) if (vars.hasOwnProperty(varName)) {
                    var fn = $parse(vars[varName]);
                    resize.addScopeVar(varName, fn);
                }
            };
        } ]), angular.forEach([ "top", "left", "width", "height", "lineHeight", "minHeight", "minWidth" ], function(name) {
            var directiveName = "resizecss" + name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
            directiveModule.directive(directiveName, [ "$parse", "$rootScope", function($parse, $rootScope) {
                return function(scope, element, attr) {
                    var resize = element.data("resize");
                    if (a4p.isUndefined(resize)) {
                        resize = Resize.newResize($parse, $rootScope, scope, element, attr);
                        var initFn = $parse(resize.options.init);
                        initFn(scope, {
                            $resize: resize
                        });
                    }
                    var fn = $parse(attr[directiveName]);
                    resize.addCssKey(name, fn);
                };
            } ]);
        });
    }, Resize.newResize = function($parse, $rootScope, scope, element, attr) {
        var resize, opts = {};
        if (a4p.isDefined(attr.resizeOpts) && (opts = $parse(attr.resizeOpts)(scope, {})), 
        resize = new a4p.Resize($rootScope, scope, element, opts), element.data("resize", resize), 
        scope.getResizeOrientation = function() {
            return Resize.resizeOrientation;
        }, scope.getResizePortrait = function() {
            return Resize.resizePortrait;
        }, scope.getResizeOneColumn = function() {
            return Resize.resizeOneColumn;
        }, scope.getResizeWidth = function() {
            return Resize.resizeWidth;
        }, scope.getResizeHeight = function() {
            return Resize.resizeHeight;
        }, scope.getResizeId = function() {
            return resize.id;
        }, scope.getResizeName = function() {
            return resize.name;
        }, scope.getPathValue = function(path, key) {
            return resize.tmpNodeDependent = !0, resize.getPathValue(path, key);
        }, scope.getResizePathValue = function(name, path, key) {
            resize.tmpNodeDependent = !0;
            var resizer = listenersIndex[name];
            return a4p.isDefined(resizer) ? (Resize.isReordering && resize.addDependentNode(resizer.DOMelement), 
            resizer.getPathValue(path, key)) : 0;
        }, scope.resizeRefresh = function() {
            resize.resize();
        }, a4p.isDefined(resize.options.watchRefresh)) if ("string" == typeof resize.options.watchRefresh) scope.$watch(resize.options.watchRefresh, function(newValue, oldValue) {
            newValue !== oldValue && resize.resize();
        }); else for (var i = 0, nb = resize.options.watchRefresh.length; nb > i; i++) scope.$watch(resize.options.watchRefresh[i], function(newValue, oldValue) {
            newValue !== oldValue && resize.resize();
        });
        return Resize.refreshAll(), resize;
    }, Resize.getResize = function(name) {
        return a4p.isDefined(listenersIndex[name]) ? listenersIndex[name] : null;
    }, Resize;
}(navigator, window, document);

var a4p;

a4p || (a4p = {}), a4p.Scroll = function(navigator, window, document) {
    function scrollbarH(self) {
        if (!self.hScrollbar) return self.hScrollbarWrapper && (a4p.BrowserCapabilities.hasTransform && (self.hScrollbarIndicator.style[a4p.BrowserCapabilities.transform] = ""), 
        self.DOMelement.removeChild(self.hScrollbarWrapper), self.hScrollbarWrapper = null, 
        self.hScrollbarIndicator = null), void 0;
        if (!self.hScrollbarWrapper) {
            var bar = document.createElement("div");
            self.options.scrollbarClass ? bar.className = self.options.scrollbarClass + "H" : (bar.style.position = "absolute", 
            bar.style.zIndex = "100", bar.style.height = "7px", bar.style.bottom = "1px", bar.style.left = "2px", 
            bar.style.right = (self.vScrollbar ? "7" : "2") + "px"), bar.style.overflow = "hidden", 
            bar.style.opacity = self.options.hideScrollbar ? "0" : "1", bar.style.pointerEvents = "none", 
            bar.style[a4p.BrowserCapabilities.transitionProperty] = "opacity", bar.style[a4p.BrowserCapabilities.transitionDuration] = self.options.fadeScrollbar ? "350ms" : "0ms", 
            self.DOMelement.appendChild(bar), self.hScrollbarWrapper = bar, bar = document.createElement("div"), 
            self.options.scrollbarClass || (bar.style.position = "absolute", bar.style.zIndex = "100", 
            bar.style.height = "100%", bar.style.backgroundColor = "rgba(0,0,0,0.5)", bar.style.borderWidth = "1px", 
            bar.style.borderStyle = "solid", bar.style.borderColor = "rgba(255,255,255,0.9)", 
            bar.style[a4p.BrowserCapabilities.vendor + "BackgroundClip"] = "padding-box", bar.style.boxSizing = "border-box", 
            bar.style[a4p.BrowserCapabilities.vendor + "BoxSizing"] = "border-box", bar.style.borderRadius = "3px", 
            bar.style[a4p.BrowserCapabilities.vendor + "BorderRadius"] = "3px"), bar.style.pointerEvents = "none", 
            bar.style[a4p.BrowserCapabilities.transitionProperty] = a4p.BrowserCapabilities.cssVendor + "transform", 
            bar.style[a4p.BrowserCapabilities.transitionTimingFunction] = "cubic-bezier(0.33,0.66,0.66,1)", 
            bar.style[a4p.BrowserCapabilities.transitionDuration] = "0ms", bar.style[a4p.BrowserCapabilities.transform] = "translate(0,0)" + a4p.BrowserCapabilities.translateZ, 
            self.options.useTransition && (bar.style[a4p.BrowserCapabilities.transitionTimingFunction] = "cubic-bezier(0.33,0.66,0.66,1)"), 
            self.hScrollbarWrapper.appendChild(bar), self.hScrollbarIndicator = bar;
        }
        var margins = 2 + (self.vScrollbar ? 7 : 2);
        self.hScrollbarWrapper.style.width = self.wrapperW - margins + "px", self.hScrollbarIndicatorSize = Math.max(Math.round((self.wrapperW - margins) * self.wrapperW / self.scrollerW), 8), 
        self.hScrollbarIndicator.style.width = self.hScrollbarIndicatorSize + "px", self.hScrollbarMaxScroll = self.wrapperW - margins - self.hScrollbarIndicatorSize, 
        self.hScrollbarProp = self.hScrollbarMaxScroll / self.maxScrollX, scrollbarPosH(self, !0);
    }
    function scrollbarV(self) {
        if (!self.vScrollbar) return self.vScrollbarWrapper && (a4p.BrowserCapabilities.hasTransform && (self.vScrollbarIndicator.style[a4p.BrowserCapabilities.transform] = ""), 
        self.DOMelement.removeChild(self.vScrollbarWrapper), self.vScrollbarWrapper = null, 
        self.vScrollbarIndicator = null), void 0;
        if (!self.vScrollbarWrapper) {
            var bar = document.createElement("div");
            self.options.scrollbarClass ? bar.className = self.options.scrollbarClass + "V" : (bar.style.position = "absolute", 
            bar.style.zIndex = "100", bar.style.width = "7px", bar.style.right = "1px", bar.style.top = "2px", 
            bar.style.bottom = (self.hScrollbar ? "7" : "2") + "px"), bar.style.overflow = "hidden", 
            bar.style.opacity = self.options.hideScrollbar ? "0" : "1", bar.style.pointerEvents = "none", 
            bar.style[a4p.BrowserCapabilities.transitionProperty] = "opacity", bar.style[a4p.BrowserCapabilities.transitionDuration] = self.options.fadeScrollbar ? "350ms" : "0ms", 
            self.DOMelement.appendChild(bar), self.vScrollbarWrapper = bar, bar = document.createElement("div"), 
            self.options.scrollbarClass || (bar.style.position = "absolute", bar.style.zIndex = "100", 
            bar.style.width = "100%", bar.style.backgroundColor = "rgba(0,0,0,0.5)", bar.style.borderWidth = "1px", 
            bar.style.borderStyle = "solid", bar.style.borderColor = "rgba(255,255,255,0.9)", 
            bar.style[a4p.BrowserCapabilities.vendor + "BackgroundClip"] = "padding-box", bar.style.boxSizing = "border-box", 
            bar.style[a4p.BrowserCapabilities.vendor + "BoxSizing"] = "border-box", bar.style.borderRadius = "3px", 
            bar.style[a4p.BrowserCapabilities.vendor + "BorderRadius"] = "3px"), bar.style.pointerEvents = "none", 
            bar.style[a4p.BrowserCapabilities.transitionProperty] = a4p.BrowserCapabilities.cssVendor + "transform", 
            bar.style[a4p.BrowserCapabilities.transitionTimingFunction] = "cubic-bezier(0.33,0.66,0.66,1)", 
            bar.style[a4p.BrowserCapabilities.transitionDuration] = "0ms", bar.style[a4p.BrowserCapabilities.transform] = "translate(0,0)" + a4p.BrowserCapabilities.translateZ, 
            self.options.useTransition && (bar.style[a4p.BrowserCapabilities.transitionTimingFunction] = "cubic-bezier(0.33,0.66,0.66,1)"), 
            self.vScrollbarWrapper.appendChild(bar), self.vScrollbarIndicator = bar;
        }
        var margins = 2 + (self.hScrollbar ? 7 : 2);
        self.vScrollbarWrapper.style.height = self.wrapperH - margins + "px", self.vScrollbarIndicatorSize = Math.max(Math.round((self.wrapperH - margins) * self.wrapperH / self.scrollerH), 8), 
        self.vScrollbarIndicator.style.height = self.vScrollbarIndicatorSize + "px", self.vScrollbarMaxScroll = self.wrapperH - margins - self.vScrollbarIndicatorSize, 
        self.vScrollbarProp = self.vScrollbarMaxScroll / self.maxScrollY, scrollbarPosV(self, !0);
    }
    function pos(self, x, y, reset) {
        if (!self.zoomed) {
            var deltaX = self.hScroll ? x - self.x : 0, deltaY = self.vScroll ? y - self.y : 0;
            !reset && self.options.onBeforeScrollMove && (self.options.onBeforeScrollMove.call(self, deltaX, deltaY), 
            x = self.x + deltaX, y = self.y + deltaY), x = self.hScroll ? x : 0, y = self.vScroll ? y : 0, 
            self.options.useTransform ? self.scroller.style[a4p.BrowserCapabilities.transform] = "translate(" + x + "px," + y + "px) scale(" + self.scale + ")" + a4p.BrowserCapabilities.translateZ : (x = Math.round(x), 
            y = Math.round(y), self.scroller.style.left = x + "px", self.scroller.style.top = y + "px"), 
            self.x = x, self.y = y, scrollbarPosH(self), scrollbarPosV(self);
        }
    }
    function scrollbarPosH(self, hidden) {
        var size, pos = self.x;
        self.hScrollbar && (pos = self.hScrollbarProp * pos, 0 > pos ? (self.options.fixedScrollbar || (size = self.hScrollbarIndicatorSize + Math.round(3 * pos), 
        8 > size && (size = 8), self.hScrollbarIndicator.style.width = size + "px"), pos = 0) : pos > self.hScrollbarMaxScroll && (self.options.fixedScrollbar ? pos = self.hScrollbarMaxScroll : (size = self.hScrollbarIndicatorSize - Math.round(3 * (pos - self.hScrollbarMaxScroll)), 
        8 > size && (size = 8), self.hScrollbarIndicator.style.width = size + "px", pos = self.hScrollbarMaxScroll + (self.hScrollbarIndicatorSize - size))), 
        self.hScrollbarWrapper.style[a4p.BrowserCapabilities.transitionDelay] = "0", self.hScrollbarWrapper.style.opacity = hidden && self.options.hideScrollbar ? "0" : "1", 
        self.hScrollbarIndicator.style[a4p.BrowserCapabilities.transform] = "translate(" + pos + "px,0)" + a4p.BrowserCapabilities.translateZ);
    }
    function scrollbarPosV(self, hidden) {
        var size, pos = self.y;
        self.vScrollbar && (pos = self.vScrollbarProp * pos, 0 > pos ? (self.options.fixedScrollbar || (size = self.vScrollbarIndicatorSize + Math.round(3 * pos), 
        8 > size && (size = 8), self.vScrollbarIndicator.style.height = size + "px"), pos = 0) : pos > self.vScrollbarMaxScroll && (self.options.fixedScrollbar ? pos = self.vScrollbarMaxScroll : (size = self.vScrollbarIndicatorSize - Math.round(3 * (pos - self.vScrollbarMaxScroll)), 
        8 > size && (size = 8), self.vScrollbarIndicator.style.height = size + "px", pos = self.vScrollbarMaxScroll + (self.vScrollbarIndicatorSize - size))), 
        self.vScrollbarWrapper.style[a4p.BrowserCapabilities.transitionDelay] = "0", self.vScrollbarWrapper.style.opacity = hidden && self.options.hideScrollbar ? "0" : "1", 
        self.vScrollbarIndicator.style[a4p.BrowserCapabilities.transform] = "translate(0," + pos + "px)" + a4p.BrowserCapabilities.translateZ);
    }
    function resetPos(self, time) {
        var resetX = self.x >= 0 ? 0 : self.x < self.maxScrollX ? self.maxScrollX : self.x, resetY = self.y >= -self.options.topOffset || self.maxScrollY > 0 ? -self.options.topOffset : self.y < self.maxScrollY ? self.maxScrollY : self.y;
        return resetX == self.x && resetY == self.y ? (self.moved && (self.moved = !1, self.options.onAfterScrollEnd && self.options.onAfterScrollEnd.call(self)), 
        self.hScrollbar && self.options.hideScrollbar && ("webkit" == a4p.BrowserCapabilities.vendor && (self.hScrollbarWrapper.style[a4p.BrowserCapabilities.transitionDelay] = "300ms"), 
        self.hScrollbarWrapper.style.opacity = "0"), self.vScrollbar && self.options.hideScrollbar && ("webkit" == a4p.BrowserCapabilities.vendor && (self.vScrollbarWrapper.style[a4p.BrowserCapabilities.transitionDelay] = "300ms"), 
        self.vScrollbarWrapper.style.opacity = "0"), void 0) : (self.scrollTo(resetX, resetY, time || 0, !1, !0), 
        void 0);
    }
    function transitionEnd(self, e) {
        e.target == self.scroller && (self.bindTransitionEnd && (self.bindTransitionEnd.destroy(), 
        self.bindTransitionEnd = null), startAni(self));
    }
    function startAni(self) {
        if (!self.animating) {
            if (!self.steps.length) return resetPos(self, 400), void 0;
            var startTime = new Date().getTime(), step = self.steps.shift();
            if (0 == step.deltaX && 0 == step.deltaY && (step.time = 0), self.animating = !0, 
            self.moved = !0, self.options.useTransition) if (transitionTime(self, step.time), 
            pos(self, self.x + step.deltaX, self.y + step.deltaY, step.reset), self.animating = !1, 
            step.time) {
                var handler = function(evt) {
                    transitionEnd(self, evt);
                };
                self.scroller.addEventListener(a4p.BrowserCapabilities.TRNEND_EVENT, handler, !1), 
                self.bindTransitionEnd = {
                    destroy: function() {
                        self.scroller.removeEventListener(a4p.BrowserCapabilities.TRNEND_EVENT, handler, !1);
                    }
                };
            } else resetPos(self, 0); else {
                var animate = function() {
                    var now = new Date().getTime();
                    if (now >= startTime + step.time || step.deltaX < 5 && step.deltaX > -5 && step.deltaY < 5 && step.deltaY > -5) pos(self, self.x + step.deltaX, self.y + step.deltaY, step.reset), 
                    self.animating = !1, startAni(self); else {
                        var ratio = (now - startTime) / step.time, easeOut = Math.sqrt(ratio), deltaX = Math.floor(step.deltaX * easeOut), deltaY = Math.floor(step.deltaY * easeOut);
                        step.deltaX -= deltaX, step.deltaY -= deltaY, pos(self, self.x + deltaX, self.y + deltaY, step.reset), 
                        self.animating && (self.aniTime = a4p.BrowserCapabilities.nextFrame(animate));
                    }
                };
                animate();
            }
        }
    }
    function stopAni(self) {
        self.options.useTransition ? self.bindTransitionEnd && (self.bindTransitionEnd.destroy(), 
        self.bindTransitionEnd = null) : self.aniTime && (a4p.BrowserCapabilities.cancelFrame(self.aniTime), 
        self.aniTime = null);
    }
    function stopMomentum(self) {
        if (self.options.momentum > 0) {
            var x, y;
            if (self.options.useTransform) {
                var matrix = getComputedStyle(self.scroller, null)[a4p.BrowserCapabilities.transform].replace(/[^0-9\-.,]/g, "").split(",");
                x = +(matrix[12] || matrix[4] || 0), y = +(matrix[13] || matrix[5] || 0);
            } else x = +getComputedStyle(self.scroller, null).left.replace(/[^0-9-]/g, "") || 0, 
            y = +getComputedStyle(self.scroller, null).top.replace(/[^0-9-]/g, "") || 0;
            if (x != self.x || y != self.y) {
                var deltaX = x - self.x, deltaY = y - self.y;
                stopAni(self), self.steps = [], pos(self, self.x + deltaX, self.y + deltaY), self.options.onAfterScrollEnd && self.options.onAfterScrollEnd.call(self);
            }
        }
    }
    function transitionTime(self, time) {
        time += "ms", self.scroller.style[a4p.BrowserCapabilities.transitionDuration] = time, 
        self.hScrollbar && (self.hScrollbarIndicator.style[a4p.BrowserCapabilities.transitionDuration] = time), 
        self.vScrollbar && (self.vScrollbarIndicator.style[a4p.BrowserCapabilities.transitionDuration] = time);
    }
    function offset(self, el) {
        for (var left = el.offsetLeft, top = el.offsetTop; el = el.offsetParent; ) left += el.offsetLeft, 
        top += el.offsetTop;
        return el != self.DOMelement && (left *= self.scale, top *= self.scale), {
            left: left,
            top: top
        };
    }
    function momentumPos(self, deltaX, deltaY, time, momentum) {
        var deceleration = .006, speedX = Math.abs(deltaX) / time, speedY = Math.abs(deltaY) / time;
        if (0 != deltaX) {
            var newDistX = momentum * speedX;
            if (!self.options.virtualLoop) {
                var xMaxDistUpper = -self.x, xMaxDistLower = self.x - self.maxScrollX;
                deltaX > 0 && newDistX > xMaxDistUpper ? newDistX = self.options.bounce ? xMaxDistUpper + (newDistX - xMaxDistUpper) * (newDistX - xMaxDistUpper) / self.wrapperW : xMaxDistUpper : 0 > deltaX && newDistX > xMaxDistLower && (newDistX = self.options.bounce ? xMaxDistLower + (newDistX - xMaxDistLower) * (newDistX - xMaxDistLower) / self.wrapperW : xMaxDistLower);
            }
            deltaX = newDistX * (0 > deltaX ? -1 : 1);
        }
        if (0 != deltaY) {
            var newDistY = momentum * speedY;
            if (!self.options.virtualLoop) {
                var yMaxDistUpper = -self.y, yMaxDistLower = self.y - self.maxScrollY;
                self.options.bounce ? self.wrapperH : 0, deltaY > 0 && newDistY > yMaxDistUpper ? newDistY = self.options.bounce ? yMaxDistUpper + (newDistY - yMaxDistUpper) * (newDistY - yMaxDistUpper) / self.wrapperH : yMaxDistUpper : 0 > deltaY && newDistY > yMaxDistLower && (newDistY = self.options.bounce ? yMaxDistLower + (newDistY - yMaxDistLower) * (newDistY - yMaxDistLower) / self.wrapperH : yMaxDistLower);
            }
            deltaY = newDistY * (0 > deltaY ? -1 : 1);
        }
        return time = Math.round(Math.max(speedX, speedY) * momentum / deceleration), {
            deltaX: deltaX,
            deltaY: deltaY,
            time: time
        };
    }
    function snapPos(self, x, y) {
        var i, l, page, time, sizeX, sizeY;
        for (page = self.pagesX.length - 1, i = 0, l = self.pagesX.length; l > i; i++) if (x >= self.pagesX[i]) {
            page = i;
            break;
        }
        for (page == self.currPageX && page > 0 && self.dirX < 0 && page--, x = self.pagesX[page], 
        sizeX = Math.abs(x - self.pagesX[self.currPageX]), sizeX = sizeX ? 500 * (Math.abs(self.x - x) / sizeX) : 0, 
        self.currPageX = page, page = self.pagesY.length - 1, i = 0; page > i; i++) if (y >= self.pagesY[i]) {
            page = i;
            break;
        }
        return page == self.currPageY && page > 0 && self.dirY < 0 && page--, y = self.pagesY[page], 
        sizeY = Math.abs(y - self.pagesY[self.currPageY]), sizeY = sizeY ? 500 * (Math.abs(self.y - y) / sizeY) : 0, 
        self.currPageY = page, time = Math.round(Math.max(sizeX, sizeY)) || 200, {
            x: x,
            y: y,
            time: time
        };
    }
    function Scroll(element, options) {
        this.element = element, this.DOMelement = "object" == typeof element ? element[0] : document.getElementById(element), 
        this.scroller = this.DOMelement.children[0], this.options = {
            name: "",
            hScroll: !0,
            vScroll: !0,
            x: 0,
            y: 0,
            bounce: !0,
            bounceLock: !1,
            momentum: 100,
            virtualLoop: !1,
            useTransform: !0,
            useTransition: !1,
            topOffset: 0,
            bottomOffset: 0,
            hScrollbar: !0,
            vScrollbar: !0,
            fixedScrollbar: a4p.BrowserCapabilities.isAndroid,
            hideScrollbar: a4p.BrowserCapabilities.isIDevice,
            fadeScrollbar: a4p.BrowserCapabilities.isIDevice && a4p.BrowserCapabilities.has3d,
            scrollbarClass: "",
            zoom: !1,
            zoomMin: 1,
            zoomMax: 4,
            wheelAction: "scroll",
            pageSelector: null,
            snap: !1,
            snapThreshold: 1,
            onRefresh: null,
            onDestroy: null,
            onBeforeScrollMove: null,
            onAfterScrollEnd: null,
            onZoomStart: null,
            onZoom: null,
            onZoomEnd: null
        };
        for (var i in options) options.hasOwnProperty(i) && (this.options[i] = options[i]);
        this.options.useTransform = a4p.BrowserCapabilities.hasTransform && this.options.useTransform, 
        this.options.hScrollbar = this.options.hScroll && this.options.hScrollbar, this.options.vScrollbar = this.options.vScroll && this.options.vScrollbar, 
        "zoom" == this.options.wheelAction && (this.options.zoom = !0), this.options.zoom && !this.options.useTransform && a4p.ErrorLog.log("a4p.sense", "Zoom option impossible because Browser cannot use transform"), 
        this.options.zoom = this.options.useTransform && this.options.zoom, this.options.useTransition = a4p.BrowserCapabilities.hasTransitionEnd && this.options.useTransition, 
        this.options.useTransition && (this.options.fixedScrollbar = !0), this.DOMelement.style.overflow = "hidden", 
        this.DOMelement.style.position = "relative", this.scroller.style[a4p.BrowserCapabilities.transitionProperty] = this.options.useTransform ? a4p.BrowserCapabilities.cssVendor + "transform" : "top left", 
        this.scroller.style[a4p.BrowserCapabilities.transitionDuration] = "0", this.scroller.style[a4p.BrowserCapabilities.transformOrigin] = "0 0", 
        this.options.useTransition && (this.scroller.style[a4p.BrowserCapabilities.transitionTimingFunction] = "cubic-bezier(0.33,0.66,0.66,1)"), 
        this.options.useTransform ? this.scroller.style[a4p.BrowserCapabilities.transform] = "translate(" + this.x + "px," + this.y + "px)" + a4p.BrowserCapabilities.translateZ : (this.scroller.style.position = "absolute", 
        this.scroller.style.top = this.y + "px", this.scroller.style.left = this.x + "px"), 
        this.x = 0, this.y = 0, this.enabled = !0, this.steps = [], this.scale = 1, this.currPageX = 0, 
        this.currPageY = 0, this.pagesX = [], this.pagesY = [], this.aniTime = null, this.bindTransitionEnd = null, 
        this.wheelZoomCount = 0, this.scrollCount = 0, this.scrollHistory = [], this.hScroll = !1, 
        this.vScroll = !1, this.hScrollbar = !1, this.vScrollbar = !1, this.refresh(), this.scrollTo(this.options.x, this.options.y, 0, !1, !0);
    }
    function zoomStart(self, pageX, pageY) {
        self.zoomed = !1, self.originX = Math.abs(pageX - self.wrapperOffsetLeft) - self.x, 
        self.originY = Math.abs(pageY - self.wrapperOffsetTop) - self.y, self.options.onZoomStart && self.options.onZoomStart.call(self, {
            pageX: pageX,
            pageY: pageY
        });
    }
    function scrollStart(self) {
        (self.options.useTransition || self.options.zoom) && transitionTime(self, 0), self.moved = !1, 
        self.animating = !1, self.distX = 0, self.distY = 0, self.absDistX = 0, self.absDistY = 0, 
        self.dirX = 0, self.dirY = 0, self.snapStartX = self.x, self.snapStartY = self.y, 
        stopMomentum(self);
    }
    function zoomMove(self, scale) {
        self.zoomed = !0, scale < self.options.zoomMin ? scale = .5 * self.options.zoomMin * Math.pow(2, scale / self.options.zoomMin) : scale > self.options.zoomMax && (scale = 2 * self.options.zoomMax * Math.pow(.5, self.options.zoomMax / scale)), 
        self.lastScale = scale / self.scale;
        var newX = self.originX - self.originX * self.lastScale + self.x, newY = self.originY - self.originY * self.lastScale + self.y;
        self.scroller.style[a4p.BrowserCapabilities.transform] = "translate(" + newX + "px," + newY + "px) scale(" + scale + ")" + a4p.BrowserCapabilities.translateZ, 
        self.options.onZoom && self.options.onZoom.call(self, {
            scale: scale
        });
    }
    function scrollMove(self, deltaX, deltaY) {
        var newX = self.x + deltaX, newY = self.y + deltaY;
        self.options.virtualLoop || ((newX > 0 || newX < self.maxScrollX) && (newX = self.options.bounce ? self.x + deltaX / 2 : newX >= 0 || self.maxScrollX >= 0 ? 0 : self.maxScrollX), 
        (newY > -self.options.topOffset || newY < self.maxScrollY) && (newY = self.options.bounce ? self.y + deltaY / 2 : newY >= -self.options.topOffset || self.maxScrollY >= 0 ? -self.options.topOffset : self.maxScrollY)), 
        self.distX += deltaX, self.distY += deltaY, self.absDistX = Math.abs(self.distX), 
        self.absDistY = Math.abs(self.distY), self.moved = !0, pos(self, newX, newY), self.dirX = deltaX > 0 ? -1 : 0 > deltaX ? 1 : 0, 
        self.dirY = deltaY > 0 ? -1 : 0 > deltaY ? 1 : 0;
    }
    function zoomEnd(self, scale) {
        scale = Math.max(self.options.zoomMin, scale), scale = Math.min(self.options.zoomMax, scale), 
        self.lastScale = scale / self.scale, self.setScale(scale), self.x = self.originX - self.originX * self.lastScale + self.x, 
        self.y = self.originY - self.originY * self.lastScale + self.y, self.scroller.style[a4p.BrowserCapabilities.transitionDuration] = "200ms", 
        self.scroller.style[a4p.BrowserCapabilities.transform] = "translate(" + self.x + "px," + self.y + "px) scale(" + self.scale + ")" + a4p.BrowserCapabilities.translateZ, 
        self.zoomed = !1, self.refresh(), self.options.onZoomEnd && self.options.onZoomEnd.call(self, {
            scale: scale
        });
    }
    function scrollEnd(self, deltaX, deltaY, duration) {
        if (self.options.momentum > 0) {
            var momentum = momentumPos(self, deltaX, deltaY, duration, self.options.momentum);
            deltaX = momentum.deltaX, deltaY = momentum.deltaY, duration = Math.max(momentum.time, 10);
            var newPosX = self.x + deltaX, newPosY = self.y + deltaY;
            if ((self.x > 0 && newPosX > 0 || self.x < self.maxScrollX && newPosX < self.maxScrollX) && (deltaX = 0), 
            (self.y > -self.options.topOffset && newPosY > -self.options.topOffset || self.y < self.maxScrollY && newPosY < self.maxScrollY) && (deltaY = 0), 
            deltaX || deltaY) {
                if (self.options.snap) {
                    if (Math.abs(newPosX - self.snapStartX) < self.options.snapThreshold && Math.abs(newPosY - self.snapStartY) < self.options.snapThreshold) return self.scrollTo(self.snapStartX, self.snapStartY, 200), 
                    void 0;
                    var snap = snapPos(self, newPosX, newPosY);
                    newPosX = snap.x, newPosY = snap.y, duration = Math.max(snap.time, duration);
                } else self.options.pageSelector && snapPos(self, newPosX, newPosY);
                return newPosX = Math.round(newPosX), newPosY = Math.round(newPosY), self.scrollTo(newPosX, newPosY, duration), 
                void 0;
            }
        } else {
            var newPos2X = self.x + deltaX, newPos2Y = self.y + deltaY;
            if (self.options.snap) {
                if (Math.abs(newPos2X - self.snapStartX) < self.options.snapThreshold && Math.abs(newPos2Y - self.snapStartY) < self.options.snapThreshold) return self.scrollTo(self.snapStartX, self.snapStartY, 200), 
                void 0;
                var snap2 = snapPos(self, newPos2X, newPos2Y);
                return self.scrollTo(snap2.x, snap2.y, snap2.time), void 0;
            }
            self.options.pageSelector && snapPos(self, newPos2X, newPos2Y);
        }
        resetPos(self, 200);
    }
    return Scroll.prototype.destroy = function() {
        this.scroller.style[a4p.BrowserCapabilities.transform] = "", this.hScrollbar = !1, 
        this.vScrollbar = !1, scrollbarH(this), scrollbarV(this), this.bindTransitionEnd && (this.bindTransitionEnd.destroy(), 
        this.bindTransitionEnd = null), this.options.onDestroy && this.options.onDestroy.call(this);
    }, Scroll.prototype.checkDOMChanges = function() {
        return this.isReady() && (this.wrapperW != (this.DOMelement.offsetWidth || 1) || this.wrapperH != (this.DOMelement.offsetHeight || 1) || this.scrollerW != Math.round(this.scroller.offsetWidth * this.scale) || this.scrollerH != Math.round((this.scroller.offsetHeight - this.options.topOffset - this.options.bottomOffset) * this.scale));
    }, Scroll.prototype.setScale = function(scale) {
        this.scale = scale, this.scale < this.options.zoomMin && (this.scale = this.options.zoomMin);
    }, Scroll.prototype.refresh = function() {
        var wrapperOffset, i, l, els;
        if (this.wrapperW = this.DOMelement.offsetWidth || 1, this.wrapperH = this.DOMelement.offsetHeight || 1, 
        this.scrollerW = Math.round(this.scroller.offsetWidth * this.scale), this.scrollerH = Math.round((this.scroller.offsetHeight - this.options.topOffset - this.options.bottomOffset) * this.scale), 
        this.maxScrollX = this.wrapperW - this.scrollerW, this.maxScrollX > 0 && (this.maxScrollX = 0), 
        this.maxScrollY = this.wrapperH - this.scrollerH - this.options.topOffset - this.options.bottomOffset, 
        this.maxScrollY > 0 && (this.maxScrollY = 0), this.dirX = 0, this.dirY = 0, this.options.onRefresh && this.options.onRefresh.call(this), 
        this.hScroll = this.options.hScroll && this.maxScrollX < 0, this.vScroll = this.options.vScroll && (!this.options.bounceLock && !this.hScroll || this.scrollerH > this.wrapperH), 
        this.hScrollbar = this.hScroll && this.options.hScrollbar, this.vScrollbar = this.vScroll && this.options.vScrollbar && this.scrollerH > this.wrapperH, 
        wrapperOffset = offset(this, this.DOMelement), this.wrapperOffsetLeft = wrapperOffset.left, 
        this.wrapperOffsetTop = wrapperOffset.top, this.options.pageSelector) for (this.pagesX = [], 
        this.pagesY = [], els = this.scroller.querySelectorAll(this.options.pageSelector), 
        i = 0, l = els.length; l > i; i++) {
            var posLT = offset(this, els[i]);
            posLT.left -= this.wrapperOffsetLeft, posLT.top -= this.wrapperOffsetTop, this.pagesX[i] = -posLT.left < this.maxScrollX ? this.maxScrollX : -posLT.left * this.scale, 
            this.pagesY[i] = -posLT.top < this.maxScrollY ? this.maxScrollY : -posLT.top * this.scale;
        } else if (this.options.snap) {
            var pos = 0, page = 0;
            for (this.pagesX = []; pos >= this.maxScrollX; ) this.pagesX[page] = pos, pos -= this.wrapperW, 
            page++;
            for (this.maxScrollX % this.wrapperW && (this.pagesX[this.pagesX.length] = this.maxScrollX - this.pagesX[this.pagesX.length - 1] + this.pagesX[this.pagesX.length - 1]), 
            pos = 0, page = 0, this.pagesY = []; pos >= this.maxScrollY; ) this.pagesY[page] = pos, 
            pos -= this.wrapperH, page++;
            this.maxScrollY % this.wrapperH && (this.pagesY[this.pagesY.length] = this.maxScrollY - this.pagesY[this.pagesY.length - 1] + this.pagesY[this.pagesY.length - 1]);
        }
        scrollbarH(this), scrollbarV(this), this.zoomed || (this.scroller.style[a4p.BrowserCapabilities.transitionDuration] = "0", 
        resetPos(this, 400));
    }, Scroll.prototype.scrollTo = function(x, y, time, relative, reset) {
        this.stop(), relative && (x = this.x - x, y = this.y - y);
        var deltaX = x - this.x, deltaY = y - this.y;
        (deltaX || deltaY) && (this.steps.push({
            deltaX: deltaX,
            deltaY: deltaY,
            time: time || 0,
            reset: reset
        }), startAni(this));
    }, Scroll.prototype.scrollToElement = function(el, time) {
        var pos;
        el = el.nodeType ? el : this.scroller.querySelector(el), el && (pos = offset(this, el), 
        pos.left -= this.wrapperOffsetLeft, pos.top -= this.wrapperOffsetTop, pos.left = -pos.left > 0 ? 0 : -pos.left < this.maxScrollX ? this.maxScrollX : pos.left, 
        pos.top = -pos.top > -this.options.topOffset ? -this.options.topOffset : -pos.top < this.maxScrollY ? this.maxScrollY : pos.top, 
        time = a4p.isUndefined(time) ? Math.max(2 * Math.abs(pos.left), 2 * Math.abs(pos.top)) : time, 
        this.scrollTo(-pos.left, -pos.top, time));
    }, Scroll.prototype.scrollToPage = function(pageX, pageY, time) {
        var x, y;
        time = a4p.isUndefined(time) ? 400 : time, this.options.pageSelector ? (pageX = "next" == pageX ? this.currPageX + 1 : "prev" == pageX ? this.currPageX - 1 : pageX, 
        pageY = "next" == pageY ? this.currPageY + 1 : "prev" == pageY ? this.currPageY - 1 : pageY, 
        pageX = 0 > pageX ? 0 : pageX > this.pagesX.length - 1 ? this.pagesX.length - 1 : pageX, 
        pageY = 0 > pageY ? 0 : pageY > this.pagesY.length - 1 ? this.pagesY.length - 1 : pageY, 
        this.currPageX = pageX, this.currPageY = pageY, x = this.pagesX[pageX], y = this.pagesY[pageY]) : (x = -this.wrapperW * pageX, 
        y = -this.wrapperH * pageY, x < this.maxScrollX && (x = this.maxScrollX), y < this.maxScrollY && (y = this.maxScrollY)), 
        this.scrollTo(x, y, time);
    }, Scroll.prototype.hasAttainedSideLeft = function() {
        return !this.hScroll || this.x >= 0;
    }, Scroll.prototype.hasAttainedSideRight = function() {
        return !this.hScroll || this.x <= this.maxScrollX;
    }, Scroll.prototype.hasAttainedSideTop = function() {
        return !this.vScroll || this.y >= -this.options.topOffset;
    }, Scroll.prototype.hasAttainedSideBottom = function() {
        return !this.vScroll || this.y <= this.maxScrollY;
    }, Scroll.prototype.disable = function() {
        this.stop(), resetPos(this, 0), this.enabled = !1;
    }, Scroll.prototype.enable = function() {
        this.enabled = !0;
    }, Scroll.prototype.stop = function() {
        stopMomentum(this), stopAni(this), this.steps = [], this.moved = !1, this.animating = !1;
    }, Scroll.prototype.zoom = function(x, y, scale, time) {
        var relScale = scale / this.scale;
        this.options.useTransform && (this.zoomed = !0, time = a4p.isUndefined(time) ? 200 : time, 
        x = x - this.wrapperOffsetLeft - this.x, y = y - this.wrapperOffsetTop - this.y, 
        this.x = this.x * relScale, this.y = this.y * relScale, this.setScale(scale), this.refresh(), 
        this.x = this.x > 0 ? 0 : this.x < this.maxScrollX ? this.maxScrollX : this.x, this.y = this.y > -this.options.topOffset ? -this.options.topOffset : this.y < this.maxScrollY ? this.maxScrollY : this.y, 
        this.scroller.style[a4p.BrowserCapabilities.transitionDuration] = time + "ms", this.scroller.style[a4p.BrowserCapabilities.transform] = "translate(" + this.x + "px," + this.y + "px) scale(" + scale + ")" + a4p.BrowserCapabilities.translateZ, 
        this.zoomed = !1);
    }, Scroll.prototype.isReady = function() {
        return !this.moved && !this.zoomed && !this.animating;
    }, Scroll.prototype.onZoomStart = function(pageX, pageY) {
        return this.enabled ? (this.checkDOMChanges() && this.refresh(), this.options.zoom ? (zoomStart(this, pageX, pageY), 
        !0) : !1) : !1;
    }, Scroll.prototype.onScrollStart = function(pageX, pageY, timeStamp) {
        return this.enabled ? (this.checkDOMChanges() && this.refresh(), this.options.zoom && zoomStart(this, pageX, pageY), 
        scrollStart(this), this.scrollCount++, this.scrollHistory = [ {
            deltaX: 0,
            deltaY: 0,
            timeStamp: timeStamp
        } ], this.startX = this.x, this.startY = this.y, this.pointX = pageX, this.pointY = pageY, 
        this.startTime = timeStamp, !0) : !1;
    }, Scroll.prototype.onZoomMove = function(scale) {
        return this.enabled ? this.options.zoom && 1 != scale ? (zoomMove(this, scale), 
        !0) : !1 : !1;
    }, Scroll.prototype.onScrollMove = function(pageX, pageY, timeStamp, scale) {
        if (!this.enabled) return !1;
        var deltaX = pageX - this.pointX, deltaY = pageY - this.pointY;
        return this.options.zoom && 1 != scale ? (zoomMove(this, scale), !0) : ((0 != deltaX || 0 != deltaY) && (scrollMove(this, deltaX, deltaY), 
        this.scrollCount++, this.scrollHistory.push({
            deltaX: deltaX,
            deltaY: deltaY,
            timeStamp: timeStamp
        })), this.pointX = pageX, this.pointY = pageY, timeStamp - this.startTime > 300 && (this.startTime = timeStamp, 
        this.startX = this.x, this.startY = this.y), !0);
    }, Scroll.prototype.onZoomEnd = function(scale) {
        return this.enabled ? this.zoomed ? (zoomEnd(this, scale), !0) : !1 : !1;
    }, Scroll.prototype.onScrollEnd = function(pageX, pageY, timeStamp, scale) {
        if (!this.enabled) return !1;
        if (this.zoomed) return zoomEnd(this, scale), !0;
        if (!this.moved) return resetPos(this, 400), !0;
        var i = this.scrollHistory.length - 1, lastMove = this.scrollHistory[i], deltaX = lastMove.deltaX, deltaY = lastMove.deltaY, duration = 35;
        for (i--; i >= 0; i--) {
            var move = this.scrollHistory[i];
            if (!(lastMove.timeStamp - move.timeStamp < 300)) break;
            deltaX += move.deltaX, deltaY += move.deltaY, lastMove.timeStamp - move.timeStamp >= duration && (duration = lastMove.timeStamp - move.timeStamp);
        }
        return this.scrollCount = 0, this.scrollHistory = [], scrollEnd(this, deltaX, deltaY, duration), 
        !0;
    }, Scroll.prototype.wheel = function(e, cumulatedWheelDeltaX, cumulatedWheelDeltaY) {
        var timeStamp = e.timeStamp, deltaX = 0, deltaY = 0;
        if (a4p.isDefined(cumulatedWheelDeltaX) && 0 != cumulatedWheelDeltaX || a4p.isDefined(cumulatedWheelDeltaY) && 0 != cumulatedWheelDeltaY ? (deltaX = cumulatedWheelDeltaX / 12, 
        deltaY = cumulatedWheelDeltaY / 12) : "wheelDeltaX" in e && (0 != e.wheelDeltaX || 0 != e.wheelDeltaY) ? (deltaX = e.wheelDeltaX / 12, 
        deltaY = e.wheelDeltaY / 12) : "wheelDelta" in e && 0 != e.wheelDelta ? deltaX = deltaY = e.wheelDelta / 12 : "detail" in e && 0 != e.detail && (deltaX = deltaY = 3 * -e.detail), 
        0 == deltaX && 0 == deltaY) return !1;
        this.checkDOMChanges() && this.refresh();
        var self = this;
        if ("zoom" == this.options.wheelAction) {
            var deltaScale = this.scale * Math.pow(2, 1 / 3 * (deltaY ? deltaY / Math.abs(deltaY) : 0));
            return deltaScale < this.options.zoomMin && (deltaScale = this.options.zoomMin), 
            deltaScale > this.options.zoomMax && (deltaScale = this.options.zoomMax), deltaScale != this.scale && (!this.wheelZoomCount && this.options.onZoomStart && this.options.onZoomStart.call(this, e), 
            this.wheelZoomCount++, this.zoom(e.pageX, e.pageY, deltaScale, 400), window.setTimeout(function() {
                self.wheelZoomCount--, !self.wheelZoomCount && self.options.onZoomEnd && self.options.onZoomEnd.call(self, e);
            }, 400)), !0;
        }
        return 0 == this.scrollCount && (scrollStart(this), this.scrollCount++, this.scrollHistory = [ {
            deltaX: 0,
            deltaY: 0,
            timeStamp: timeStamp
        } ]), scrollMove(this, deltaX, deltaY), this.scrollCount++, this.scrollHistory.push({
            deltaX: deltaX,
            deltaY: deltaY,
            timeStamp: timeStamp
        }), window.setTimeout(function() {
            if (self.scrollCount--, 1 == self.scrollCount) {
                var i = self.scrollHistory.length - 1, lastMove = self.scrollHistory[i], deltaX = lastMove.deltaX, deltaY = lastMove.deltaY, duration = 35;
                for (i--; i >= 0; i--) {
                    var move = self.scrollHistory[i];
                    if (!(lastMove.timeStamp - move.timeStamp < 300)) break;
                    deltaX += move.deltaX, deltaY += move.deltaY, lastMove.timeStamp - move.timeStamp >= duration && (duration = lastMove.timeStamp - move.timeStamp);
                }
                self.scrollCount = 0, self.scrollHistory = [], scrollEnd(self, deltaX, deltaY, duration);
            }
        }, 35), !0;
    }, Scroll;
}(navigator, window, document), a4p.Sense = function(navigator, window, document) {
    function nextUid() {
        for (var index = uid.length; index; ) {
            index--;
            var i = idNext[uid[index]];
            if (uid[index] = idStr[i], i > 0) return uid.join("");
        }
        return uid.unshift("0"), uid.join("");
    }
    function handleTouchStart(sense, evt) {
        return sense.timeStamp = new Date().getTime(), sense.inTouchMove = !1, sense.evtHandled = !1, 
        sense.evtTriggered = !1, sense.fingers.length <= 0 && bindOnTouchOther(sense), onTouchStart[sense.state].call(sense, evt), 
        sense.evtTriggered && (sense.options.defaultAction || preventDefault(evt), sense.options.bubble || stopPropagation(evt)), 
        !sense.options.defaultAction;
    }
    function handleTouchMove(sense, evt) {
        var now = new Date().getTime();
        return now - sense.timeStamp < 17 ? !0 : (sense.timeStamp = now, sense.inTouchMove || (sense.inTouchMove = !0), 
        sense.evtHandled = !1, sense.evtTriggered = !1, onTouchMove[sense.state].call(sense, evt), 
        sense.evtTriggered && (sense.options.defaultAction || preventDefault(evt), sense.options.bubble || stopPropagation(evt), 
        unbindAllOtherExceptFor(sense)), !sense.options.defaultAction);
    }
    function handleTouchEnd(sense, evt) {
        return sense.timeStamp = new Date().getTime(), sense.inTouchMove = !1, sense.evtHandled = !1, 
        sense.evtTriggered = !1, onTouchEnd[sense.state].call(sense, evt), sense.evtTriggered && (sense.options.defaultAction || preventDefault(evt), 
        sense.options.bubble || stopPropagation(evt), unbindAllOtherExceptFor(sense)), sense.fingers.length <= 0 && unbindOther(sense), 
        !sense.options.defaultAction;
    }
    function handleTouchCancel(sense, evt) {
        return sense.timeStamp = new Date().getTime(), sense.inTouchMove = !1, sense.evtHandled = !1, 
        sense.evtTriggered = !1, onTouchCancel[sense.state].call(sense, evt), sense.evtTriggered && (sense.options.defaultAction || preventDefault(evt), 
        sense.options.bubble || stopPropagation(evt), unbindAllOtherExceptFor(sense)), sense.fingers.length <= 0 && unbindOther(sense), 
        !sense.options.defaultAction;
    }
    function handleMouseDown(sense, evt) {
        return sense.timeStamp = new Date().getTime(), sense.inMouseMove = !1, sense.evtHandled = !1, 
        sense.evtTriggered = !1, sense.fingers.length <= 0 && bindOnMouseOther(sense), onMouseDown[sense.state].call(sense, evt), 
        sense.evtTriggered && (sense.options.defaultAction || preventDefault(evt), sense.options.bubble || stopPropagation(evt)), 
        !sense.options.defaultAction;
    }
    function handleMouseMove(sense, evt) {
        var now = new Date().getTime();
        return now - sense.timeStamp < 17 ? !0 : (sense.timeStamp = now, sense.inMouseMove || (sense.inMouseMove = !0), 
        sense.evtHandled = !1, sense.evtTriggered = !1, onMouseMove[sense.state].call(sense, evt), 
        sense.evtTriggered && (sense.options.defaultAction || preventDefault(evt), sense.options.bubble || stopPropagation(evt), 
        unbindAllOtherExceptFor(sense)), !sense.options.defaultAction);
    }
    function handleMouseUp(sense, evt) {
        return sense.timeStamp = new Date().getTime(), sense.inMouseMove = !1, sense.evtHandled = !1, 
        sense.evtTriggered = !1, onMouseUp[sense.state].call(sense, evt), sense.evtTriggered && (sense.options.defaultAction || preventDefault(evt), 
        sense.options.bubble || stopPropagation(evt), unbindAllOtherExceptFor(sense)), sense.fingers.length <= 0 && unbindOther(sense), 
        !sense.options.defaultAction;
    }
    function handleWheel(sense, evt) {
        "wheelDeltaX" in evt && (0 != evt.wheelDeltaX || 0 != evt.wheelDeltaY) ? (sense.wheelDeltaX += evt.wheelDeltaX, 
        sense.wheelDeltaY += evt.wheelDeltaY) : "wheelDelta" in evt && 0 != evt.wheelDelta ? (sense.wheelDeltaX += evt.wheelDelta, 
        sense.wheelDeltaY += evt.wheelDelta) : "detail" in evt && 0 != evt.detail && (sense.wheelDeltaX += 36 * -evt.detail, 
        sense.wheelDeltaY += 36 * -evt.detail);
        var now = new Date().getTime();
        return now - sense.timeStamp < 17 ? !sense.options.defaultAction : (sense.scroll && sense.scroll.wheel(evt, sense.wheelDeltaX, sense.wheelDeltaY), 
        sense.wheelDeltaX = 0, sense.wheelDeltaY = 0, sense.timeStamp = now, !sense.options.defaultAction);
    }
    function handleDocMouseMove(evt) {
        var now = new Date().getTime();
        if (17 > now - timeStampDocMouseMove) return !0;
        timeStampDocMouseMove = now;
        var i, nb, handlers = [];
        for (i = 0, nb = mouseListeners.length; nb > i; i++) handlers.push(mouseListeners[i]);
        var noBubble = !1;
        for (i = 0, nb = handlers.length; nb > i && (a4p.isDefined(handlers[i]) && (handleMouseMove(handlers[i], evt), 
        noBubble = handlers[i].evtTriggered && !handlers[i].options.bubble), !noBubble); i++) ;
        return !0;
    }
    function handleDocMouseUp(evt) {
        var i, nb, handlers = [];
        for (i = 0, nb = mouseListeners.length; nb > i; i++) handlers.push(mouseListeners[i]);
        var noBubble = !1;
        for (i = 0, nb = handlers.length; nb > i && (a4p.isDefined(handlers[i]) && (handleMouseUp(handlers[i], evt), 
        noBubble = handlers[i].evtTriggered && !handlers[i].options.bubble), !noBubble); i++) ;
        return !0;
    }
    function bindOnStart(sense, newScroll) {
        a4p.BrowserCapabilities.hasTouch ? sense.bindTouchStart || (sense.bindTouchStart = bindEvent(sense.DOMelement, "touchstart", function(evt) {
            handleTouchStart(sense, evt);
        })) : (sense.bindMouseDown || (sense.bindMouseDown = bindEvent(sense.DOMelement, "mousedown", function(evt) {
            handleMouseDown(sense, evt);
        })), newScroll && (sense.bindMouseWheel || (sense.bindMouseWheel = bindEvent(sense.DOMelement, "mousewheel", function(evt) {
            handleWheel(sense, evt);
        })), sense.bindDomMouseWheel || (sense.bindDomMouseWheel = bindEvent(sense.DOMelement, "DOMMouseScroll", function(evt) {
            handleWheel(sense, evt);
        }))));
    }
    function unbindStart(sense) {
        sense.bindDomMouseWheel && (sense.bindDomMouseWheel.destroy(), sense.bindDomMouseWheel = !1), 
        sense.bindMouseWheel && (sense.bindMouseWheel.destroy(), sense.bindMouseWheel = !1), 
        a4p.BrowserCapabilities.hasTouch ? sense.bindTouchStart && (sense.bindTouchStart.destroy(), 
        sense.bindTouchStart = !1) : sense.bindMouseDown && (sense.bindMouseDown.destroy(), 
        sense.bindMouseDown = !1);
    }
    function bindOnTouchOther(sense) {
        if (a4p.BrowserCapabilities.hasTouch && sense.bindTouchStart) {
            for (var found = !1, i = touchListeners.length - 1; i >= 0; i--) if (touchListeners[i].id == sense.id) {
                found = !0;
                break;
            }
            found || touchListeners.push(sense), sense.bindTouchMove || (sense.bindTouchMove = bindEvent(sense.DOMelement, "touchmove", function(evt) {
                handleTouchMove(sense, evt);
            })), sense.bindTouchEnd || (sense.bindTouchEnd = bindEvent(sense.DOMelement, "touchend", function(evt) {
                handleTouchEnd(sense, evt);
            })), sense.bindTouchCancel || (sense.bindTouchCancel = bindEvent(sense.DOMelement, "touchcancel", function(evt) {
                handleTouchCancel(sense, evt);
            }));
        }
    }
    function bindOnMouseOther(sense) {
        if (!a4p.BrowserCapabilities.hasTouch && sense.bindMouseDown && !sense.bindMouseOther) {
            for (var found = !1, i = mouseListeners.length - 1; i >= 0; i--) if (mouseListeners[i].id == sense.id) {
                found = !0;
                break;
            }
            found || mouseListeners.push(sense), sense.bindMouseOther = !0;
        }
    }
    function unbindAllOtherExceptFor(sense) {
        var i;
        if (a4p.BrowserCapabilities.hasTouch) for (i = touchListeners.length - 1; i >= 0 && touchListeners[i].id != sense.id; i--) touchListeners[i].resetState(); else for (i = mouseListeners.length - 1; i >= 0 && mouseListeners[i].id != sense.id; i--) mouseListeners[i].resetState();
    }
    function unbindOther(sense) {
        var i;
        if (a4p.BrowserCapabilities.hasTouch) {
            for (i = touchListeners.length - 1; i >= 0; i--) if (touchListeners[i].id == sense.id) {
                touchListeners.splice(i, 1);
                break;
            }
            sense.bindTouchMove && (sense.bindTouchMove.destroy(), sense.bindTouchMove = !1), 
            sense.bindTouchEnd && (sense.bindTouchEnd.destroy(), sense.bindTouchEnd = !1), sense.bindTouchCancel && (sense.bindTouchCancel.destroy(), 
            sense.bindTouchCancel = !1);
        } else if (sense.bindMouseOther) {
            for (i = mouseListeners.length - 1; i >= 0; i--) if (mouseListeners[i].id == sense.id) {
                mouseListeners.splice(i, 1);
                break;
            }
            sense.bindMouseOther = !1;
        }
    }
    function bindEvent(element, eventName, callback) {
        return element.addEventListener ? (element.addEventListener(eventName, callback, !1), 
        {
            destroy: function() {
                element.removeEventListener(eventName, callback, !1);
            }
        }) : element.attachEvent ? (element.attachEvent("on" + eventName, callback), {
            destroy: function() {
                element.detachEvent("on" + eventName, callback);
            }
        }) : !1;
    }
    function preventDefault(event) {
        event = event || window.event, event.preventDefault ? event.preventDefault() : event.returnValue = !1;
    }
    function stopPropagation(event) {
        event = event || window.event, event.stopPropagation ? event.stopPropagation() : event.cancelBubble = !0;
    }
    function eventNameWithoutPrefixNorNbFinger(eventName) {
        "Short" == eventName.substr(0, 5) ? eventName = eventName.substr(5) : "Long" == eventName.substr(0, 4) && (eventName = eventName.substr(4));
        var lg = eventName.length;
        return lg > 0 && ("1" == eventName.charAt(lg - 1) || "2" == eventName.charAt(lg - 1) || "3" == eventName.charAt(lg - 1) || "4" == eventName.charAt(lg - 1) || "5" == eventName.charAt(lg - 1)) ? eventName.substr(0, lg - 1) : eventName;
    }
    function clearFingers(sense) {
        sense.fingers = [], sense.side = "", sense.scale = 1, sense.rotate = 0, sense.moves = [], 
        sense.timeStamp = new Date().getTime(), sense.wheelDeltaX = 0, sense.wheelDeltaY = 0, 
        sense.sourcePoints = [], sense.startPageX = 0, sense.startPageY = 0, sense.startClientX = 0, 
        sense.startClientY = 0, sense.pageX = 0, sense.pageY = 0, sense.clientX = 0, sense.clientY = 0, 
        sense.deltaX = 0, sense.deltaY = 0, sense.deltaFingerX = 0, sense.deltaFingerY = 0, 
        delete sense.finger1, delete sense.finger2;
    }
    function addTouchFinger(sense, id, finger) {
        for (var i = sense.fingers.length - 1; i >= 0; i--) {
            var item = sense.fingers[i];
            if (item.id == id) return i > 1 ? sense.fingers[i] = {
                id: id,
                target: finger.target,
                pageX: finger.pageX,
                pageY: finger.pageY,
                clientX: finger.clientX,
                clientY: finger.clientY,
                deltaFingerX: finger.clientX - sense.clientX,
                deltaFingerY: finger.clientY - sense.clientY
            } : 1 == i ? (sense.deltaFingerX = finger.clientX - sense.clientX, sense.deltaFingerY = finger.clientY - sense.clientY, 
            sense.fingers[1] = {
                id: id,
                target: finger.target,
                pageX: finger.pageX,
                pageY: finger.pageY,
                clientX: finger.clientX,
                clientY: finger.clientY,
                deltaFingerX: sense.deltaFingerX,
                deltaFingerY: sense.deltaFingerY
            }, sense.finger2 = sense.fingers[1]) : (sense.startPageX = finger.pageX, sense.startPageY = finger.pageY, 
            sense.startClientX = finger.clientX, sense.startClientY = finger.clientY, sense.pageX = finger.pageX, 
            sense.pageY = finger.pageY, sense.clientX = finger.clientX, sense.clientY = finger.clientY, 
            sense.deltaFingerX = 0, sense.deltaFingerY = 0, sense.fingers[0] = {
                id: id,
                target: finger.target,
                pageX: finger.pageX,
                pageY: finger.pageY,
                clientX: finger.clientX,
                clientY: finger.clientY,
                deltaFingerX: 0,
                deltaFingerY: 0
            }, sense.finger1 = sense.fingers[0]), void 0;
        }
        sense.fingers.length > 1 ? sense.fingers.push({
            id: id,
            target: finger.target,
            pageX: finger.pageX,
            pageY: finger.pageY,
            clientX: finger.clientX,
            clientY: finger.clientY,
            deltaFingerX: finger.clientX - sense.clientX,
            deltaFingerY: finger.clientY - sense.clientY
        }) : 1 == sense.fingers.length ? (sense.deltaFingerX = finger.clientX - sense.clientX, 
        sense.deltaFingerY = finger.clientY - sense.clientY, sense.fingers.push({
            id: id,
            target: finger.target,
            pageX: finger.pageX,
            pageY: finger.pageY,
            clientX: finger.clientX,
            clientY: finger.clientY,
            deltaFingerX: sense.deltaFingerX,
            deltaFingerY: sense.deltaFingerY
        }), sense.finger2 = sense.fingers[1]) : (sense.startPageX = finger.pageX, sense.startPageY = finger.pageY, 
        sense.startClientX = finger.clientX, sense.startClientY = finger.clientY, sense.pageX = finger.pageX, 
        sense.pageY = finger.pageY, sense.clientX = finger.clientX, sense.clientY = finger.clientY, 
        sense.deltaFingerX = 0, sense.deltaFingerY = 0, sense.fingers.push({
            id: id,
            target: finger.target,
            pageX: finger.pageX,
            pageY: finger.pageY,
            clientX: finger.clientX,
            clientY: finger.clientY,
            deltaFingerX: 0,
            deltaFingerY: 0
        }), sense.finger1 = sense.fingers[0]);
    }
    function addMouseFinger(sense, id, evt) {
        for (var pageX = getMousePageX(evt), pageY = getMousePageY(evt), i = sense.fingers.length - 1; i >= 0; i--) {
            var item = sense.fingers[i];
            if (item.id == id) return i > 1 ? sense.fingers[i] = {
                id: id,
                target: evt.target,
                pageX: pageX,
                pageY: pageY,
                clientX: evt.clientX,
                clientY: evt.clientY,
                deltaFingerX: evt.clientX - sense.clientX,
                deltaFingerY: evt.clientY - sense.clientY
            } : 1 == i ? (sense.deltaFingerX = evt.clientX - sense.clientX, sense.deltaFingerY = evt.clientY - sense.clientY, 
            sense.fingers[1] = {
                id: id,
                target: evt.target,
                pageX: pageX,
                pageY: pageY,
                clientX: evt.clientX,
                clientY: evt.clientY,
                deltaFingerX: sense.deltaFingerX,
                deltaFingerY: sense.deltaFingerY
            }, sense.finger2 = sense.fingers[1]) : (sense.startPageX = pageX, sense.startPageY = pageY, 
            sense.startClientX = evt.clientX, sense.startClientY = evt.clientY, sense.pageX = pageX, 
            sense.pageY = pageY, sense.clientX = evt.clientX, sense.clientY = evt.clientY, sense.deltaFingerX = 0, 
            sense.deltaFingerY = 0, sense.fingers[0] = {
                id: id,
                target: evt.target,
                pageX: pageX,
                pageY: pageY,
                clientX: evt.clientX,
                clientY: evt.clientY,
                deltaFingerX: 0,
                deltaFingerY: 0
            }, sense.finger1 = sense.fingers[0]), void 0;
        }
        sense.fingers.length > 1 ? sense.fingers.push({
            id: id,
            target: evt.target,
            pageX: pageX,
            pageY: pageY,
            clientX: evt.clientX,
            clientY: evt.clientY,
            deltaFingerX: evt.clientX - sense.clientX,
            deltaFingerY: evt.clientY - sense.clientY
        }) : 1 == sense.fingers.length ? (sense.deltaFingerX = evt.clientX - sense.clientX, 
        sense.deltaFingerY = evt.clientY - sense.clientY, sense.fingers.push({
            id: id,
            target: evt.target,
            pageX: pageX,
            pageY: pageY,
            clientX: evt.clientX,
            clientY: evt.clientY,
            deltaFingerX: sense.deltaFingerX,
            deltaFingerY: sense.deltaFingerY
        }), sense.finger2 = sense.fingers[1]) : (sense.startPageX = pageX, sense.startPageY = pageY, 
        sense.startClientX = evt.clientX, sense.startClientY = evt.clientY, sense.pageX = pageX, 
        sense.pageY = pageY, sense.clientX = evt.clientX, sense.clientY = evt.clientY, sense.deltaFingerX = 0, 
        sense.deltaFingerY = 0, sense.fingers.push({
            id: id,
            target: evt.target,
            pageX: pageX,
            pageY: pageY,
            clientX: evt.clientX,
            clientY: evt.clientY,
            deltaFingerX: 0,
            deltaFingerY: 0
        }), sense.finger1 = sense.fingers[0]);
    }
    function setTouchFinger(sense, id, finger) {
        for (var i = sense.fingers.length - 1; i >= 0; i--) {
            var item = sense.fingers[i];
            if (item.id == id) return item.pageX = finger.pageX, item.pageY = finger.pageY, 
            item.clientX = finger.clientX, item.clientY = finger.clientY, 0 == i ? (sense.pageX = item.pageX - item.deltaFingerX, 
            sense.pageY = item.pageY - item.deltaFingerY, sense.clientX = item.clientX - item.deltaFingerX, 
            sense.clientY = item.clientY - item.deltaFingerY, sense.fingers.length > 1 && (sense.deltaFingerX = sense.finger2.clientX - sense.clientX, 
            sense.deltaFingerY = sense.finger2.clientY - sense.clientY)) : 1 == i && (sense.deltaFingerX = item.clientX - sense.clientX, 
            sense.deltaFingerY = item.clientY - sense.clientY), !0;
        }
        return !1;
    }
    function setMouseFinger(sense, id, evt) {
        for (var i = sense.fingers.length - 1; i >= 0; i--) {
            var item = sense.fingers[i];
            if (item.id == id) return item.pageX = getMousePageX(evt), item.pageY = getMousePageY(evt), 
            item.clientX = evt.clientX, item.clientY = evt.clientY, 0 == i ? (sense.pageX = item.pageX - item.deltaFingerX, 
            sense.pageY = item.pageY - item.deltaFingerY, sense.clientX = item.clientX - item.deltaFingerX, 
            sense.clientY = item.clientY - item.deltaFingerY, sense.fingers.length > 1 && (sense.deltaFingerX = sense.finger2.clientX - sense.clientX, 
            sense.deltaFingerY = sense.finger2.clientY - sense.clientY)) : 1 == i && (sense.deltaFingerX = item.clientX - sense.clientX, 
            sense.deltaFingerY = item.clientY - sense.clientY), !0;
        }
        return !1;
    }
    function removeFinger(sense, id) {
        for (var i = sense.fingers.length - 1; i >= 0; i--) {
            var item = sense.fingers[i];
            if (item.id == id) return sense.fingers.splice(i, 1), 0 == i ? sense.fingers.length > 0 && (sense.finger1 = sense.fingers[0], 
            sense.pageX = sense.finger1.pageX - sense.finger1.deltaFingerX, sense.pageY = sense.finger1.pageY - sense.finger1.deltaFingerY, 
            sense.clientX = sense.finger1.clientX - sense.finger1.deltaFingerX, sense.clientY = sense.finger1.clientY - sense.finger1.deltaFingerY, 
            sense.fingers.length > 1 && (sense.finger2 = sense.fingers[1], sense.deltaFingerX = sense.finger2.clientX - sense.clientX, 
            sense.deltaFingerY = sense.finger2.clientY - sense.clientY)) : 1 == i && sense.fingers.length > 1 && (sense.finger2 = sense.fingers[1], 
            sense.deltaFingerX = sense.finger2.clientX - sense.clientX, sense.deltaFingerY = sense.finger2.clientY - sense.clientY), 
            !0;
        }
        return !1;
    }
    function hasFinger(sense, id) {
        for (var i = sense.fingers.length - 1; i >= 0; i--) {
            var item = sense.fingers[i];
            if (item.id == id) return !0;
        }
        return !1;
    }
    function addSourcePoint(sense) {
        sense.sourcePoints.push({
            x: sense.clientX,
            y: sense.clientY,
            t: new Date().getTime()
        });
    }
    function add1FingerMove(sense) {
        if (sense.fingers.length <= 0) return !1;
        var fromX = sense.startClientX, fromY = sense.startClientY;
        sense.moves.length > 0 && (fromX = sense.moves[sense.moves.length - 1].x, fromY = sense.moves[sense.moves.length - 1].y);
        var deltaX = sense.clientX - fromX, deltaY = sense.clientY - fromY;
        if (deltaX * deltaX + deltaY * deltaY > sense.options.smallMove * sense.options.smallMove) {
            if (sense.moves.length > 0) if (a4p.isUndefined(sense.moves[sense.moves.length - 1].radius)) {
                var previousX = sense.startClientX, previousY = sense.startClientY;
                sense.moves.length > 1 && (previousX = sense.moves[sense.moves.length - 2].x, previousY = sense.moves[sense.moves.length - 2].y);
                var center = getCircleCenter(previousX, previousY, fromX, fromY, sense.clientX, sense.clientY);
                if (null != center) {
                    var radiusX = sense.clientX - center[0], radiusY = sense.clientY - center[1];
                    if (radiusX * radiusX + radiusY * radiusY < sense.options.arcRadius * sense.options.arcRadius) if (radiusX * radiusX + radiusY * radiusY > sense.options.smallMove * sense.options.smallMove) {
                        var angleStart = Math.atan2(previousY - center[1], previousX - center[0]), angleEnd = Math.atan2(radiusY, radiusX), rotation = angleEnd - angleStart;
                        sense.moves.splice(sense.moves.length - 1, 1, {
                            x: sense.clientX,
                            y: sense.clientY,
                            centerx: center[0],
                            centery: center[1],
                            radius: Math.sqrt(radiusX * radiusX + radiusY * radiusY),
                            start: angleStart,
                            end: angleEnd,
                            direction: rotation >= 0 ? "right" : "left"
                        });
                    } else sense.moves.push({
                        x: sense.clientX,
                        y: sense.clientY,
                        deltaX: deltaX,
                        deltaY: deltaY
                    }); else sense.moves.splice(sense.moves.length - 1, 1, {
                        x: sense.clientX,
                        y: sense.clientY,
                        deltaX: sense.clientX - previousX,
                        deltaY: sense.clientY - previousY
                    });
                } else (fromX - previousX) * deltaX >= 0 ? sense.moves.splice(sense.moves.length - 1, 1, {
                    x: sense.clientX,
                    y: sense.clientY,
                    deltaX: sense.clientX - previousX,
                    deltaY: sense.clientY - previousY
                }) : sense.moves.push({
                    x: sense.clientX,
                    y: sense.clientY,
                    deltaX: deltaX,
                    deltaY: deltaY
                });
            } else {
                var radius = sense.moves[sense.moves.length - 1].radius, centerx = sense.moves[sense.moves.length - 1].centerx, centery = sense.moves[sense.moves.length - 1].centery, start = sense.moves[sense.moves.length - 1].start, end = sense.moves[sense.moves.length - 1].end, lastRadiusX = sense.clientX - centerx, lastRadiusY = sense.clientY - centery;
                if (Math.abs(lastRadiusX * lastRadiusX + lastRadiusY * lastRadiusY - radius * radius) <= sense.options.smallMove * sense.options.smallMove) {
                    var lastAngleEnd = Math.atan2(lastRadiusY, lastRadiusX), lastRotation = lastAngleEnd - end;
                    (end - start) * lastRotation >= 0 ? sense.moves.splice(sense.moves.length - 1, 1, {
                        x: sense.clientX,
                        y: sense.clientY,
                        centerx: centerx,
                        centery: centery,
                        radius: radius,
                        start: start,
                        end: lastAngleEnd,
                        direction: lastRotation >= 0 ? "right" : "left"
                    }) : sense.moves.push({
                        x: sense.clientX,
                        y: sense.clientY,
                        centerx: centerx,
                        centery: centery,
                        radius: Math.sqrt(lastRadiusX * lastRadiusX + lastRadiusY * lastRadiusY),
                        start: start,
                        end: lastAngleEnd,
                        direction: lastRotation >= 0 ? "right" : "left"
                    });
                } else sense.moves.push({
                    x: sense.clientX,
                    y: sense.clientY,
                    deltaX: deltaX,
                    deltaY: deltaY
                });
            } else sense.moves.push({
                x: sense.clientX,
                y: sense.clientY,
                deltaX: deltaX,
                deltaY: deltaY
            });
            return !0;
        }
        return !1;
    }
    function set2FingersScaleAndRotate(sense) {
        if (sense.fingers.length <= 1) return !1;
        var to1X = sense.clientX, to1Y = sense.clientY, to2X = sense.finger2.clientX, to2Y = sense.finger2.clientY, from1X = sense.moves[sense.moves.length - 1].x, from1Y = sense.moves[sense.moves.length - 1].y, from2X = from1X + sense.finger2.deltaFingerX, from2Y = from1Y + sense.finger2.deltaFingerY, delta1X = to1X - from1X, delta1Y = to1Y - from1Y, delta2X = to2X - from2X, delta2Y = to2Y - from2Y;
        if (delta1X * delta1X + delta1Y * delta1Y > sense.options.smallMove * sense.options.smallMove || delta2X * delta2X + delta2Y * delta2Y > sense.options.smallMove * sense.options.smallMove) {
            var angleStart = Math.atan2(sense.finger2.deltaFingerY, sense.finger2.deltaFingerX), angleEnd = Math.atan2(sense.deltaFingerY, sense.deltaFingerX);
            return sense.scale = Math.sqrt((sense.deltaFingerX * sense.deltaFingerX + sense.deltaFingerY * sense.deltaFingerY) / (sense.finger2.deltaFingerX * sense.finger2.deltaFingerX + sense.finger2.deltaFingerY * sense.finger2.deltaFingerY)), 
            sense.rotate = angleEnd - angleStart, Math.abs(sense.scale - 1) <= sense.options.smallScale && (sense.scale = 1), 
            Math.abs(sense.rotate) <= sense.options.smallRotation && (sense.rotate = 0), !0;
        }
        return !1;
    }
    function onWhichEvent(sense, name, nbFinger) {
        var prefix = "Short";
        sense.hasPaused && (prefix = "Long");
        var onEventName = "on" + prefix + name + nbFinger;
        if (a4p.isDefined(sense[onEventName]) && null != sense[onEventName]) return onEventName;
        if (sense.options.prefixPriority) {
            if (onEventName = "on" + prefix + name, a4p.isDefined(sense[onEventName]) && null != sense[onEventName]) return onEventName;
            if (onEventName = "on" + name + nbFinger, a4p.isDefined(sense[onEventName]) && null != sense[onEventName]) return onEventName;
        } else {
            if (onEventName = "on" + name + nbFinger, a4p.isDefined(sense[onEventName]) && null != sense[onEventName]) return onEventName;
            if (onEventName = "on" + prefix + name, a4p.isDefined(sense[onEventName]) && null != sense[onEventName]) return onEventName;
        }
        return onEventName = "on" + name, a4p.isDefined(sense[onEventName]) && null != sense[onEventName] ? onEventName : "";
    }
    function executeEvent(sense, name, evt) {
        var onEventName = onWhichEvent(sense, name, evt.nbFinger);
        if (onEventName.length > 0) {
            try {
                sense[onEventName](evt);
            } catch (exception) {}
            return !0;
        }
        return !1;
    }
    function isEventListened(sense, name, nbFinger) {
        var onEventName = onWhichEvent(sense, name, nbFinger);
        return onEventName.length > 0;
    }
    function clearDrops(sense) {
        sense.dropsStarted = [], sense.dropOver = null, sense.dropEvt = {
            dataType: "text/plain",
            dataTransfer: ""
        };
    }
    function dndStart(sense) {
        for (var idx = dndables.length - 1; idx >= 0; idx--) {
            var dropSenseId = dndables[idx], dropSense = dndablesMap[dropSenseId];
            executeEvent(dropSense, GST_DND_START, sense.dropEvt);
        }
    }
    function dndEnd(sense) {
        for (var idx = dndables.length - 1; idx >= 0; idx--) {
            var dropSenseId = dndables[idx], dropSense = dndablesMap[dropSenseId];
            executeEvent(dropSense, GST_DND_END, sense.dropEvt);
        }
    }
    function dndCancel(sense) {
        for (var idx = dndables.length - 1; idx >= 0; idx--) {
            var dropSenseId = dndables[idx], dropSense = dndablesMap[dropSenseId];
            executeEvent(dropSense, GST_DND_CANCEL, sense.dropEvt);
        }
    }
    function dragStart(sense) {
        sense.dropEvt.nbFinger = sense.fingers.length, sense.dropEvt.side = sense.side, 
        sense.dropEvt.scale = sense.scale, sense.dropEvt.rotate = sense.rotate, sense.dropEvt.moves = sense.moves, 
        sense.dropEvt.sourcePoints = sense.sourcePoints, sense.dropEvt.timeStamp = sense.timeStamp, 
        sense.dropEvt.clientX = sense.startClientX, sense.dropEvt.clientY = sense.startClientY, 
        sense.dropEvt.pageX = sense.startPageX, sense.dropEvt.pageY = sense.startPageY;
        var box = sense.DOMelement.getBoundingClientRect();
        sense.dropEvt.elementX = sense.startClientX - box.left, sense.dropEvt.elementY = sense.startClientY - box.top, 
        sense.triggerEvent(GST_DRAG_START, sense.dropEvt), dndStart(sense);
    }
    function dropStart(sense) {
        if (sense.dropEvt.nbFinger = sense.fingers.length, sense.dropEvt.side = sense.side, 
        sense.dropEvt.scale = sense.scale, sense.dropEvt.rotate = sense.rotate, sense.dropEvt.moves = sense.moves, 
        sense.dropEvt.sourcePoints = sense.sourcePoints, sense.dropEvt.timeStamp = sense.timeStamp, 
        sense.dropEvt.clientX = sense.finger1.clientX, sense.dropEvt.clientY = sense.finger1.clientY, 
        sense.dropEvt.pageX = sense.finger1.pageX, sense.dropEvt.pageY = sense.finger1.pageY, 
        null != sense.dropOver) {
            var idx = sense.dropsStarted.indexOf(sense.dropOver);
            0 > idx && (sense.dropsStarted.push(sense.dropOver), executeEvent(droppablesMap[sense.dropOver], GST_DROP_START, sense.dropEvt));
        }
    }
    function dropEnd(sense) {
        sense.dropEvt.nbFinger = sense.fingers.length, sense.dropEvt.side = sense.side, 
        sense.dropEvt.scale = sense.scale, sense.dropEvt.rotate = sense.rotate, sense.dropEvt.moves = sense.moves, 
        sense.dropEvt.sourcePoints = sense.sourcePoints, sense.dropEvt.timeStamp = sense.timeStamp, 
        sense.dropEvt.clientX = sense.finger1.clientX, sense.dropEvt.clientY = sense.finger1.clientY, 
        sense.dropEvt.pageX = sense.finger1.pageX, sense.dropEvt.pageY = sense.finger1.pageY, 
        sense.dropsStarted.length > 0 ? (null != sense.dropOver && (sense.triggerEvent(GST_DRAG_OVER_LEAVE, sense.dropEvt), 
        executeEvent(droppablesMap[sense.dropOver], GST_DROP_OVER_LEAVE, sense.dropEvt), 
        sense.dropOver = null), sense.scroll && sense.scroll.options.zoom && sense.scroll.onScrollEnd(sense.finger1.pageX, sense.finger1.pageY, sense.timeStamp, sense.scale) && (sense.evtTriggered = !0), 
        sense.triggerEvent(GST_DRAG_END, sense.dropEvt), sense.dropsStarted.forEach(function(targetId) {
            executeEvent(droppablesMap[targetId], GST_DROP_END, sense.dropEvt);
        }), dndEnd(sense), clearDrops(sense)) : dropCancel(sense);
    }
    function dropCancel(sense) {
        sense.dropEvt.nbFinger = sense.fingers.length, sense.dropEvt.side = sense.side, 
        sense.dropEvt.scale = sense.scale, sense.dropEvt.rotate = sense.rotate, sense.dropEvt.moves = sense.moves, 
        sense.dropEvt.sourcePoints = sense.sourcePoints, sense.dropEvt.timeStamp = sense.timeStamp, 
        sense.dropEvt.clientX = sense.finger1.clientX, sense.dropEvt.clientY = sense.finger1.clientY, 
        sense.dropEvt.pageX = sense.finger1.pageX, sense.dropEvt.pageY = sense.finger1.pageY, 
        null != sense.dropOver && (sense.triggerEvent(GST_DRAG_OVER_LEAVE, sense.dropEvt), 
        executeEvent(droppablesMap[sense.dropOver], GST_DROP_OVER_LEAVE, sense.dropEvt), 
        sense.dropOver = null), sense.scroll && sense.scroll.options.zoom && sense.scroll.onScrollEnd(sense.finger1.pageX, sense.finger1.pageY, sense.timeStamp, sense.scale) && (sense.evtTriggered = !0), 
        sense.triggerEvent(GST_DRAG_CANCEL, sense.dropEvt), sense.dropsStarted.forEach(function(targetId) {
            executeEvent(droppablesMap[targetId], GST_DROP_CANCEL, sense.dropEvt);
        }), dndCancel(sense), clearDrops(sense);
    }
    function findDroppableSenseFromCoord(clientX, clientY) {
        for (var dropOverTargetId = null, boxArea = -1, idx = droppables.length - 1; idx >= 0; idx--) {
            var dropSenseId = droppables[idx], dropSense = droppablesMap[dropSenseId], box = dropSense.DOMelement.getBoundingClientRect();
            box.left <= clientX && clientX <= box.right && box.top <= clientY && clientY <= box.bottom && (null == dropOverTargetId || box.height * box.width < boxArea) && (dropOverTargetId = dropSenseId, 
            boxArea = box.height * box.width);
        }
        return dropOverTargetId;
    }
    function startHoldGesture(sense) {
        sense.triggerEvent(GST_HOLD_START, {
            clientX: sense.finger1.clientX,
            clientY: sense.finger1.clientY,
            pageX: sense.finger1.pageX,
            pageY: sense.finger1.pageY,
            nbFinger: sense.fingers.length
        });
    }
    function stopHoldGesture(sense) {
        sense.triggerEvent(GST_HOLD_STOP, {
            clientX: sense.finger1.clientX,
            clientY: sense.finger1.clientY,
            pageX: sense.finger1.pageX,
            pageY: sense.finger1.pageY,
            nbFinger: sense.fingers.length
        });
    }
    function tapGesture(sense) {
        sense.triggerEvent(GST_TAP, {
            clientX: sense.finger1.clientX,
            clientY: sense.finger1.clientY,
            pageX: sense.finger1.pageX,
            pageY: sense.finger1.pageY,
            nbFinger: sense.fingers.length
        });
    }
    function tapAndStartGestureIfMoves(sense) {
        add1FingerMove(sense), sense.moves.length > 0 && (tapGesture(sense), startGesture(sense));
    }
    function startGestureIfMoves(sense) {
        add1FingerMove(sense), sense.moves.length > 0 && startGesture(sense);
    }
    function startGesture(sense) {
        var move = sense.moves[sense.moves.length - 1];
        if (0 == move.deltaY || Math.abs(move.deltaX / move.deltaY) > sense.options.axeRatio) if (move.deltaX >= 0) {
            if (sense.side = "right", sense.scroll && !sense.scroll.hasAttainedSideLeft()) return startScrollGesture(sense), 
            void 0;
            if ("scroll" == sense.options.axeX) return startScrollGesture(sense), void 0;
            if ("swipe" == sense.options.axeX) return startSwipeGesture(sense), void 0;
        } else {
            if (sense.side = "left", sense.scroll && !sense.scroll.hasAttainedSideRight()) return startScrollGesture(sense), 
            void 0;
            if ("scroll" == sense.options.axeX) return startScrollGesture(sense), void 0;
            if ("swipe" == sense.options.axeX) return startSwipeGesture(sense), void 0;
        } else if (0 == move.deltaX || Math.abs(move.deltaY / move.deltaX) > sense.options.axeRatio) if (move.deltaY >= 0) {
            if (sense.side = "bottom", sense.scroll && !sense.scroll.hasAttainedSideTop()) return startScrollGesture(sense), 
            void 0;
            if ("scroll" == sense.options.axeY) return startScrollGesture(sense), void 0;
            if ("swipe" == sense.options.axeY) return startSwipeGesture(sense), void 0;
        } else {
            if (sense.side = "top", sense.scroll && !sense.scroll.hasAttainedSideBottom()) return startScrollGesture(sense), 
            void 0;
            if ("scroll" == sense.options.axeY) return startScrollGesture(sense), void 0;
            if ("swipe" == sense.options.axeY) return startSwipeGesture(sense), void 0;
        } else if (sense.side = "", sense.scroll && sense.scroll.enabled && sense.scroll.options.zoom) return startScrollGesture(sense), 
        void 0;
        sense.fingers.length > 1 && set2FingersScaleAndRotate(sense), sense.side = "", isEventListened(sense, GST_DRAG_START, sense.fingers.length) ? (sense.gotoState(STATE_DRAGGING), 
        dragStart(sense), dragGesture(sense)) : sense.gotoState(STATE_0CLICK);
    }
    function swipeGesture(sense) {
        sense.inPause && (sense.inPause = !1, sense.startTimer(sense.options.holdTime)), 
        sense.triggerEvent(GST_SWIPE_MOVE, {
            clientX: sense.clientX,
            clientY: sense.clientY,
            pageX: sense.pageX,
            pageY: sense.pageY,
            nbFinger: sense.fingers.length,
            side: sense.side,
            moves: sense.moves,
            sourcePoints: sense.sourcePoints,
            timeStamp: sense.timeStamp
        });
    }
    function startSwipeGesture(sense) {
        sense.gotoState(STATE_SWIPING), sense.triggerEvent(GST_SWIPE_START, {
            clientX: sense.startClientX,
            clientY: sense.startClientY,
            pageX: sense.startPageX,
            pageY: sense.startPageY,
            nbFinger: sense.fingers.length,
            side: sense.side,
            moves: sense.moves,
            sourcePoints: sense.sourcePoints,
            timeStamp: sense.timeStamp
        }), swipeGesture(sense);
    }
    function continueSwipeGesture(sense) {
        add1FingerMove(sense), swipeGesture(sense);
    }
    function cancelSwipeGesture(sense) {
        sense.triggerEvent(GST_SWIPE_CANCEL, {
            clientX: sense.finger1.clientX,
            clientY: sense.finger1.clientY,
            pageX: sense.finger1.pageX,
            pageY: sense.finger1.pageY,
            nbFinger: sense.fingers.length,
            side: sense.side,
            moves: sense.moves,
            sourcePoints: sense.sourcePoints,
            timeStamp: sense.timeStamp
        }), sense.gotoState(STATE_0CLICK);
    }
    function endSwipeGesture(sense) {
        sense.triggerEvent(GST_SWIPE_END, {
            clientX: sense.finger1.clientX,
            clientY: sense.finger1.clientY,
            pageX: sense.finger1.pageX,
            pageY: sense.finger1.pageY,
            nbFinger: sense.fingers.length,
            side: sense.side,
            moves: sense.moves,
            sourcePoints: sense.sourcePoints,
            timeStamp: sense.timeStamp
        }), sense.gotoState(STATE_0CLICK);
    }
    function scrollGesture(sense) {
        sense.inPause && (sense.inPause = !1, sense.startTimer(sense.options.holdTime)), 
        sense.scroll && (sense.scroll.options.zoom || "scroll" == sense.options.axeX || "scroll" == sense.options.axeY) && sense.scroll.onScrollMove(sense.pageX, sense.pageY, sense.timeStamp, sense.scale) && (sense.evtTriggered = !0), 
        sense.triggerEvent(GST_SCROLL_MOVE, {
            clientX: sense.clientX,
            clientY: sense.clientY,
            pageX: sense.pageX,
            pageY: sense.pageY,
            nbFinger: sense.fingers.length,
            side: sense.side,
            moves: sense.moves,
            sourcePoints: sense.sourcePoints,
            timeStamp: sense.timeStamp
        });
    }
    function startScrollGesture(sense) {
        sense.gotoState(STATE_SCROLLING), sense.scroll && (sense.scroll.options.zoom || "scroll" == sense.options.axeX || "scroll" == sense.options.axeY) && sense.scroll.onScrollStart(sense.startPageX, sense.startPageY, sense.timeStamp) && (sense.evtTriggered = !0), 
        sense.triggerEvent(GST_SCROLL_START, {
            clientX: sense.startClientX,
            clientY: sense.startClientY,
            pageX: sense.startPageX,
            pageY: sense.startPageY,
            nbFinger: sense.fingers.length,
            side: sense.side,
            moves: sense.moves,
            sourcePoints: sense.sourcePoints,
            timeStamp: sense.timeStamp
        }), scrollGesture(sense);
    }
    function continueScrollGesture(sense) {
        add1FingerMove(sense), sense.fingers.length > 1 && set2FingersScaleAndRotate(sense), 
        scrollGesture(sense);
    }
    function cancelScrollGesture(sense) {
        sense.scroll && (sense.scroll.options.zoom || "scroll" == sense.options.axeX || "scroll" == sense.options.axeY) && sense.scroll.onScrollEnd(sense.finger1.pageX, sense.finger1.pageY, sense.timeStamp, sense.scale) && (sense.evtTriggered = !0), 
        sense.triggerEvent(GST_SCROLL_CANCEL, {
            clientX: sense.finger1.clientX,
            clientY: sense.finger1.clientY,
            pageX: sense.finger1.pageX,
            pageY: sense.finger1.pageY,
            nbFinger: sense.fingers.length,
            side: sense.side,
            moves: sense.moves,
            sourcePoints: sense.sourcePoints,
            timeStamp: sense.timeStamp
        }), sense.gotoState(STATE_0CLICK);
    }
    function endScrollGesture(sense) {
        sense.scroll && (sense.scroll.options.zoom || "scroll" == sense.options.axeX || "scroll" == sense.options.axeY) && sense.scroll.onScrollEnd(sense.finger1.pageX, sense.finger1.pageY, sense.timeStamp, sense.scale) && (sense.evtTriggered = !0), 
        sense.triggerEvent(GST_SCROLL_END, {
            clientX: sense.finger1.clientX,
            clientY: sense.finger1.clientY,
            pageX: sense.finger1.pageX,
            pageY: sense.finger1.pageY,
            nbFinger: sense.fingers.length,
            side: sense.side,
            moves: sense.moves,
            sourcePoints: sense.sourcePoints,
            timeStamp: sense.timeStamp
        }), sense.gotoState(STATE_0CLICK);
    }
    function dragGesture(sense) {
        sense.inPause && (sense.inPause = !1, sense.startTimer(sense.options.holdTime)), 
        sense.dropEvt.nbFinger = sense.fingers.length, sense.dropEvt.side = sense.side, 
        sense.dropEvt.scale = sense.scale, sense.dropEvt.rotate = sense.rotate, sense.dropEvt.moves = sense.moves, 
        sense.dropEvt.sourcePoints = sense.sourcePoints, sense.dropEvt.timeStamp = sense.timeStamp, 
        sense.dropEvt.clientX = sense.clientX, sense.dropEvt.clientY = sense.clientY, sense.dropEvt.pageX = sense.pageX, 
        sense.dropEvt.pageY = sense.pageY, sense.scroll && sense.scroll.options.zoom && sense.scroll.onScrollMove(sense.pageX, sense.pageY, sense.timeStamp, sense.scale) && (sense.evtTriggered = !0), 
        sense.triggerEvent(GST_DRAG_MOVE, sense.dropEvt);
        var targetId = findDroppableSenseFromCoord(sense.clientX, sense.clientY);
        sense.dropOver != targetId && (null != sense.dropOver && (sense.triggerEvent(GST_DRAG_OVER_LEAVE, sense.dropEvt), 
        executeEvent(droppablesMap[sense.dropOver], GST_DROP_OVER_LEAVE, sense.dropEvt), 
        sense.dropOver = null), null != targetId && (sense.dropOver = targetId, sense.triggerEvent(GST_DRAG_OVER_ENTER, sense.dropEvt), 
        executeEvent(droppablesMap[targetId], GST_DROP_OVER_ENTER, sense.dropEvt))), null != sense.dropOver && executeEvent(droppablesMap[sense.dropOver], GST_DROP_MOVE, sense.dropEvt);
    }
    function continueDragGesture(sense) {
        var viewportWidth = document.documentElement.clientWidth, viewportHeight = document.documentElement.clientHeight;
        sense.finger1.clientX < sense.options.smallMove || sense.finger1.clientX > viewportWidth - sense.options.smallMove || sense.finger1.clientY < sense.options.smallMove || sense.finger1.clientY > viewportHeight - sense.options.smallMove ? (dropCancel(sense), 
        sense.gotoState(STATE_0CLICK)) : (add1FingerMove(sense), sense.fingers.length > 1 && set2FingersScaleAndRotate(sense), 
        dragGesture(sense));
    }
    function getMousePageX(evt) {
        var body = document.body;
        return evt = evt || window.event, evt.pageX || evt.clientX + (document && document.scrollLeft || body && body.scrollLeft || 0) - (document && document.clientLeft || body && body.clientLeft || 0);
    }
    function getMousePageY(evt) {
        var body = document.body;
        return evt = evt || window.event, evt.pageY || evt.clientY + (document && document.scrollTop || body && body.scrollTop || 0) - (document && document.clientTop || body && body.clientTop || 0);
    }
    function getCircleCenter(x1, y1, x2, y2, x3, y3) {
        if (y1 == y2 && y2 == y3) return null;
        var dx3, dx2, dx1, nx3, nx2, nx1, x0, y0;
        return y3 == y2 ? (dx3 = (x2 - x1) / (y2 - y1), dx2 = (x3 - x1) / (y3 - y1), nx2 = (dx2 * (x3 + x1) + (y3 + y1)) / 2, 
        nx3 = (dx3 * (x2 + x1) + (y2 + y1)) / 2, x0 = (nx2 - nx3) / (dx3 - dx2), y0 = dx3 * x0 + nx3) : y2 == y1 ? (dx1 = (x3 - x2) / (y3 - y2), 
        dx2 = (x3 - x1) / (y3 - y1), nx2 = (dx2 * (x3 + x1) + (y3 + y1)) / 2, nx1 = (dx1 * (x3 + x2) + (y3 + y2)) / 2, 
        x0 = (nx2 - nx1) / (dx1 - dx2), y0 = dx1 * x0 + nx1) : (dx3 = (x2 - x1) / (y2 - y1), 
        dx1 = (x3 - x2) / (y3 - y2), nx1 = (dx1 * (x3 + x2) + (y3 + y2)) / 2, nx3 = (dx3 * (x2 + x1) + (y2 + y1)) / 2, 
        x0 = (nx1 - nx3) / (dx3 - dx1), y0 = dx3 * x0 + nx3), [ x0, y0 ];
    }
    function Sense(element, options, scrollOpts) {
        this.id = nextUid(), this.name = this.id, this.state = STATE_0CLICK, this.createScroll = !1, 
        clearFingers(this), clearDrops(this), this.bindTouchStart = !1, this.bindTouchMove = !1, 
        this.bindTouchEnd = !1, this.bindTouchCancel = !1, this.bindMouseDown = !1, this.bindMouseOther = !1, 
        this.hasPaused = !1, this.inPause = !1, this.inMouseMove = !1, this.inTouchMove = !1, 
        this.holdTimer = null, this.scroll = null, this.checkDOMTimer = null, this.timeStamp = 0, 
        this.wheelDeltaX = 0, this.wheelDeltaY = 0, this.element = element, this.DOMelement = "object" == typeof element ? element[0] : document.getElementById(element), 
        this.destroyListener = null, this.options = {
            name: "",
            axeX: "",
            axeY: "",
            defaultAction: !1,
            bubble: !1,
            prefixPriority: !1,
            smallMove: 10,
            smallScale: .1,
            smallRotation: .25,
            doubleTime: 250,
            holdTime: 300,
            arcRadius: 500,
            axeRatio: 2.5,
            callApply: !1,
            checkDOMChanges: !1
        }, this.scrollOptions = {
            name: "",
            hScroll: scrollOpts.zoom,
            vScroll: scrollOpts.zoom
        };
        for (var optKey in options) options.hasOwnProperty(optKey) && (this.options[optKey] = options[optKey], 
        "name" == optKey && (this.name = options[optKey], this.scrollOptions.name = options[optKey]));
        for (var scrollOptKey in scrollOpts) scrollOpts.hasOwnProperty(scrollOptKey) && (this.scrollOptions[scrollOptKey] = scrollOpts[scrollOptKey], 
        this.createScroll = !0);
        ("scroll" == this.options.axeX || "scroll" == this.options.axeY) && ("scroll" == this.options.axeX && (this.scrollOptions.hScroll = !0, 
        this.createScroll = !0), "scroll" == this.options.axeY && (this.scrollOptions.vScroll = !0, 
        this.createScroll = !0)), bindOnStart(this, this.createScroll);
        var self = this;
        this.element.bind("$destroy", function() {
            self.destroy();
        }), this.createScroll && (self.scroll = new a4p.Scroll(element, self.scrollOptions)), 
        window.setTimeout(function() {
            self.sizeRefresh(), self.options.checkDOMChanges && (self.checkDOMTimer = setInterval(function() {
                self.sizeRefresh();
            }, 500));
        }, 750);
    }
    var dndables = [], dndablesMap = {}, droppables = [], droppablesMap = {}, uid = [ "0", "0", "0" ], idStr = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", idNext = {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5,
        "5": 6,
        "6": 7,
        "7": 8,
        "8": 9,
        "9": 10,
        A: 11,
        B: 12,
        C: 13,
        D: 14,
        E: 15,
        F: 16,
        G: 17,
        H: 18,
        I: 19,
        J: 20,
        K: 21,
        L: 22,
        M: 23,
        N: 24,
        O: 25,
        P: 26,
        Q: 27,
        R: 28,
        S: 29,
        T: 30,
        U: 31,
        V: 32,
        W: 33,
        X: 34,
        Y: 35,
        Z: 0
    }, mouseListeners = [], touchListeners = [], timeStampDocMouseMove = 0;
    document.addEventListener("mousemove", handleDocMouseMove, !1), document.addEventListener("mouseup", handleDocMouseUp, !1), 
    Sense.hasTouch = a4p.BrowserCapabilities.hasTouch, Sense.prototype.destroy = function() {
        null != this.destroyListener && this.destroyListener(), unbindStart(this), unbindOther(this), 
        this.checkDOMTimer && (clearInterval(this.checkDOMTimer), this.checkDOMTimer = null);
        var idx = dndables.indexOf(this.id);
        return idx >= 0 && dndables.splice(idx, 1), delete dndablesMap[this.id], idx = droppables.indexOf(this.id), 
        idx >= 0 && droppables.splice(idx, 1), delete droppablesMap[this.id], this.scroll && (this.scroll.destroy && this.scroll.destroy(), 
        this.scroll = null), !0;
    }, Sense.prototype.addHandler = function(eventName, handler) {
        this["on" + eventName] = handler;
        var self = this, baseEventName = eventNameWithoutPrefixNorNbFinger(eventName);
        if (baseEventName == GST_DROP_OVER_ENTER || baseEventName == GST_DROP_START) {
            var dropIdx = droppables.indexOf(this.id);
            0 > dropIdx && droppables.push(this.id), droppablesMap[this.id] = self;
        }
        if (baseEventName == GST_DND_START || baseEventName == GST_DND_END || baseEventName == GST_DND_CANCEL) {
            var dndIdx = dndables.indexOf(this.id);
            0 > dndIdx && dndables.push(this.id), dndablesMap[this.id] = self;
        }
    }, Sense.prototype.sizeRefresh = function() {
        if (this.scroll) {
            var self = this;
            window.setTimeout(function() {
                self.scroll && self.scroll.checkDOMChanges() && self.scroll.refresh();
            }, 300);
        }
    }, Sense.prototype.triggerEvent = function(name, evt) {
        var eventFound = executeEvent(this, name, evt);
        return eventFound && (this.evtTriggered = !0), eventFound;
    }, Sense.declareDirectives = function(directiveModule) {
        for (var allEvents = [], evtIdx = 0, evtNb = Sense.ALL_EVENTS.length; evtNb > evtIdx; evtIdx++) {
            var name = Sense.ALL_EVENTS[evtIdx];
            allEvents.push(name), allEvents.push("Short" + name), allEvents.push("Long" + name);
            for (var i = 1; 5 >= i; i++) allEvents.push(name + i), allEvents.push("Short" + name + i), 
            allEvents.push("Long" + name + i);
        }
        angular.forEach(allEvents, function(name) {
            var directiveName = "sense" + name.charAt(0).toUpperCase() + name.slice(1).toLowerCase(), eventName = name.charAt(0).toUpperCase() + name.slice(1);
            directiveModule.directive(directiveName, [ "$parse", "$rootScope", function($parse, $rootScope) {
                return function(scope, element, attr) {
                    var sense = element.data("sense");
                    if (a4p.isUndefined(sense)) {
                        sense = Sense.newSense($parse, $rootScope, scope, element, attr);
                        var initFn = $parse(sense.options.init);
                        initFn(scope, {
                            $sense: sense
                        });
                    }
                    var fn = $parse(attr[directiveName]);
                    sense.addHandler(eventName, function(event) {
                        sense.options.callApply ? a4p.safeApply(scope, function() {
                            fn(scope, {
                                $event: event,
                                $element: element
                            });
                        }) : fn(scope, {
                            $event: event,
                            $element: element
                        });
                    });
                };
            } ]);
        }), directiveModule.directive("senseOpts", [ "$parse", "$rootScope", function($parse, $rootScope) {
            return function(scope, element, attr) {
                var sense = element.data("sense");
                if (a4p.isUndefined(sense)) {
                    sense = Sense.newSense($parse, $rootScope, scope, element, attr);
                    var initFn = $parse(sense.options.init);
                    initFn(scope, {
                        $sense: sense
                    });
                }
            };
        } ]), directiveModule.directive("senseScrollopts", [ "$parse", "$rootScope", function($parse, $rootScope) {
            return function(scope, element, attr) {
                var sense = element.data("sense");
                if (a4p.isUndefined(sense)) {
                    sense = Sense.newSense($parse, $rootScope, scope, element, attr);
                    var initFn = $parse(sense.options.init);
                    initFn(scope, {
                        $sense: sense
                    });
                }
            };
        } ]), directiveModule.directive("senseLoop", [ "$parse", function($parse) {
            return function(scope, element, attr) {
                var senseWrapper, list = element[0], parent = element[0].parentNode;
                if (a4p.isDefinedAndNotNull(parent)) for (senseWrapper = angular.element(parent).data("sense"); a4p.isUndefined(senseWrapper) && a4p.isDefinedAndNotNull(parent.parentNode); ) parent = parent.parentNode, 
                senseWrapper = angular.element(parent).data("sense");
                if (a4p.isDefinedAndNotNull(senseWrapper)) {
                    var scrollOptions;
                    scrollOptions = a4p.isDefinedAndNotNull(senseWrapper.scroll) ? senseWrapper.scroll.options : senseWrapper.scrollOptions;
                    var callApply = attr.callApply, onElementMove = $parse(attr.onElementMove);
                    scrollOptions.hScrollbar = !1, scrollOptions.vScrollbar = !1, scrollOptions.virtualLoop = !0, 
                    scrollOptions.bounce = !1, scrollOptions.virtualLoop = !0, scrollOptions.onBeforeScrollMove = function(deltaX, deltaY) {
                        var first, last, nb, initX = senseWrapper.scroll.options.x || 0, initY = senseWrapper.scroll.options.y || 0;
                        if (this.y + deltaY > initY) {
                            last = list.children[list.children.length - 1];
                            var lastHeight = last.offsetHeight;
                            nb = Math.round((this.y + deltaY - initY) / lastHeight), nb > 0 && (this.y -= nb * lastHeight, 
                            callApply ? a4p.safeApply(scope, function() {
                                onElementMove(scope, {
                                    $side: "top",
                                    $nb: nb
                                });
                            }) : onElementMove(scope, {
                                $side: "top",
                                $nb: nb
                            }));
                        } else if (this.y + deltaY < initY) {
                            first = list.children[0];
                            var firstHeight = first.offsetHeight;
                            nb = Math.round((initY - this.y - deltaY) / firstHeight), nb > 0 && (this.y += nb * firstHeight, 
                            callApply ? a4p.safeApply(scope, function() {
                                onElementMove(scope, {
                                    $side: "bottom",
                                    $nb: nb
                                });
                            }) : onElementMove(scope, {
                                $side: "bottom",
                                $nb: nb
                            }));
                        }
                        if (this.x + deltaX > initX) {
                            last = list.children[list.children.length - 1];
                            var lastWidth = last.offsetWidth;
                            nb = Math.round((this.x + deltaX - initX) / lastWidth), nb > 0 && (this.x -= nb * lastWidth, 
                            callApply ? a4p.safeApply(scope, function() {
                                onElementMove(scope, {
                                    $side: "left",
                                    $nb: nb
                                });
                            }) : onElementMove(scope, {
                                $side: "left",
                                $nb: nb
                            }));
                        } else if (this.x + deltaX < initX) {
                            first = list.children[0];
                            var firstWidth = first.offsetWidth;
                            nb = Math.round((initX - this.x - deltaX) / firstWidth), nb > 0 && (this.x += nb * firstWidth, 
                            callApply ? a4p.safeApply(scope, function() {
                                onElementMove(scope, {
                                    $side: "right",
                                    $nb: nb
                                });
                            }) : onElementMove(scope, {
                                $side: "right",
                                $nb: nb
                            }));
                        }
                    };
                }
            };
        } ]);
    }, Sense.newSense = function($parse, $rootScope, scope, element, attr) {
        var sense, opts = {}, scrollOpts = {};
        if (a4p.isDefined(attr.senseOpts) && (opts = $parse(attr.senseOpts)(scope, {})), 
        a4p.isDefined(attr.senseScrollopts) && (scrollOpts = $parse(attr.senseScrollopts)(scope, {})), 
        sense = new a4p.Sense(element, opts, scrollOpts), element.data("sense", sense), 
        scope.getSenseId = function() {
            return sense.id;
        }, scope.getSenseName = function() {
            return sense.name;
        }, sense.createScroll) {
            if (scope.senseScrollToElement = function(eltQuery, timeMs) {
                sense.scroll.scrollToElement(eltQuery, timeMs);
            }, scope.senseScrollToPage = function(pageX, pageY, timeMs) {
                sense.scroll.scrollToPage(pageX, pageY, timeMs);
            }, scope.senseScrollTo = function(x, y, timeMs, relative) {
                sense.scroll.scrollTo(x, y, timeMs, relative);
            }, scope.scrollRefresh = function() {
                sense.sizeRefresh();
            }, attr.senseAfterscrollend) {
                var scrollOptions;
                scrollOptions = a4p.isDefinedAndNotNull(sense.scroll) ? sense.scroll.options : sense.scrollOptions;
                var fn = $parse(attr.senseAfterscrollend);
                scrollOptions.onAfterScrollEnd = sense.options.callApply ? function() {
                    var x = this.x, y = this.y;
                    a4p.safeApply(scope, function() {
                        fn(scope, {
                            $x: x,
                            $y: y
                        });
                    });
                } : function() {
                    var x = this.x, y = this.y;
                    fn(scope, {
                        $x: x,
                        $y: y
                    });
                };
            }
            var resize = element.data("resize");
            a4p.isUndefined(resize) && (resize = a4p.Resize.newResize($parse, $rootScope, scope, element, attr)), 
            resize.toSenseWindow = function() {
                sense.sizeRefresh();
            }, resize.toSenseChanged = function() {
                sense.sizeRefresh();
            };
        }
        if (a4p.isDefined(sense.options.watchRefresh)) if ("string" == typeof sense.options.watchRefresh) scope.$watch(sense.options.watchRefresh, function(newValue, oldValue) {
            newValue !== oldValue && sense.sizeRefresh();
        }); else for (var i = 0, nb = sense.options.watchRefresh.length; nb > i; i++) scope.$watch(sense.options.watchRefresh[i], function(newValue, oldValue) {
            newValue !== oldValue && sense.sizeRefresh();
        });
        return sense.sizeRefresh(), sense;
    };
    var EVT_TOUCH_START = "Touchstart", EVT_TOUCH_MOVE = "Touchmove", EVT_TOUCH_END = "Touchend", EVT_TOUCH_CANCEL = "Touchcancel", EVT_MOUSE_DOWN = "Mousedown", EVT_MOUSE_MOVE = "Mousemove", EVT_MOUSE_UP = "Mouseup", GST_HOLD_START = "HoldStart", GST_HOLD_STOP = "HoldStop", GST_TAP = "Tap", GST_DOUBLE_TAP = "DoubleTap", GST_DRAG_OVER_ENTER = "DragOverEnter", GST_DRAG_OVER_LEAVE = "DragOverLeave", GST_DRAG_START = "DragStart", GST_DRAG_PAUSE = "DragPause", GST_DRAG_MOVE = "DragMove", GST_DRAG_END = "DragEnd", GST_DRAG_CANCEL = "DragCancel", GST_DROP_OVER_ENTER = "DropOverEnter", GST_DROP_OVER_LEAVE = "DropOverLeave", GST_DROP_START = "DropStart", GST_DROP_MOVE = "DropMove", GST_DROP_END = "DropEnd", GST_DROP_CANCEL = "DropCancel", GST_DND_START = "DndStart", GST_DND_END = "DndEnd", GST_DND_CANCEL = "DndCancel", GST_SWIPE_START = "SwipeStart", GST_SWIPE_PAUSE = "SwipePause", GST_SWIPE_MOVE = "SwipeMove", GST_SWIPE_END = "SwipeEnd", GST_SWIPE_CANCEL = "SwipeCancel", GST_SCROLL_START = "ScrollStart", GST_SCROLL_PAUSE = "ScrollPause", GST_SCROLL_MOVE = "ScrollMove", GST_SCROLL_END = "ScrollEnd", GST_SCROLL_CANCEL = "ScrollCancel";
    Sense.ALL_EVENTS = [ EVT_TOUCH_START, EVT_TOUCH_MOVE, EVT_TOUCH_END, EVT_TOUCH_CANCEL, EVT_MOUSE_DOWN, EVT_MOUSE_MOVE, EVT_MOUSE_UP, GST_TAP, GST_DOUBLE_TAP, GST_HOLD_START, GST_HOLD_STOP, GST_DRAG_OVER_ENTER, GST_DRAG_OVER_LEAVE, GST_DRAG_START, GST_DRAG_PAUSE, GST_DRAG_MOVE, GST_DRAG_END, GST_DRAG_CANCEL, GST_DND_START, GST_DND_END, GST_DND_CANCEL, GST_DROP_OVER_ENTER, GST_DROP_OVER_LEAVE, GST_DROP_START, GST_DROP_MOVE, GST_DROP_END, GST_DROP_CANCEL, GST_SWIPE_START, GST_SWIPE_PAUSE, GST_SWIPE_MOVE, GST_SWIPE_END, GST_SWIPE_CANCEL, GST_SCROLL_START, GST_SCROLL_PAUSE, GST_SCROLL_MOVE, GST_SCROLL_END, GST_SCROLL_CANCEL ];
    var STATE_0CLICK = "0click", STATE_1DOWN = "1down", STATE_1CLICK = "1click", STATE_2DOWN = "2down", STATE_SWIPING = "swiping", STATE_SCROLLING = "scrolling", STATE_DRAGGING = "dragging", onEnter = {}, onExit = {}, onTimeout = {}, onTouchStart = {}, onTouchMove = {}, onTouchEnd = {}, onTouchCancel = {}, onMouseDown = {}, onMouseMove = {}, onMouseUp = {};
    return Sense.prototype.resetState = function() {
        this.clearTimeout(), clearDrops(this), unbindOther(this), this.hasPaused = !1, this.inPause = !1, 
        this.inMouseMove = !1, this.inTouchMove = !1, this.evtHandled = !1, this.evtTriggered = !1, 
        this.state = STATE_0CLICK, onEnter[STATE_0CLICK].call(this);
    }, Sense.prototype.gotoState = function(state) {
        onExit[this.state].call(this), this.state = state, onEnter[this.state].call(this);
    }, Sense.prototype.handleTimeout = function() {
        this.holdTimer = null, onTimeout[this.state].call(this);
    }, Sense.prototype.clearTimeout = function() {
        null != this.holdTimer && (clearTimeout(this.holdTimer), this.holdTimer = null);
    }, Sense.prototype.startTimer = function(ms) {
        null != this.holdTimer && clearTimeout(this.holdTimer);
        var self = this;
        this.holdTimer = window.setTimeout(function() {
            self.handleTimeout();
        }, ms);
    }, onEnter[STATE_0CLICK] = function() {
        this.hasPaused = !1, this.inPause = !1, clearFingers(this);
    }, onExit[STATE_0CLICK] = function() {}, onTimeout[STATE_0CLICK] = function() {}, 
    onTouchStart[STATE_0CLICK] = function(evt) {
        if (this.fingers.length <= 0) {
            this.evtHandled = !0;
            for (var i = 0; i < evt.changedTouches.length; i++) {
                var finger = evt.changedTouches[i], id = finger.identifier;
                addTouchFinger(this, id, finger);
            }
            addSourcePoint(this);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_START, evt), 
        this.gotoState(STATE_1DOWN));
    }, onTouchMove[STATE_0CLICK] = function() {}, onTouchEnd[STATE_0CLICK] = function(evt) {
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_END, evt));
    }, onTouchCancel[STATE_0CLICK] = function(evt) {
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_CANCEL, evt));
    }, onMouseDown[STATE_0CLICK] = function(evt) {
        if (this.fingers.length <= 0) {
            this.evtHandled = !0;
            var id = "mouse" + (evt.which || 0);
            addMouseFinger(this, id, evt), addSourcePoint(this);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_DOWN, evt), 
        this.gotoState(STATE_1DOWN));
    }, onMouseMove[STATE_0CLICK] = function() {}, onMouseUp[STATE_0CLICK] = function(evt) {
        var id = "mouse" + (evt.which || 0);
        removeFinger(this, id) && (this.evtHandled = !0), this.evtHandled && (evt.nbFinger = this.fingers.length, 
        this.triggerEvent(EVT_MOUSE_UP, evt));
    }, onEnter[STATE_1DOWN] = function() {
        this.inPause = !1, this.startTimer(this.options.holdTime);
    }, onExit[STATE_1DOWN] = function() {
        this.clearTimeout();
    }, onTimeout[STATE_1DOWN] = function() {
        startHoldGesture(this), this.inPause = !0, this.hasPaused = !0;
    }, onTouchStart[STATE_1DOWN] = function(evt) {
        this.evtHandled = !0, this.inPause || this.startTimer(this.options.holdTime);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            addTouchFinger(this, id, finger);
        }
        evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_START, evt);
    }, onTouchMove[STATE_1DOWN] = function(evt) {
        this.inPause && (this.clearTimeout(), stopHoldGesture(this), this.inPause = !1);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            hasFinger(this, id) && (this.evtHandled = !0, setTouchFinger(this, id, finger), 
            this.finger1.id == id && addSourcePoint(this));
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_MOVE, evt), 
        startGestureIfMoves(this));
    }, onTouchEnd[STATE_1DOWN] = function(evt) {
        this.inPause && (this.clearTimeout(), stopHoldGesture(this), this.inPause = !1);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        if (this.evtHandled) {
            evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_END, evt);
            var onEventName = onWhichEvent(this, GST_DOUBLE_TAP, evt.nbFinger);
            onEventName.length > 0 ? this.gotoState(STATE_1CLICK) : (tapGesture(this), this.gotoState(STATE_0CLICK));
        }
    }, onTouchCancel[STATE_1DOWN] = function(evt) {
        this.inPause && (this.clearTimeout(), stopHoldGesture(this), this.inPause = !1);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_CANCEL, evt), 
        this.gotoState(STATE_0CLICK));
    }, onMouseDown[STATE_1DOWN] = function(evt) {
        this.evtHandled = !0, this.inPause || this.startTimer(this.options.holdTime);
        var id = "mouse" + (evt.which || 0);
        addMouseFinger(this, id, evt), evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_DOWN, evt);
    }, onMouseMove[STATE_1DOWN] = function(evt) {
        this.inPause && (this.clearTimeout(), stopHoldGesture(this), this.inPause = !1);
        var id = "mouse" + (evt.which || 0);
        hasFinger(this, id) && (this.evtHandled = !0, setMouseFinger(this, id, evt), this.finger1.id == id && addSourcePoint(this)), 
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_MOVE, evt), 
        startGestureIfMoves(this));
    }, onMouseUp[STATE_1DOWN] = function(evt) {
        this.inPause && (this.clearTimeout(), stopHoldGesture(this), this.inPause = !1);
        var id = "mouse" + (evt.which || 0);
        if (removeFinger(this, id) && (this.evtHandled = !0), this.evtHandled) {
            evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_UP, evt);
            var onEventName = onWhichEvent(this, GST_DOUBLE_TAP, evt.nbFinger);
            onEventName.length > 0 ? this.gotoState(STATE_1CLICK) : (tapGesture(this), this.gotoState(STATE_0CLICK));
        }
    }, onEnter[STATE_1CLICK] = function() {
        this.startTimer(this.options.doubleTime);
    }, onExit[STATE_1CLICK] = function() {
        this.clearTimeout();
    }, onTimeout[STATE_1CLICK] = function() {
        tapGesture(this), this.gotoState(STATE_0CLICK);
    }, onTouchStart[STATE_1CLICK] = function(evt) {
        if (this.fingers.length <= 0) {
            this.evtHandled = !0;
            for (var i = 0; i < evt.changedTouches.length; i++) {
                var finger = evt.changedTouches[i], id = finger.identifier;
                addTouchFinger(this, id, finger);
            }
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_START, evt), 
        this.gotoState(STATE_2DOWN));
    }, onTouchMove[STATE_1CLICK] = function() {}, onTouchEnd[STATE_1CLICK] = function(evt) {
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_END, evt));
    }, onTouchCancel[STATE_1CLICK] = function(evt) {
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_CANCEL, evt));
    }, onMouseDown[STATE_1CLICK] = function(evt) {
        if (this.fingers.length <= 0) {
            this.evtHandled = !0;
            var id = "mouse" + (evt.which || 0);
            addMouseFinger(this, id, evt);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_DOWN, evt), 
        this.gotoState(STATE_2DOWN));
    }, onMouseMove[STATE_1CLICK] = function() {}, onMouseUp[STATE_1CLICK] = function(evt) {
        var id = "mouse" + (evt.which || 0);
        removeFinger(this, id) && (this.evtHandled = !0), this.evtHandled && (evt.nbFinger = this.fingers.length, 
        this.triggerEvent(EVT_MOUSE_UP, evt));
    }, onEnter[STATE_2DOWN] = function() {}, onExit[STATE_2DOWN] = function() {}, onTimeout[STATE_2DOWN] = function() {}, 
    onTouchStart[STATE_2DOWN] = function(evt) {
        this.evtHandled = !0;
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            addTouchFinger(this, id, finger);
        }
        evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_START, evt);
    }, onTouchMove[STATE_2DOWN] = function(evt) {
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            hasFinger(this, id) && (this.evtHandled = !0, setTouchFinger(this, id, finger), 
            this.finger1.id == id && addSourcePoint(this));
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_MOVE, evt), 
        tapAndStartGestureIfMoves(this));
    }, onTouchEnd[STATE_2DOWN] = function(evt) {
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_END, evt), 
        this.triggerEvent(GST_DOUBLE_TAP, {
            clientX: this.finger1.clientX,
            clientY: this.finger1.clientY,
            pageX: this.finger1.pageX,
            pageY: this.finger1.pageY,
            nbFinger: this.fingers.length
        }), this.gotoState(STATE_0CLICK));
    }, onTouchCancel[STATE_2DOWN] = function(evt) {
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_CANCEL, evt), 
        tapGesture(this), this.gotoState(STATE_0CLICK));
    }, onMouseDown[STATE_2DOWN] = function(evt) {
        this.evtHandled = !0;
        var id = "mouse" + (evt.which || 0);
        addMouseFinger(this, id, evt), evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_DOWN, evt);
    }, onMouseMove[STATE_2DOWN] = function(evt) {
        var id = "mouse" + (evt.which || 0);
        hasFinger(this, id) && (this.evtHandled = !0, setMouseFinger(this, id, evt), this.finger1.id == id && addSourcePoint(this)), 
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_MOVE, evt), 
        tapAndStartGestureIfMoves(this));
    }, onMouseUp[STATE_2DOWN] = function(evt) {
        var id = "mouse" + (evt.which || 0);
        removeFinger(this, id) && (this.evtHandled = !0), this.evtHandled && (evt.nbFinger = this.fingers.length, 
        this.triggerEvent(EVT_MOUSE_UP, evt), this.triggerEvent(GST_DOUBLE_TAP, {
            clientX: this.finger1.clientX,
            clientY: this.finger1.clientY,
            pageX: this.finger1.pageX,
            pageY: this.finger1.pageY,
            nbFinger: this.fingers.length
        }), this.gotoState(STATE_0CLICK));
    }, onEnter[STATE_SWIPING] = function() {
        this.inPause = !1, this.startTimer(this.options.holdTime);
    }, onExit[STATE_SWIPING] = function() {
        this.clearTimeout();
    }, onTimeout[STATE_SWIPING] = function() {
        this.triggerEvent(GST_SWIPE_PAUSE, {
            clientX: this.finger1.clientX,
            clientY: this.finger1.clientY,
            pageX: this.finger1.pageX,
            pageY: this.finger1.pageY,
            nbFinger: this.fingers.length,
            side: this.side,
            moves: this.moves,
            sourcePoints: this.sourcePoints,
            timeStamp: this.timeStamp
        }), this.inPause = !0;
    }, onTouchStart[STATE_SWIPING] = function(evt) {
        this.evtHandled = !0, this.inPause || this.startTimer(this.options.holdTime);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            addTouchFinger(this, id, finger);
        }
        evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_START, evt);
    }, onTouchMove[STATE_SWIPING] = function(evt) {
        this.inPause || this.startTimer(this.options.holdTime);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            hasFinger(this, id) && (this.evtHandled = !0, setTouchFinger(this, id, finger), 
            this.finger1.id == id && addSourcePoint(this));
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_MOVE, evt), 
        continueSwipeGesture(this));
    }, onTouchEnd[STATE_SWIPING] = function(evt) {
        this.inPause || this.clearTimeout();
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_END, evt), 
        endSwipeGesture(this));
    }, onTouchCancel[STATE_SWIPING] = function(evt) {
        this.inPause || this.clearTimeout();
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_CANCEL, evt), 
        cancelSwipeGesture(this));
    }, onMouseDown[STATE_SWIPING] = function(evt) {
        this.evtHandled = !0, this.inPause || this.startTimer(this.options.holdTime);
        var id = "mouse" + (evt.which || 0);
        addMouseFinger(this, id, evt), evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_DOWN, evt);
    }, onMouseMove[STATE_SWIPING] = function(evt) {
        this.inPause || this.startTimer(this.options.holdTime);
        var id = "mouse" + (evt.which || 0);
        hasFinger(this, id) && (this.evtHandled = !0, setMouseFinger(this, id, evt), this.finger1.id == id && addSourcePoint(this)), 
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_MOVE, evt), 
        continueSwipeGesture(this));
    }, onMouseUp[STATE_SWIPING] = function(evt) {
        this.inPause || this.clearTimeout();
        var id = "mouse" + (evt.which || 0);
        removeFinger(this, id) && (this.evtHandled = !0), this.evtHandled && (evt.nbFinger = this.fingers.length, 
        this.triggerEvent(EVT_MOUSE_UP, evt), endSwipeGesture(this));
    }, onEnter[STATE_SCROLLING] = function() {
        this.inPause = !1, this.startTimer(this.options.holdTime);
    }, onExit[STATE_SCROLLING] = function() {
        this.clearTimeout();
    }, onTimeout[STATE_SCROLLING] = function() {
        this.triggerEvent(GST_SCROLL_PAUSE, {
            clientX: this.finger1.clientX,
            clientY: this.finger1.clientY,
            pageX: this.finger1.pageX,
            pageY: this.finger1.pageY,
            nbFinger: this.fingers.length,
            side: this.side,
            moves: this.moves,
            sourcePoints: this.sourcePoints,
            timeStamp: this.timeStamp
        }), this.inPause = !0;
    }, onTouchStart[STATE_SCROLLING] = function(evt) {
        this.evtHandled = !0, this.inPause || this.startTimer(this.options.holdTime);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            addTouchFinger(this, id, finger);
        }
        evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_START, evt);
    }, onTouchMove[STATE_SCROLLING] = function(evt) {
        this.inPause || this.startTimer(this.options.holdTime);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            hasFinger(this, id) && (this.evtHandled = !0, setTouchFinger(this, id, finger), 
            this.finger1.id == id && addSourcePoint(this));
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_MOVE, evt), 
        continueScrollGesture(this));
    }, onTouchEnd[STATE_SCROLLING] = function(evt) {
        this.inPause || this.clearTimeout();
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_END, evt), 
        endScrollGesture(this));
    }, onTouchCancel[STATE_SCROLLING] = function(evt) {
        this.inPause || this.clearTimeout();
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_CANCEL, evt), 
        cancelScrollGesture(this));
    }, onMouseDown[STATE_SCROLLING] = function(evt) {
        this.evtHandled = !0, this.inPause || this.startTimer(this.options.holdTime);
        var id = "mouse" + (evt.which || 0);
        addMouseFinger(this, id, evt), evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_DOWN, evt);
    }, onMouseMove[STATE_SCROLLING] = function(evt) {
        this.inPause || this.startTimer(this.options.holdTime);
        var id = "mouse" + (evt.which || 0);
        hasFinger(this, id) && (this.evtHandled = !0, setMouseFinger(this, id, evt), this.finger1.id == id && addSourcePoint(this)), 
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_MOVE, evt), 
        continueScrollGesture(this));
    }, onMouseUp[STATE_SCROLLING] = function(evt) {
        this.inPause || this.clearTimeout();
        var id = "mouse" + (evt.which || 0);
        removeFinger(this, id) && (this.evtHandled = !0), this.evtHandled && (evt.nbFinger = this.fingers.length, 
        this.triggerEvent(EVT_MOUSE_UP, evt), endScrollGesture(this));
    }, onEnter[STATE_DRAGGING] = function() {
        clearDrops(this), this.inPause = !1, this.startTimer(this.options.holdTime);
    }, onExit[STATE_DRAGGING] = function() {
        this.clearTimeout();
    }, onTimeout[STATE_DRAGGING] = function() {
        this.triggerEvent(GST_DRAG_PAUSE, {
            clientX: this.finger1.clientX,
            clientY: this.finger1.clientY,
            pageX: this.finger1.pageX,
            pageY: this.finger1.pageY,
            nbFinger: this.fingers.length,
            side: this.side,
            moves: this.moves,
            sourcePoints: this.sourcePoints,
            timeStamp: this.timeStamp
        }), this.inPause = !0;
    }, onTouchStart[STATE_DRAGGING] = function(evt) {
        this.evtHandled = !0, this.inPause || this.startTimer(this.options.holdTime);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            addTouchFinger(this, id, finger);
        }
        evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_START, evt);
    }, onTouchMove[STATE_DRAGGING] = function(evt) {
        this.inPause || this.startTimer(this.options.holdTime);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            hasFinger(this, id) && (this.evtHandled = !0, setTouchFinger(this, id, finger), 
            this.finger1.id == id && addSourcePoint(this));
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_MOVE, evt), 
        continueDragGesture(this));
    }, onTouchEnd[STATE_DRAGGING] = function(evt) {
        this.inPause || this.clearTimeout();
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            if (hasFinger(this, id)) {
                this.evtHandled = !0;
                break;
            }
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_END, evt), 
        dropStart(this), dropEnd(this), this.gotoState(STATE_0CLICK));
    }, onTouchCancel[STATE_DRAGGING] = function(evt) {
        this.inPause || this.clearTimeout();
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_CANCEL, evt), 
        dropCancel(this), this.gotoState(STATE_0CLICK));
    }, onMouseDown[STATE_DRAGGING] = function(evt) {
        this.evtHandled = !0, this.inPause || this.startTimer(this.options.holdTime);
        var id = "mouse" + (evt.which || 0);
        addMouseFinger(this, id, evt), evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_DOWN, evt);
    }, onMouseMove[STATE_DRAGGING] = function(evt) {
        this.inPause || this.startTimer(this.options.holdTime);
        var id = "mouse" + (evt.which || 0);
        hasFinger(this, id) && (this.evtHandled = !0, setMouseFinger(this, id, evt), this.finger1.id == id && addSourcePoint(this)), 
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_MOVE, evt), 
        continueDragGesture(this));
    }, onMouseUp[STATE_DRAGGING] = function(evt) {
        this.inPause || this.clearTimeout();
        var id = "mouse" + (evt.which || 0);
        hasFinger(this, id) && (this.evtHandled = !0), this.evtHandled && (evt.nbFinger = this.fingers.length, 
        this.triggerEvent(EVT_MOUSE_UP, evt), dropStart(this), dropEnd(this), this.gotoState(STATE_0CLICK));
    }, Sense;
}(navigator, window, document);

var a4p;

a4p || (a4p = {}), a4p.Sha1 = function() {
    function rstr2binb(input) {
        for (var output = new Array(input.length >> 2), i = 0; i < output.length; i++) output[i] = 0;
        for (var j = 0; j < 8 * input.length; j += 8) output[j >> 5] |= (255 & input.charCodeAt(j / 8)) << 24 - j % 32;
        return output;
    }
    function binb2rstr(input) {
        for (var output = "", i = 0; i < 32 * input.length; i += 8) output += String.fromCharCode(255 & input[i >> 5] >>> 24 - i % 32);
        return output;
    }
    function binb_sha1(x, len) {
        x[len >> 5] |= 128 << 24 - len % 32, x[(len + 64 >> 9 << 4) + 15] = len;
        for (var w = new Array(80), a = 1732584193, b = -271733879, c = -1732584194, d = 271733878, e = -1009589776, i = 0; i < x.length; i += 16) {
            for (var olda = a, oldb = b, oldc = c, oldd = d, olde = e, j = 0; 80 > j; j++) {
                w[j] = 16 > j ? x[i + j] : bit_rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
                var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));
                e = d, d = c, c = bit_rol(b, 30), b = a, a = t;
            }
            a = safe_add(a, olda), b = safe_add(b, oldb), c = safe_add(c, oldc), d = safe_add(d, oldd), 
            e = safe_add(e, olde);
        }
        return [ a, b, c, d, e ];
    }
    function sha1_ft(t, b, c, d) {
        return 20 > t ? b & c | ~b & d : 40 > t ? b ^ c ^ d : 60 > t ? b & c | b & d | c & d : b ^ c ^ d;
    }
    function sha1_kt(t) {
        return 20 > t ? 1518500249 : 40 > t ? 1859775393 : 60 > t ? -1894007588 : -899497514;
    }
    function safe_add(x, y) {
        var lsw = (65535 & x) + (65535 & y), msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return msw << 16 | 65535 & lsw;
    }
    function bit_rol(num, cnt) {
        return num << cnt | num >>> 32 - cnt;
    }
    var Sha1 = {};
    return Sha1.hash = function(input) {
        var s = a4p.Utf8.encode(input);
        return binb2rstr(binb_sha1(rstr2binb(s), 8 * s.length));
    }, Sha1.key256 = function(password) {
        var nBytes = 32, halfLen = password.length / 2, hash1 = a4p.Sha1.hash(password.substr(0, halfLen)), hash2 = a4p.Sha1.hash(password.substr(halfLen));
        return hash1.substr(0, 16) + hash2.substr(0, nBytes - 16);
    }, Sha1;
}();

var a4p;

a4p || (a4p = {}), a4p.MemoryStorage = function() {
    function Storage() {
        this.keyes = [], this.set = {}, this.length = 0;
    }
    return Storage.prototype.clear = function() {
        this.keyes = [], this.set = {}, this.length = 0;
    }, Storage.prototype.key = function(idx) {
        return this.keyes[idx];
    }, Storage.prototype.getItem = function(key) {
        return a4p.isUndefined(this.set[key]) ? null : this.set[key];
    }, Storage.prototype.setItem = function(key, value) {
        this.set[key] = value;
        for (var i = 0; i < this.keyes.length; i++) if (this.keyes[i] == key) return;
        this.keyes.push(key), this.length = this.keyes.length;
    }, Storage.prototype.removeItem = function(key) {
        delete this.set[key];
        for (var i = 0; i < this.keyes.length; i++) this.keyes[i] == key && (this.keyes.splice(i, 1), 
        this.length = this.keyes.length);
    }, Storage;
}(), a4p.LocalStorageFactory = function(storageService) {
    function LocalStorage() {
        if (this.version = "0.1", !a4p.Xml) throw new Error("a4p.Xml needs to be loaded before a4p.LocalStorage!");
        if (!a4p.Json) throw new Error("a4p.Json needs to be loaded before a4p.LocalStorage!");
        if (!a4p.Xml.isXml || !a4p.Xml.xml2String || !a4p.Xml.string2Xml) throw new Error("a4p.Xml with isXml(), xml2String() and string2Xml() needs to be loaded before a4p.LocalStorage!");
        if (!a4p.Json.object2String || !a4p.Json.string2Object) throw new Error("a4p.Json with object2String() and string2Object() needs to be loaded before a4p.LocalStorage!");
    }
    function checkKey(key) {
        if (!key || "string" != typeof key) throw new TypeError("Key type must be string");
        return !0;
    }
    var storage = storageService || window.localStorage;
    if (!storage) throw new Error("a4p.LocalStorageFactory needs a storageService!");
    return LocalStorage.prototype.set = function(key, value) {
        checkKey(key);
        var t = typeof value;
        if ("undefined" == t) value = "null"; else if (null == value) value = "null"; else if (a4p.Xml.isXml(value)) value = a4p.Json.object2String({
            xml: a4p.Xml.xml2String(value)
        }); else if ("string" == t) value = a4p.Json.object2String({
            string: value
        }); else if ("number" == t) value = a4p.Json.object2String({
            number: value
        }); else if ("boolean" == t) value = a4p.Json.object2String({
            bool: value
        }); else {
            if ("object" != t) throw new TypeError("Value type " + t + " is invalid. It must be null, undefined, xml, string, number, boolean or object");
            value = a4p.Json.object2String({
                json: value
            });
        }
        return storage.setItem(key, value), value;
    }, LocalStorage.prototype.get = function(key, def) {
        checkKey(key);
        var item = storage.getItem(key);
        if (null != item) {
            if ("null" == item) return null;
            var value = a4p.Json.string2Object(item);
            return "xml" in value ? a4p.Xml.string2Xml(value.xml) : "string" in value ? value.string : "number" in value ? value.number.valueOf() : "bool" in value ? value.bool.valueOf() : value.json;
        }
        return a4p.isUndefined(def) ? null : def;
    }, LocalStorage.prototype.remove = function(key) {
        checkKey(key);
        var existed = null != storage.getItem(key);
        return storage.removeItem(key), existed;
    }, LocalStorage.prototype.clear = function() {
        var existed = storage.length > 0;
        return storage.clear(), existed;
    }, LocalStorage.prototype.size = function() {
        return storage.length;
    }, LocalStorage.prototype.foreach = function(f, context) {
        for (var n = storage.length, i = 0; n > i; i++) {
            var key = storage.key(i), value = this.get(key);
            context ? f.call(context, value) : f(value);
        }
        return n;
    }, LocalStorage;
}, a4p.FileStorage = function() {
    function FileStorage($q, $rootScope) {
        this.version = "0.1", this.q = $q, this.rootScope = $rootScope, this.grantedBytes = 0, 
        this.fs = null, this.urlPrefix = "", this.storageType = null, this.initDone = !1, 
        this.initPromises = [], this.initTimer = null;
    }
    function initEnd(self) {
        a4p.safeApply(self.rootScope, function() {
            for (var i = 0; i < self.initPromises.length; i++) self.initTrigger(self.initPromises[i]);
            self.initDone = !0, self.initPromises = [], self.initTimer = null;
        });
    }
    function launchEnd(self) {
        null == self.initTimer && (self.initTimer = setTimeout(function() {
            initEnd(self);
        }, 100));
    }
    function tryQuota(self, grantBytes) {
        try {
            var fctOnSuccess = function(fs) {
                a4p.InternalLog.log("a4p.FileStorage", "opened file system " + fs.name), self.fs = fs, 
                self.urlPrefix = "";
                var pattern = /^(https?)_([^_]+)_(\d+):Persistent$/;
                if (pattern.test(fs.name)) {
                    var name = fs.name;
                    name = name.replace(pattern, "$1://$2:$3"), name = name.replace(/^(.*):0$/, "$1"), 
                    self.urlPrefix = "filesystem:" + name + "/persistent";
                }
                a4p.InternalLog.log("a4p.FileStorage", "urlPrefix = " + self.urlPrefix), self.initTrigger = function(deferred) {
                    deferred.resolve();
                }, launchEnd(self);
            }, fctOnFailure = function(fileError) {
                if (fileError.code == FileError.QUOTA_EXCEEDED_ERR) setTimeout(function() {
                    tryQuota(self, grantBytes / 2);
                }, 100); else {
                    var message = "requestFileSystem failure : " + errorMessage(fileError);
                    self.initTrigger = function(deferred) {
                        deferred.reject(message);
                    }, launchEnd(self);
                }
            }, requestFs = function(grantedBytes) {
                try {
                    a4p.isDefined(window.requestFileSystem) ? window.requestFileSystem(self.storageType, grantedBytes, fctOnSuccess, fctOnFailure) : window.webkitRequestFileSystem(self.storageType, grantedBytes, fctOnSuccess, fctOnFailure);
                } catch (e) {
                    var message = e.message;
                    self.initTrigger = function(deferred) {
                        deferred.reject(message);
                    }, launchEnd(self);
                }
            };
            a4p.isDefined(window.webkitPersistentStorage) ? a4p.isDefined(window.webkitPersistentStorage.requestQuota) ? window.webkitPersistentStorage.requestQuota(grantBytes, function(grantedBytes) {
                self.grantedBytes = grantedBytes, requestFs(grantedBytes);
            }, function(fileError) {
                if (fileError.code == FileError.QUOTA_EXCEEDED_ERR) setTimeout(function() {
                    tryQuota(self, grantBytes / 2);
                }, 100); else {
                    var message = "requestQuota failure : " + errorMessage(fileError);
                    self.initTrigger = function(deferred) {
                        deferred.reject(message);
                    }, launchEnd(self);
                }
            }) : requestFs(grantBytes) : a4p.isDefined(window.webkitStorageInfo) ? a4p.isDefined(window.webkitStorageInfo.requestQuota) ? window.webkitStorageInfo.requestQuota(self.storageType, grantBytes, function(grantedBytes) {
                self.grantedBytes = grantedBytes, requestFs(grantedBytes);
            }, function(fileError) {
                if (fileError.code == FileError.QUOTA_EXCEEDED_ERR) setTimeout(function() {
                    tryQuota(self, grantBytes / 2);
                }, 100); else {
                    var message = "requestQuota failure : " + errorMessage(fileError);
                    self.initTrigger = function(deferred) {
                        deferred.reject(message);
                    }, launchEnd(self);
                }
            }) : requestFs(grantBytes) : requestFs(grantBytes);
        } catch (e) {
            var message = e.message;
            self.initTrigger = function(deferred) {
                deferred.reject(message);
            }, launchEnd(self);
        }
    }
    function errorMessage(fileError) {
        var msg = "";
        switch (fileError.code) {
          case FileError.NOT_FOUND_ERR:
            msg = "File not found";
            break;

          case FileError.SECURITY_ERR:
            msg = "Security error";
            break;

          case FileError.ABORT_ERR:
            msg = "Aborted";
            break;

          case FileError.NOT_READABLE_ERR:
            msg = "File not readable";
            break;

          case FileError.ENCODING_ERR:
            msg = "Encoding error";
            break;

          case FileError.NO_MODIFICATION_ALLOWED_ERR:
            msg = "File not modifiable";
            break;

          case FileError.INVALID_STATE_ERR:
            msg = "Invalid state";
            break;

          case FileError.SYNTAX_ERR:
            msg = "Syntax error";
            break;

          case FileError.INVALID_MODIFICATION_ERR:
            msg = "Invalid modification";
            break;

          case FileError.QUOTA_EXCEEDED_ERR:
            msg = "Quota exceeded";
            break;

          case FileError.TYPE_MISMATCH_ERR:
            msg = "Type mismatch";
            break;

          case FileError.PATH_EXISTS_ERR:
            msg = "File already exists";
            break;

          default:
            msg = "Unknown FileError code (code= " + fileError.code + ", type=" + typeof fileError + ")";
        }
        return msg;
    }
    function getDirEntry(dirEntry, dirOptions, dirs, onSuccess, onFailure) {
        if (dirs.length <= 0) onSuccess && onSuccess(dirEntry); else {
            var dirName = dirs[0];
            dirs = dirs.slice(1), dirEntry.getDirectory(dirName, dirOptions, function(dirEntry) {
                dirs.length ? getDirEntry(dirEntry, dirOptions, dirs, onSuccess, onFailure) : onSuccess && onSuccess && onSuccess(dirEntry);
            }, function(fileError) {
                onFailure && onFailure("getDirectory " + dirName + " from " + dirEntry.fullPath + " failure : " + errorMessage(fileError));
            });
        }
    }
    function getFileEntry(rootEntry, filePath, fileOptions, onSuccess, onFailure) {
        for (var names = filePath.split("/"), max = names.length - 1, fileName = names[max], dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions;
        dirOptions = fileOptions.create ? {
            create: !0,
            exclusive: !1
        } : {
            create: !1,
            exclusive: !1
        }, getDirEntry(rootEntry, dirOptions, dirs, function(dirEntry) {
            dirEntry.getFile(fileName, fileOptions, function(fileEntry) {
                onSuccess && onSuccess(fileEntry);
            }, function(fileError) {
                onFailure && onFailure("getFile " + fileName + " from " + dirEntry.fullPath + " failure : " + errorMessage(fileError));
            });
        }, onFailure);
    }
    return FileStorage.prototype.init = function() {
        var deferred = this.q.defer();
        if (this.initPromises.push(deferred), this.initDone) launchEnd(this); else if (1 == this.initPromises.length) if (this.initPromises.push(deferred), 
        this.storageType = a4p.isUndefinedOrNull(LocalFileSystem) ? window.PERSISTENT : LocalFileSystem.PERSISTENT, 
        window.File && window.FileReader && window.Blob) if (a4p.isUndefined(window.requestFileSystem) && a4p.isUndefined(window.webkitRequestFileSystem)) {
            var message = "window.requestFileSystem() or window.webkitRequestFileSystem() required by a4p.FileStorage!";
            this.initTrigger = function(deferred) {
                deferred.reject(message);
            }, launchEnd(this);
        } else if (a4p.isUndefined(window.resolveLocalFileSystemURL) && a4p.isUndefined(window.webkitResolveLocalFileSystemURL) && a4p.isUndefined(window.resolveLocalFileSystemURI) && a4p.isUndefined(window.webkitResolveLocalFileSystemURI)) {
            var message = "window.resolveLocalFileSystemURI or equivalent required by a4p.FileStorage!";
            this.initTrigger = function(deferred) {
                deferred.reject(message);
            }, launchEnd(this);
        } else {
            var grantBytes = 4294967296, self = this;
            setTimeout(function() {
                tryQuota(self, grantBytes);
            }, 100);
        } else {
            var message = "window.File, window.FileReader and window.Blob need to be loaded before a4p.FileStorage!";
            this.initTrigger = function(deferred) {
                deferred.reject(message);
            }, launchEnd(this);
        }
        return deferred.promise;
    }, FileStorage.prototype.createDir = function(dirPath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        for (var names = dirPath.split("/"), max = names.length, dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !0,
            exclusive: !1
        };
        getDirEntry(this.fs.root, dirOptions, dirs, function(dirEntry) {
            onSuccess && onSuccess(dirEntry);
        }, onFailure);
    }, FileStorage.prototype.getDir = function(dirPath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        for (var names = dirPath.split("/"), max = names.length, dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !1,
            exclusive: !1
        };
        getDirEntry(this.fs.root, dirOptions, dirs, onSuccess, onFailure);
    }, FileStorage.prototype.readDirectory = function(dirPath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        for (var names = dirPath.split("/"), max = names.length, dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !1,
            exclusive: !1
        }, dirContentReader = function(dirEntry) {
            var dirReader = dirEntry.createReader(), fileEntries = [], dirEntries = [], readEntries = function() {
                dirReader.readEntries(function(results) {
                    if (results.length) {
                        for (var max = results.length, i = 0; max > i; i++) results[i].isFile ? fileEntries.push(results[i].name) : dirEntries.push(results[i].name);
                        readEntries();
                    } else onSuccess && (dirEntries.sort(), fileEntries.sort(), onSuccess(dirEntries, fileEntries));
                }, function(fileError) {
                    onFailure && onFailure("readEntries from " + dirEntry.fullPath + " failure : " + errorMessage(fileError));
                });
            };
            readEntries();
        };
        getDirEntry(this.fs.root, dirOptions, dirs, dirContentReader, onFailure);
    }, FileStorage.prototype.readFullDirectory = function(dirPath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        for (var names = dirPath.split("/"), max = names.length, dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !1,
            exclusive: !1
        }, dirEntries = [], fileEntries = [], dirContentReader = function(dirEntry) {
            a4p.InternalLog.log("a4p.FileStorage", "Reading dir " + dirEntry.fullPath);
            var dirReader = dirEntry.createReader(), readEntries = function() {
                dirReader.readEntries(function(results) {
                    if (results.length) {
                        for (var max = results.length, i = 0; max > i; i++) results[i].isFile ? fileEntries.push(results[i].fullPath) : dirEntries.push(results[i]);
                        readEntries();
                    } else dirEntries.length <= 0 ? onSuccess && (fileEntries.sort(), onSuccess(fileEntries)) : dirContentReader(dirEntries.shift());
                }, function(fileError) {
                    onFailure && onFailure("readEntries from " + dirEntry.fullPath + " failure : " + errorMessage(fileError));
                });
            };
            readEntries();
        };
        getDirEntry(this.fs.root, dirOptions, dirs, dirContentReader, onFailure);
    }, FileStorage.prototype.deleteDir = function(dirPath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        for (var names = dirPath.split("/"), max = names.length, dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !1,
            exclusive: !1
        };
        getDirEntry(this.fs.root, dirOptions, dirs, function(dirEntry) {
            dirEntry.remove(function() {
                onSuccess && onSuccess();
            }, function(fileError) {
                onFailure && onFailure("remove " + dirEntry.fullPath + " failure : " + errorMessage(fileError));
            });
        }, function() {
            onSuccess && onSuccess();
        });
    }, FileStorage.prototype.deleteFullDir = function(dirPath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        for (var names = dirPath.split("/"), max = names.length, dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !1,
            exclusive: !1
        };
        getDirEntry(this.fs.root, dirOptions, dirs, function(dirEntry) {
            dirEntry.removeRecursively(function() {
                onSuccess && onSuccess();
            }, function(fileError) {
                onFailure && onFailure("removeRecursively " + dirEntry.fullPath + " failure : " + errorMessage(fileError));
            });
        }, function() {
            onSuccess && onSuccess();
        });
    }, FileStorage.prototype.getFileFromUrl = function(fileUrl, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        a4p.isDefined(window.resolveLocalFileSystemURL) ? window.resolveLocalFileSystemURL(fileUrl, function(fileEntry) {
            onSuccess && onSuccess(fileEntry);
        }, function(fileError) {
            onFailure && onFailure("resolveLocalFileSystemURL " + fileUrl + " failure : " + errorMessage(fileError));
        }) : a4p.isDefined(window.webkitResolveLocalFileSystemURL) ? window.webkitResolveLocalFileSystemURL(fileUrl, function(fileEntry) {
            onSuccess && onSuccess(fileEntry);
        }, function(fileError) {
            onFailure && onFailure("webkitResolveLocalFileSystemURL " + fileUrl + " failure : " + errorMessage(fileError));
        }) : this.getFileFromUri(fileUrl, onSuccess, onFailure);
    }, FileStorage.prototype.getFileFromUri = function(fileUri, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        a4p.isDefined(window.resolveLocalFileSystemURI) ? window.resolveLocalFileSystemURI(fileUri, function(fileEntry) {
            onSuccess && onSuccess(fileEntry);
        }, function(fileError) {
            onFailure && onFailure("resolveLocalFileSystemURI " + fileUri + " failure : " + errorMessage(fileError));
        }) : a4p.isDefined(window.webkitResolveLocalFileSystemURI) ? window.webkitResolveLocalFileSystemURI(fileUri, function(fileEntry) {
            onSuccess && onSuccess(fileEntry);
        }, function(fileError) {
            onFailure && onFailure("webkitResolveLocalFileSystemURI " + fileUri + " failure : " + errorMessage(fileError));
        }) : this.getFileFromUrl(self.urlPrefix + fileUri, onSuccess, onFailure);
    }, FileStorage.prototype.getUrlFromFile = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !1,
            exclusive: !1
        }, function(fileEntry) {
            onSuccess && onSuccess(fileEntry.toURL());
        }, onFailure);
    }, FileStorage.prototype.getUriFromFile = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !1,
            exclusive: !1
        }, function(fileEntry) {
            onSuccess && onSuccess(fileEntry.toURI());
        }, onFailure);
    }, FileStorage.prototype.getModificationTimeFromFile = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !1,
            exclusive: !1
        }, function(fileEntry) {
            fileEntry.getMetadata(function(metadata) {
                onSuccess && onSuccess(metadata.modificationTime);
            }, function(fileError) {
                onFailure && onFailure("getMetadata " + fileEntry.fullPath + " failure : " + errorMessage(fileError));
            });
        }, onFailure);
    }, FileStorage.prototype.getFile = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !1,
            exclusive: !1
        }, onSuccess, onFailure);
    }, FileStorage.prototype.newFile = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !0,
            exclusive: !0
        }, onSuccess, onFailure);
    }, FileStorage.prototype.getOrNewFile = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !0,
            exclusive: !1
        }, onSuccess, onFailure);
    }, FileStorage.prototype.readFileAsDataURL = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !1,
            exclusive: !1
        }, function(fileEntry) {
            fileEntry.file(function(file) {
                var reader = new FileReader();
                onSuccess && (reader.onload = function(evt) {
                    onSuccess(evt.target.result);
                }), onFailure && (reader.onerror = function(fileError) {
                    onFailure("readAsDataURL " + file.fullPath + " failure : " + errorMessage(fileError));
                }), reader.readAsDataURL(file);
            }, function(fileError) {
                onFailure && onFailure("file " + file.fullPath + " failure : " + errorMessage(fileError));
            });
        }, onFailure);
    }, FileStorage.prototype.readFileAsText = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !1,
            exclusive: !1
        }, function(fileEntry) {
            fileEntry.file(function(file) {
                var reader = new FileReader();
                onSuccess && (reader.onload = function(evt) {
                    onSuccess(evt.target.result);
                }), onFailure && (reader.onerror = function(fileError) {
                    onFailure("readAsText " + file.fullPath + " failure : " + errorMessage(fileError));
                }), reader.readAsText(file);
            }, function(fileError) {
                onFailure && onFailure("file " + file.fullPath + " failure : " + errorMessage(fileError));
            });
        }, onFailure);
    }, FileStorage.prototype.readFileAsArrayBuffer = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !1,
            exclusive: !1
        }, function(fileEntry) {
            fileEntry.file(function(file) {
                var reader = new FileReader();
                onSuccess && (reader.onload = function(evt) {
                    onSuccess(evt.target.result);
                }), onFailure && (reader.onerror = function(fileError) {
                    onFailure("readAsText " + file.fullPath + " failure : " + errorMessage(fileError));
                }), reader.readAsArrayBuffer(file);
            }, function(fileError) {
                onFailure && onFailure("file " + file.fullPath + " failure : " + errorMessage(fileError));
            });
        }, onFailure);
    }, FileStorage.prototype.readFileAsBinaryString = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !1,
            exclusive: !1
        }, function(fileEntry) {
            fileEntry.file(function(file) {
                var reader = new FileReader();
                onSuccess && (reader.onload = function(evt) {
                    onSuccess(evt.target.result);
                }), onFailure && (reader.onerror = function(fileError) {
                    onFailure("readAsText " + file.fullPath + " failure : " + errorMessage(fileError));
                }), reader.readAsBinaryString(file);
            }, function(fileError) {
                onFailure && onFailure("file " + file.fullPath + " failure : " + errorMessage(fileError));
            });
        }, onFailure);
    }, FileStorage.prototype.writeFile = function(fromBlob, toFilePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, toFilePath, {
            create: !0,
            exclusive: !1
        }, function(fileEntry) {
            fileEntry.createWriter(function(fileWriter) {
                fileWriter.onwriteend = function() {
                    fileWriter.onwriteend = null, onSuccess && (fileWriter.onwrite = function() {
                        onSuccess(fileEntry);
                    }), onFailure && (fileWriter.onerror = function(fileError) {
                        onFailure("write or truncate " + fileEntry.fullPath + " failure : " + errorMessage(fileError));
                    }), fileWriter.write(fromBlob);
                }, fileWriter.truncate(0);
            }, function(fileError) {
                onFailure && onFailure("createWriter " + fileEntry.fullPath + " failure : " + errorMessage(fileError));
            });
        }, onFailure);
    }, FileStorage.prototype.appendFile = function(fromBlob, toFilePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, toFilePath, {
            create: !0,
            exclusive: !1
        }, function(fileEntry) {
            fileEntry.createWriter(function(fileWriter) {
                onSuccess && (fileWriter.onwrite = function() {
                    onSuccess(fileEntry);
                }), onFailure && (fileWriter.onerror = function(fileError) {
                    onFailure("write or seek " + fileEntry.fullPath + " failure : " + errorMessage(fileError));
                }), fileWriter.seek(fileWriter.length), fileWriter.write(fromBlob);
            }, function(fileError) {
                onFailure && onFailure("createWriter " + fileEntry.fullPath + " failure : " + errorMessage(fileError));
            });
        }, onFailure);
    }, FileStorage.prototype.deleteFile = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !1,
            exclusive: !1
        }, function(fileEntry) {
            fileEntry.remove(function() {
                onSuccess && onSuccess();
            }, function(fileError) {
                onFailure && onFailure("remove " + fileEntry.fullPath + " failure : " + errorMessage(fileError));
            });
        }, function() {
            onSuccess && onSuccess();
        });
    }, FileStorage.prototype.copyFile = function(fromFilePath, toFilePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        for (var self = this, names = toFilePath.split("/"), max = names.length - 1, fileName = names[max], dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !0,
            exclusive: !1
        };
        getDirEntry(this.fs.root, dirOptions, dirs, function(dirEntry) {
            getFileEntry(self.fs.root, fromFilePath, {
                create: !1,
                exclusive: !1
            }, function(fileEntry) {
                fileEntry.copyTo(dirEntry, fileName, function(toFileEntry) {
                    onSuccess && onSuccess(toFileEntry);
                }, function(fileError) {
                    onFailure && onFailure("copy " + fileEntry.fullPath + " to " + dirEntry.fullPath + "/" + fileName + " failure : " + errorMessage(fileError));
                });
            }, onFailure);
        }, onFailure);
    }, FileStorage.prototype.moveFile = function(fromFilePath, toFilePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        for (var self = this, names = toFilePath.split("/"), max = names.length - 1, fileName = names[max], dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !0,
            exclusive: !1
        };
        getDirEntry(this.fs.root, dirOptions, dirs, function(dirEntry) {
            getFileEntry(self.fs.root, fromFilePath, {
                create: !1,
                exclusive: !1
            }, function(fileEntry) {
                fileEntry.moveTo(dirEntry, fileName, function(toFileEntry) {
                    onSuccess && onSuccess(toFileEntry);
                }, function(fileError) {
                    onFailure && onFailure("move " + fileEntry.fullPath + " to " + dirEntry.fullPath + "/" + fileName + " failure : " + errorMessage(fileError));
                });
            }, onFailure);
        }, onFailure);
    }, FileStorage.prototype.moveFileEntry = function(fromFileEntry, toFilePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        for (var names = toFilePath.split("/"), max = names.length - 1, fileName = names[max], dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !0,
            exclusive: !1
        };
        getDirEntry(this.fs.root, dirOptions, dirs, function(dirEntry) {
            fromFileEntry.moveTo(dirEntry, fileName, function(toFileEntry) {
                onSuccess && onSuccess(toFileEntry);
            }, function(fileError) {
                onFailure && onFailure("move " + fileEntry.fullPath + " to " + dirEntry.fullPath + "/" + fileName + " failure : " + errorMessage(fileError));
            });
        }, onFailure);
    }, FileStorage;
}(), a4p.PredefinedFileStorage = function() {
    function PredefinedFileStorage(fileSystem, grantedBytes) {
        this.version = "0.1", this.fs = fileSystem, this.grantedBytes = grantedBytes;
    }
    return PredefinedFileStorage.prototype = a4p.FileStorage.prototype, PredefinedFileStorage;
}();

var a4p;

a4p || (a4p = {}), a4p.TaskReceiver = function() {
    function TaskReceiver(receiverName, http, localStorage) {
        if (this.version = "0.1", this.receiverName = receiverName, this.http = http, localStorage) this.localStorage = localStorage; else {
            var storage = a4p.LocalStorageFactory(window.localStorage);
            this.localStorage = new storage();
        }
        this.todoTasks = this.localStorage.get("TaskReceiver-" + receiverName + "-todoTasks", {}), 
        this.doneTasks = this.localStorage.get("TaskReceiver-" + receiverName + "-doneTasks", {}), 
        this.waitingDone = {}, this.defs = {}, this.synchronizing = {};
    }
    function nextTodo(self, fifoName) {
        var todoTasks = self.todoTasks[fifoName], nbTask = todoTasks.length;
        if (nbTask > 0) {
            var def = self.defs[fifoName], task = todoTasks[0];
            self.waitingDone[fifoName] = !0, def.onAction(task.id, task.action, task.data);
        }
    }
    return TaskReceiver.prototype.clearTaskList = function(fifoName) {
        fifoName = fifoName || "";
        var def = this.defs[fifoName];
        if (!def) throw new Error("TaskReceiver.clearTaskList() called on undefined task list '" + fifoName + "'.");
        this.waitingDone[fifoName] = !1, this.todoTasks[fifoName] = [], this.localStorage.set("TaskReceiver-" + this.receiverName + "-todoTasks", this.todoTasks), 
        this.doneTasks[fifoName] = [], this.localStorage.set("TaskReceiver-" + this.receiverName + "-doneTasks", this.doneTasks);
    }, TaskReceiver.prototype.defineTaskList = function(fifoName, serverUrl, onAction) {
        fifoName = fifoName || "";
        var def;
        this.defs[fifoName] ? (def = this.defs[fifoName], def.serverUrl = serverUrl, def.onAction = onAction) : (def = {
            serverUrl: serverUrl,
            onAction: onAction
        }, this.defs[fifoName] = def), this.doneTasks[fifoName] || (this.doneTasks[fifoName] = []), 
        this.waitingDone[fifoName] || (this.waitingDone[fifoName] = !1), this.todoTasks[fifoName] ? nextTodo(this, fifoName) : this.todoTasks[fifoName] = [], 
        this.synchronizing[fifoName] = !1;
    }, TaskReceiver.prototype.synchronize = function(fifoName, onSuccess, onFailure) {
        fifoName = fifoName || "";
        var def = this.defs[fifoName], self = this;
        if (!def || self.synchronizing[fifoName]) throw new Error("TaskReceiver.synchronize() called on undefined task list '" + fifoName + "'.");
        for (var oldDone = [], doneTasks = self.doneTasks[fifoName], nb = doneTasks.length, i = 0; nb > i; i++) oldDone.push(doneTasks[i].id);
        var oldNb = oldDone.length, onSuccessFct = function(data) {
            self.synchronizing[fifoName] = !1, self.defs[fifoName];
            for (var todoTasks = self.todoTasks[fifoName], doneTasks = self.doneTasks[fifoName], nb = data.length, i = 0; nb > i; i++) {
                var task = data[i];
                todoTasks.push({
                    id: task.id,
                    action: task.action,
                    data: task.data
                });
            }
            self.localStorage.set("TaskReceiver-" + self.receiverName + "-todoTasks", self.todoTasks);
            for (var i = 0; oldNb > i; i++) {
                var id = oldDone[i], idxRemove = 0, nb = doneTasks.length, found = !1;
                for (idxRemove = 0; nb > idxRemove; idxRemove++) if (id == doneTasks[idxRemove].id) {
                    found = !0;
                    break;
                }
                found ? doneTasks.splice(idxRemove, 1) : a4p.ErrorLog.log("a4p.TaskReceiver", "Unknown done client task id='" + id + "'. Have you cleared TaskReceiver before receiving the ack ?");
            }
            self.localStorage.set("TaskReceiver-" + self.receiverName + "-doneTasks", self.doneTasks), 
            onSuccess(), self.waitingDone[fifoName] || nextTodo(self, fifoName);
        }, onFailureFct = function(data, status) {
            self.synchronizing[fifoName] = !1, onFailure("status=" + status + " " + (data || "Request failed"));
        };
        self.synchronizing[fifoName] = !0, this.http.post(def.serverUrl, doneTasks).success(onSuccessFct).error(onFailureFct);
    }, TaskReceiver.prototype.doneTask = function(fifoName, ack) {
        fifoName = fifoName || "";
        var def = this.defs[fifoName];
        if (def && this.waitingDone[fifoName]) {
            this.waitingDone[fifoName] = !1, ack = ack || null;
            var todoTasks = this.todoTasks[fifoName], task = todoTasks.shift();
            this.localStorage.set("TaskReceiver-" + this.receiverName + "-todoTasks", this.todoTasks);
            var doneTasks = this.doneTasks[fifoName];
            doneTasks.push({
                id: task.id,
                ack: ack
            }), this.localStorage.set("TaskReceiver-" + this.receiverName + "-doneTasks", this.doneTasks), 
            nextTodo(this, fifoName);
        }
    }, TaskReceiver.prototype.nbTaskTodo = function(fifoName) {
        fifoName = fifoName || "";
        var todoTasks = this.todoTasks[fifoName];
        return todoTasks ? todoTasks.length : 0;
    }, TaskReceiver.prototype.nbTaskDone = function(fifoName) {
        fifoName = fifoName || "";
        var doneTasks = this.doneTasks[fifoName];
        return doneTasks ? doneTasks.length : 0;
    }, TaskReceiver;
}();

var a4p;

a4p || (a4p = {}), a4p.TaskSender = function() {
    function TaskSender(senderName, http, localStorage) {
        if (this.version = "0.1", this.senderName = senderName, this.http = http, localStorage) this.localStorage = localStorage; else {
            var LocalStorage = a4p.LocalStorageFactory(window.localStorage);
            this.localStorage = new LocalStorage();
        }
        this.todoTasks = this.localStorage.get("TaskSender-" + senderName + "-todoTasks", {}), 
        this.sentTasks = this.localStorage.get("TaskSender-" + senderName + "-sentTasks", {}), 
        this.ackTasks = this.localStorage.get("TaskSender-" + senderName + "-ackTasks", {}), 
        this.waitingDone = {}, this.defs = {}, this.synchronizing = {};
    }
    function nextAck(self, fifoName) {
        var ackTasks = self.ackTasks[fifoName], nbTask = ackTasks.length;
        if (nbTask > 0) {
            var def = self.defs[fifoName], task = ackTasks[0];
            self.waitingDone[fifoName] = !0, def.onAck(task.id, task.ack);
        }
    }
    return TaskSender.prototype.clearTaskList = function(fifoName) {
        fifoName = fifoName || "";
        var def = this.defs[fifoName];
        if (!def) throw new Error("TaskSender.clearTaskList() called on undefined task list '" + fifoName + "'.");
        this.waitingDone[fifoName] = !1, this.todoTasks[fifoName] = [], this.localStorage.set("TaskSender-" + this.senderName + "-todoTasks", this.todoTasks), 
        this.sentTasks[fifoName] = [], this.localStorage.set("TaskSender-" + this.senderName + "-sentTasks", this.sentTasks), 
        this.ackTasks[fifoName] = [], this.localStorage.set("TaskSender-" + this.senderName + "-ackTasks", this.ackTasks);
    }, TaskSender.prototype.defineTaskList = function(fifoName, serverUrl, onAck) {
        fifoName = fifoName || "";
        var def;
        this.defs[fifoName] ? (def = this.defs[fifoName], def.serverUrl = serverUrl, def.onAck = onAck) : (def = {
            serverUrl: serverUrl,
            onAck: onAck
        }, this.defs[fifoName] = def), this.todoTasks[fifoName] || (this.todoTasks[fifoName] = []), 
        this.sentTasks[fifoName] || (this.sentTasks[fifoName] = []), this.waitingDone[fifoName] || (this.waitingDone[fifoName] = !1), 
        this.ackTasks[fifoName] ? nextAck(this, fifoName) : this.ackTasks[fifoName] = [], 
        this.synchronizing[fifoName] = !1;
    }, TaskSender.prototype.todoTask = function(fifoName, id, action, data) {
        fifoName = fifoName || "";
        var def = this.defs[fifoName];
        if (!def) throw new Error("TaskSender.todoTask() called on undefined task list '" + fifoName + "'.");
        action = action || "", data = data || null;
        for (var todoTasks = this.todoTasks[fifoName], nb = todoTasks.length, i = 0; nb > i; i++) if (id == todoTasks[i].id) throw new Error("TaskSender.todoTask() called on already defined todo task '" + id + "'.");
        todoTasks.push({
            id: id,
            action: action,
            data: data
        }), this.localStorage.set("TaskSender-" + this.senderName + "-todoTasks", this.todoTasks);
    }, TaskSender.prototype.synchronize = function(fifoName, onSuccess, onFailure) {
        fifoName = fifoName || "";
        var def = this.defs[fifoName], self = this;
        if (!def || self.synchronizing[fifoName]) throw new Error("TaskSender.synchronize() called on undefined task list '" + fifoName + "'.");
        for (var oldTodo = [], todoTasks = self.todoTasks[fifoName], nb = todoTasks.length, i = 0; nb > i; i++) oldTodo.push(todoTasks[i].id);
        var oldNb = oldTodo.length, onSuccessFct = function(data) {
            self.synchronizing[fifoName] = !1, self.defs[fifoName];
            for (var todoTasks = self.todoTasks[fifoName], sentTasks = self.sentTasks[fifoName], i = 0; oldNb > i; i++) {
                var id = oldTodo[i], idxRemove = 0, nb = todoTasks.length, found = !1;
                for (idxRemove = 0; nb > idxRemove; idxRemove++) if (id == todoTasks[idxRemove].id) {
                    found = !0;
                    break;
                }
                found ? (sentTasks.push(todoTasks[idxRemove].id), todoTasks.splice(idxRemove, 1)) : a4p.ErrorLog.log("a4p.TaskSender", "Unknown sent server task id='" + id + "'");
            }
            self.localStorage.set("TaskSender-" + self.senderName + "-todoTasks", self.todoTasks);
            for (var ackTasks = self.ackTasks[fifoName], nb = data.length, i = 0; nb > i; i++) {
                var task = data[i], found = !1, nb = sentTasks.length, idxRemove = 0;
                for (idxRemove = 0; nb > idxRemove; idxRemove++) if (task.id == sentTasks[idxRemove]) {
                    found = !0;
                    break;
                }
                found ? (ackTasks.push({
                    id: task.id,
                    ack: task.ack
                }), sentTasks.splice(idxRemove, 1)) : a4p.ErrorLog.log("a4p.TaskSender", "Unknown ack server task id='" + task.id + "' ack='" + task.ack + "'");
            }
            self.localStorage.set("TaskSender-" + self.senderName + "-sentTasks", self.sentTasks), 
            self.localStorage.set("TaskSender-" + self.senderName + "-ackTasks", self.ackTasks), 
            onSuccess(), self.waitingDone[fifoName] || nextAck(self, fifoName);
        }, onFailureFct = function(data, status) {
            self.synchronizing[fifoName] = !1, onFailure("status=" + status + " " + (data || "Request failed"));
        };
        self.synchronizing[fifoName] = !0, this.http.post(def.serverUrl, todoTasks).success(onSuccessFct).error(onFailureFct);
    }, TaskSender.prototype.doneTask = function(fifoName) {
        fifoName = fifoName || "";
        var def = this.defs[fifoName];
        if (!def || !this.waitingDone[fifoName]) throw new Error("TaskSender.doneTask() called on undefined task list '" + fifoName + "'.");
        this.waitingDone[fifoName] = !1;
        var ackTasks = this.ackTasks[fifoName];
        ackTasks.shift(), this.localStorage.set("TaskSender-" + this.senderName + "-ackTasks", this.ackTasks), 
        nextAck(this, fifoName);
    }, TaskSender.prototype.nbTaskTodo = function(fifoName) {
        fifoName = fifoName || "";
        var todoTasks = this.todoTasks[fifoName];
        return todoTasks ? todoTasks.length : 0;
    }, TaskSender.prototype.nbTaskSent = function(fifoName) {
        fifoName = fifoName || "";
        var sentTasks = this.sentTasks[fifoName];
        return sentTasks ? sentTasks.length : 0;
    }, TaskSender.prototype.nbTaskAck = function(fifoName) {
        fifoName = fifoName || "";
        var ackTasks = this.ackTasks[fifoName];
        return ackTasks ? ackTasks.length : 0;
    }, TaskSender;
}();

var a4p;

a4p || (a4p = {}), a4p.Thumb = function() {
    function Thumb(element) {
        this.element = element;
    }
    return Thumb.prototype.add = function(texte, number, color, width, height) {
        if (this.element) {
            var canvas = document.createElement("canvas");
            canvas.width = width, canvas.height = height;
            var context = canvas.getContext("2d"), textLetters = "";
            textLetters += texte[0] ? texte[0] : "?", textLetters += texte[1] ? texte[1] : " ";
            var textArr = texte.split(" ");
            if (textArr.length > 1) {
                textLetters = "";
                for (var x = 0; 2 > x; x++) textLetters += textArr[x].charAt(0);
            }
            var textSize = Math.round(height / 2), numberTextSize = Math.round(height / 5);
            Math.round(number).toString();
            var textPosx = width > 2 * textSize ? Math.round(width / 2 - textSize) : 0, textPosy = height > textSize ? Math.round(height / 2 + textSize / 2) : height;
            Math.round(width / 2);
            var my_gradient = context.createLinearGradient(0, 0, width, height);
            my_gradient.addColorStop(0, "gray"), my_gradient.addColorStop(1, "white"), context.createLinearGradient(0, 0, width, height), 
            context.fillStyle = my_gradient, context.fillRect(0, 0, width, height), context.fillStyle = "white";
            var realTextSize = Math.round(1.2 * textSize);
            context.font = "normal " + realTextSize + "px a4pHelveticaNeueLight,Helvetica,sans-serif", 
            context.fillText(textLetters.toUpperCase(), textPosx, textPosy), context.fillStyle = "black";
            var realNumberTextSize = Math.round(1.5 * numberTextSize);
            context.font = "normal " + realNumberTextSize + "px a4pHelveticaNeueLight,Helvetica,sans-serif", 
            this.element.appendChild(canvas);
        }
    }, Thumb;
}(), function() {
    var appCache = window.applicationCache;
    return a4p.isUndefined(appCache) || appCache.status === appCache.UNCACHED ? !1 : (appCache.update(), 
    appCache.addEventListener("updateready", function() {
        if (appCache.status == window.applicationCache.UPDATEREADY && window.confirm("A new version of this site is available. Load it ?")) {
            appCache.swapCache();
            var form = document.createElement("form");
            form.setAttribute("method", "POST"), form.setAttribute("action", window.location.href), 
            document.body.appendChild(form), form.submit();
        }
    }), void 0);
}();

var a4p;

a4p || (a4p = {}), a4p.Utf8 = function() {
    var Utf8 = {};
    return Utf8.encode = function(input) {
        for (var nChr, utftext = "", nStrLen = input.length, nChrIdx = 0; nStrLen > nChrIdx; nChrIdx++) nChr = input.charCodeAt(nChrIdx), 
        128 > nChr ? utftext += String.fromCharCode(nChr) : 2048 > nChr ? (utftext += String.fromCharCode(192 + (nChr >>> 6)), 
        utftext += String.fromCharCode(128 + (63 & nChr))) : 65536 > nChr ? (utftext += String.fromCharCode(224 + (nChr >>> 12)), 
        utftext += String.fromCharCode(128 + (63 & nChr >>> 6)), utftext += String.fromCharCode(128 + (63 & nChr))) : 2097152 > nChr ? (utftext += String.fromCharCode(240 + (nChr >>> 18)), 
        utftext += String.fromCharCode(128 + (63 & nChr >>> 12)), utftext += String.fromCharCode(128 + (63 & nChr >>> 6)), 
        utftext += String.fromCharCode(128 + (63 & nChr))) : 67108864 > nChr ? (utftext += String.fromCharCode(248 + (nChr >>> 24)), 
        utftext += String.fromCharCode(128 + (63 & nChr >>> 18)), utftext += String.fromCharCode(128 + (63 & nChr >>> 12)), 
        utftext += String.fromCharCode(128 + (63 & nChr >>> 6)), utftext += String.fromCharCode(128 + (63 & nChr))) : (utftext += String.fromCharCode(252 + nChr / 1073741824), 
        utftext += String.fromCharCode(128 + (63 & nChr >>> 24)), utftext += String.fromCharCode(128 + (63 & nChr >>> 18)), 
        utftext += String.fromCharCode(128 + (63 & nChr >>> 12)), utftext += String.fromCharCode(128 + (63 & nChr >>> 6)), 
        utftext += String.fromCharCode(128 + (63 & nChr)));
        return utftext;
    }, Utf8.encodeToUint8Array = function(input) {
        for (var aBytes, nChr, nStrLen = input.length, nArrLen = 0, nMapIdx = 0; nStrLen > nMapIdx; nMapIdx++) nChr = input.charCodeAt(nMapIdx), 
        nArrLen += 128 > nChr ? 1 : 2048 > nChr ? 2 : 65536 > nChr ? 3 : 2097152 > nChr ? 4 : 67108864 > nChr ? 5 : 6;
        aBytes = new Uint8Array(nArrLen);
        for (var nIdx = 0, nChrIdx = 0; nArrLen > nIdx; nChrIdx++) nChr = input.charCodeAt(nChrIdx), 
        128 > nChr ? aBytes[nIdx++] = nChr : 2048 > nChr ? (aBytes[nIdx++] = 192 + (nChr >>> 6), 
        aBytes[nIdx++] = 128 + (63 & nChr)) : 65536 > nChr ? (aBytes[nIdx++] = 224 + (nChr >>> 12), 
        aBytes[nIdx++] = 128 + (63 & nChr >>> 6), aBytes[nIdx++] = 128 + (63 & nChr)) : 2097152 > nChr ? (aBytes[nIdx++] = 240 + (nChr >>> 18), 
        aBytes[nIdx++] = 128 + (63 & nChr >>> 12), aBytes[nIdx++] = 128 + (63 & nChr >>> 6), 
        aBytes[nIdx++] = 128 + (63 & nChr)) : 67108864 > nChr ? (aBytes[nIdx++] = 248 + (nChr >>> 24), 
        aBytes[nIdx++] = 128 + (63 & nChr >>> 18), aBytes[nIdx++] = 128 + (63 & nChr >>> 12), 
        aBytes[nIdx++] = 128 + (63 & nChr >>> 6), aBytes[nIdx++] = 128 + (63 & nChr)) : (aBytes[nIdx++] = 252 + nChr / 1073741824, 
        aBytes[nIdx++] = 128 + (63 & nChr >>> 24), aBytes[nIdx++] = 128 + (63 & nChr >>> 18), 
        aBytes[nIdx++] = 128 + (63 & nChr >>> 12), aBytes[nIdx++] = 128 + (63 & nChr >>> 6), 
        aBytes[nIdx++] = 128 + (63 & nChr));
        return aBytes;
    }, Utf8.decode = function(input) {
        for (var nChr, nCode, sView = "", nStrLen = input.length, nChrIdx = 0; nStrLen > nChrIdx; nChrIdx++) nChr = input.charCodeAt(nChrIdx), 
        nChr >= 252 && 253 >= nChr && nStrLen > nChrIdx + 5 ? (nCode = 1073741824 * (1 & nChr), 
        nChr = input.charCodeAt(++nChrIdx), nCode |= (63 & nChr) << 24, nChr = input.charCodeAt(++nChrIdx), 
        nCode |= (63 & nChr) << 18, nChr = input.charCodeAt(++nChrIdx), nCode |= (63 & nChr) << 12, 
        nChr = input.charCodeAt(++nChrIdx), nCode |= (63 & nChr) << 6, nChr = input.charCodeAt(++nChrIdx), 
        nCode |= 63 & nChr, sView += String.fromCharCode(nCode)) : nChr >= 248 && 251 >= nChr && nStrLen > nChrIdx + 4 ? (nCode = (3 & nChr) << 24, 
        nChr = input.charCodeAt(++nChrIdx), nCode |= (63 & nChr) << 18, nChr = input.charCodeAt(++nChrIdx), 
        nCode |= (63 & nChr) << 12, nChr = input.charCodeAt(++nChrIdx), nCode |= (63 & nChr) << 6, 
        nChr = input.charCodeAt(++nChrIdx), nCode |= 63 & nChr, sView += String.fromCharCode(nCode)) : nChr >= 240 && 247 >= nChr && nStrLen > nChrIdx + 3 ? (nCode = (7 & nChr) << 18, 
        nChr = input.charCodeAt(++nChrIdx), nCode |= (63 & nChr) << 12, nChr = input.charCodeAt(++nChrIdx), 
        nCode |= (63 & nChr) << 6, nChr = input.charCodeAt(++nChrIdx), nCode |= 63 & nChr, 
        sView += String.fromCharCode(nCode)) : nChr >= 224 && 239 >= nChr && nStrLen > nChrIdx + 2 ? (nCode = (15 & nChr) << 12, 
        nChr = input.charCodeAt(++nChrIdx), nCode |= (63 & nChr) << 6, nChr = input.charCodeAt(++nChrIdx), 
        nCode |= 63 & nChr, sView += String.fromCharCode(nCode)) : nChr >= 192 && 223 >= nChr && nStrLen > nChrIdx + 1 ? (nCode = (31 & nChr) << 6, 
        nChr = input.charCodeAt(++nChrIdx), nCode |= 63 & nChr, sView += String.fromCharCode(nCode)) : sView += String.fromCharCode(127 & nChr);
        return sView;
    }, Utf8.decodeFromUint8Array = function(aBytes) {
        for (var nPart, nCode, sView = "", nLen = aBytes.length, nIdx = 0; nLen > nIdx; nIdx++) nPart = aBytes[nIdx], 
        nPart >= 252 && 253 >= nPart && nLen > nIdx + 5 ? (nCode = 1073741824 * (1 & nPart), 
        nPart = aBytes[++nIdx], nCode += (63 & nPart) << 24, nPart = aBytes[++nIdx], nCode += (63 & nPart) << 18, 
        nPart = aBytes[++nIdx], nCode += (63 & nPart) << 12, nPart = aBytes[++nIdx], nCode += (63 & nPart) << 6, 
        nPart = aBytes[++nIdx], nCode += 63 & nPart, sView += String.fromCharCode(nCode)) : nPart >= 248 && 251 >= nPart && nLen > nIdx + 4 ? (nCode = (3 & nPart) << 24, 
        nPart = aBytes[++nIdx], nCode += (63 & nPart) << 18, nPart = aBytes[++nIdx], nCode += (63 & nPart) << 12, 
        nPart = aBytes[++nIdx], nCode += (63 & nPart) << 6, nPart = aBytes[++nIdx], nCode += 63 & nPart, 
        sView += String.fromCharCode(nCode)) : nPart >= 240 && 247 >= nPart && nLen > nIdx + 3 ? (nCode = (7 & nPart) << 18, 
        nPart = aBytes[++nIdx], nCode += (63 & nPart) << 12, nPart = aBytes[++nIdx], nCode += (63 & nPart) << 6, 
        nPart = aBytes[++nIdx], nCode += 63 & nPart, sView += String.fromCharCode(nCode)) : nPart >= 224 && 239 >= nPart && nLen > nIdx + 2 ? (nCode = (15 & nPart) << 12, 
        nPart = aBytes[++nIdx], nCode += (63 & nPart) << 6, nPart = aBytes[++nIdx], nCode += 63 & nPart, 
        sView += String.fromCharCode(nCode)) : nPart >= 192 && 223 >= nPart && nLen > nIdx + 1 ? (nCode = (31 & nPart) << 6, 
        nPart = aBytes[++nIdx], nCode += 63 & nPart, sView += String.fromCharCode(nCode)) : sView += String.fromCharCode(127 & nPart);
        return sView;
    }, Utf8;
}();

var a4p;

a4p || (a4p = {}), a4p.Xml = function() {
    function Xml() {
        this.version = "0.1";
    }
    Xml.isXml = function(elm) {
        var documentElement = (elm ? elm.ownerDocument || elm : 0).documentElement;
        return documentElement ? "HTML" !== documentElement.nodeName : !1;
    }, Xml.xml2String = function(xmlNode) {
        if (!Xml.isXml(xmlNode)) return !1;
        try {
            return new XMLSerializer().serializeToString(xmlNode);
        } catch (E1) {
            try {
                return xmlNode.xml;
            } catch (E2) {}
        }
        return !1;
    }, Xml.string2Xml = function(xmlString) {
        if (!dom_parser) return !1;
        var resultXML = dom_parser.call("DOMParser" in window && new DOMParser() || window, xmlString, "text/xml");
        return this.isXml(resultXML) ? resultXML : !1;
    };
    var dom_parser = "DOMParser" in window && new DOMParser().parseFromString || window.ActiveXObject && function(_xmlString) {
        var xml_doc = new ActiveXObject("Microsoft.XMLDOM");
        return xml_doc.async = "false", xml_doc.loadXML(_xmlString), xml_doc;
    };
    return Xml;
}();

var c4p;

c4p || (c4p = {}), c4p.Model = function() {
    function Model() {
        this.version = "0.1";
    }
    Model.a4p_types = {
        Facet: {
            isAttachment: !1,
            icon: "tag",
            colorType: "j",
            fields: [ "prefix", "name", "description", "facets_ids", "items_ids", "parent_id", "owner_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "facets_ids",
                one: "child",
                many: "parent",
                types: [ "Facet" ]
            }, {
                key: "items_ids",
                one: "faceted",
                many: "faceter",
                types: [ "Account", "Contact", "Event", "Task", "Opportunity", "Lead", "Document", "Note", "Report" ]
            }, {
                key: "owner_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "parent_id",
                one: "parent",
                many: "child",
                types: [ "Facet" ],
                cascadeDelete: "many"
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                prefix: {
                    title: "htmlFormPrefix",
                    type: "",
                    defaultValue: ""
                },
                name: {
                    title: "htmlFormName",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.name.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormPrefix'])"
                    } ]
                },
                description: {
                    title: "",
                    type: "textarea",
                    defaultValue: ""
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [],
            editObjectGroups: [ {
                key: "title",
                title: "htmlFieldsetTitle",
                fields: [ "prefix", "name" ]
            }, {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "description" ]
            } ],
            displayNameList: [ [ "name" ] ],
            displayDescription: [ "description" ],
            displayResumedObjectGroups: [],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "tag",
                name: !0,
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: []
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "tag",
                    name: !1,
                    title: "",
                    size: "bigger",
                    fields: [ {
                        key: "prefix",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "bigger"
                    }, {
                        key: "name",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "bigger"
                    } ]
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Contact: {
            isAttachment: !1,
            icon: "user",
            colorType: "m",
            fields: [ "salutation", "first_name", "last_name", "title", "account_id", "phone_work", "phone_mobile", "phone_fax", "phone_house", "phone_other", "email", "email_home", "email_list", "email_other", "primary_address_street", "primary_address_city", "primary_address_zipcode", "primary_address_state", "primary_address_country", "alt_address_street", "alt_address_city", "alt_address_zipcode", "alt_address_state", "alt_address_country", "description", "manager_id", "contact_type", "assigned_contact_id", "birthday", "department", "assistant_name", "assistant_phone", "lead_source", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "assigned_contact_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "account_id",
                one: "accounter",
                many: "accounted",
                types: [ "Account" ]
            }, {
                key: "manager_id",
                one: "manager",
                many: "managed",
                types: [ "Contact" ]
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                salutation: {
                    title: "htmlFormSalutation",
                    type: "select",
                    defaultValue: "",
                    defaultSetter: "firstOptionItem",
                    defaultSetterParam: [ "htmlOptionsSalutation" ],
                    optionList: "htmlOptionsSalutation",
                    validations: [ {
                        expr: "object.salutation.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormSalutation', 40])"
                    } ]
                },
                first_name: {
                    title: "htmlFormFirstName",
                    type: "",
                    defaultValue: "htmlDefaultNewContact",
                    autofocus: !0,
                    validations: [ {
                        expr: "object.first_name.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormFirstName'])"
                    }, {
                        expr: "object.first_name.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormFirstName', 40])"
                    } ]
                },
                last_name: {
                    title: "htmlFormLastName",
                    type: "",
                    defaultValue: "htmlDefaultNewContact",
                    validations: [ {
                        expr: "object.last_name.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormLastName'])"
                    }, {
                        expr: "object.last_name.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormLastName', 80])"
                    } ]
                },
                title: {
                    title: "htmlFormTitle",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.title.length < 128",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormTitle', 128])"
                    } ]
                },
                phone_work: {
                    title: "htmlFormWork",
                    type: "tel",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.phone_work.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormWork', 40])"
                    }, {
                        expr: "object.phone_work.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.phone_work)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormWork'])"
                    } ]
                },
                phone_mobile: {
                    title: "htmlFormMobile",
                    type: "tel",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.phone_mobile.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormMobile', 40])"
                    }, {
                        expr: "object.phone_mobile.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.phone_mobile)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormMobile'])"
                    } ]
                },
                phone_fax: {
                    title: "htmlFormFax",
                    type: "tel",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.phone_fax.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormFax', 40])"
                    }, {
                        expr: "object.phone_fax.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.phone_fax)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormFax'])"
                    } ]
                },
                phone_house: {
                    title: "htmlFormHouse",
                    type: "tel",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.phone_house.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormHouse', 40])"
                    }, {
                        expr: "object.phone_house.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.phone_house)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormHouse'])"
                    } ]
                },
                phone_other: {
                    title: "htmlFormOther",
                    type: "tel",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.phone_other.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormOther', 40])"
                    }, {
                        expr: "object.phone_other.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.phone_other)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormOther'])"
                    } ]
                },
                email: {
                    title: "htmlFormEmail",
                    type: "mail",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.email.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormEmail', 80])"
                    }, {
                        expr: "object.email.length == 0 || /^[\\w._-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}$/.test(object.email)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorEmailFormat', ['htmlFormEmail'])"
                    } ]
                },
                email_home: {
                    title: "htmlFormHome",
                    type: "mail",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.email_home.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormHome', 80])"
                    }, {
                        expr: "object.email_home.length == 0 || /^[\\w._-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}$/.test(object.email_home)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorEmailFormat', ['htmlFormHome'])"
                    } ]
                },
                email_list: {
                    title: "htmlFormList",
                    type: "mail",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.email_list.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormList', 80])"
                    }, {
                        expr: "object.email_list.length == 0 || /^[\\w._-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}$/.test(object.email_list)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorEmailFormat', ['htmlFormList'])"
                    } ]
                },
                email_other: {
                    title: "htmlFormOther",
                    type: "mail",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.email_other.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormOther', 80])"
                    }, {
                        expr: "object.email_other.length == 0 || /^[\\w._-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}$/.test(object.email_other)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorEmailFormat', ['htmlFormOther'])"
                    } ]
                },
                primary_address_street: {
                    title: "htmlFormStreet",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_street.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormStreet', 255])"
                    } ]
                },
                primary_address_city: {
                    title: "htmlFormCity",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_city.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCity', 40])"
                    } ]
                },
                primary_address_zipcode: {
                    title: "htmlFormZipCode",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_zipcode.length < 20",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormZipCode', 20])"
                    } ]
                },
                primary_address_state: {
                    title: "htmlFormState",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_state.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormState', 80])"
                    } ]
                },
                primary_address_country: {
                    title: "htmlFormCountry",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_country.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCountry', 80])"
                    } ]
                },
                alt_address_street: {
                    title: "htmlFormStreet",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_street.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormStreet', 255])"
                    } ]
                },
                alt_address_city: {
                    title: "htmlFormCity",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_city.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCity', 40])"
                    } ]
                },
                alt_address_zipcode: {
                    title: "htmlFormZipCode",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_zipcode.length < 20",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormZipCode', 20])"
                    } ]
                },
                alt_address_state: {
                    title: "htmlFormState",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_state.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormState', 80])"
                    } ]
                },
                alt_address_country: {
                    title: "htmlFormCountry",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_country.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCountry', 80])"
                    } ]
                },
                description: {
                    title: "htmlFormDescription",
                    type: "textarea",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.description.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormDescription', 32000])"
                    } ]
                },
                birthday: {
                    title: "htmlFormBirthday",
                    type: "date",
                    defaultValue: "",
                    defaultSetter: "now"
                },
                department: {
                    title: "htmlFormDepartment",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.department.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormDepartment', 80])"
                    } ]
                },
                assistant_name: {
                    title: "htmlFormAssistantName",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.assistant_name.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormAssistantName', 40])"
                    } ]
                },
                assistant_phone: {
                    title: "htmlFormAssistantPhone",
                    type: "tel",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.assistant_phone.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormAssistantPhone', 40])"
                    }, {
                        expr: "object.assistant_phone.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.assistant_phone)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormAssistantPhone'])"
                    } ]
                },
                lead_source: {
                    title: "htmlFormLeadSource",
                    type: "select",
                    defaultValue: "",
                    defaultSetter: "firstOptionItem",
                    defaultSetterParam: [ "htmlOptionsLeadSource" ],
                    optionList: "htmlOptionsLeadSource",
                    validations: [ {
                        expr: "object.lead_source.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormLeadSource', 40])"
                    } ]
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [ {
                key: "contact_type",
                fields: [],
                force: !1,
                getter: "contactType"
            } ],
            editObjectGroups: [ {
                key: "details",
                title: "htmlFieldsetDetails",
                fields: [ "salutation", "first_name", "last_name", "title", "birthday" ]
            }, {
                key: "phones",
                title: "htmlFieldsetPhones",
                fields: [ "phone_work", "phone_mobile", "phone_fax", "phone_house", "phone_other" ]
            }, {
                key: "emails",
                title: "htmlFieldsetEmails",
                fields: [ "email", "email_home", "email_list", "email_other" ]
            }, {
                key: "primary_address",
                title: "htmlFieldsetPrimaryAddress",
                fields: [ "primary_address_street", "primary_address_city", "primary_address_zipcode", "primary_address_state", "primary_address_country" ]
            }, {
                key: "alt_address",
                title: "htmlFieldsetAlternateAddress",
                fields: [ "alt_address_street", "alt_address_city", "alt_address_zipcode", "alt_address_state", "alt_address_country" ]
            }, {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "description", "lead_source" ]
            }, {
                key: "work",
                title: "htmlFieldsetWork",
                fields: [ "department", "assistant_name", "assistant_phone" ]
            } ],
            displayNameList: [ [ "last_name", "first_name" ], [ "first_name", "last_name" ], [ "salutation", "first_name", "last_name" ], [ "salutation", "last_name", "first_name" ] ],
            displayDescription: [ "description", "email" ],
            displayResumedObjectGroups: [ {
                key: "work",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "account_id",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "department",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            }, {
                key: "phones",
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "phone_work",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "phone_house",
                    title: !1,
                    prefix: "",
                    suffix: "htmlFormHouseAbbrev",
                    size: ""
                }, {
                    key: "phone_mobile",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "email",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            } ],
            displaySummarizedObjectGroups: [ {
                key: "work",
                synchro: !0,
                icon: "user",
                name: !0,
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "account_id",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "department",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            }, {
                key: "phones",
                synchro: !1,
                icon: "",
                name: !1,
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "phone_work",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "phone_house",
                    title: !1,
                    prefix: "",
                    suffix: "htmlFormHouseAbbrev",
                    size: ""
                }, {
                    key: "phone_mobile",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "email",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "user",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "title",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "big"
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "account_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "department",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "phone_work",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "phone_house",
                        title: !1,
                        prefix: "",
                        suffix: "htmlFormHouseAbbrev",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "phone_mobile",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "email",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "c",
                brSeparated: !0,
                groups: [ {
                    title: "htmlFormTitleContactDetails",
                    size: "big",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "primary_address_street",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "primary_address_city",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "primary_address_zipcode",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "primary_address_state",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "primary_address_country",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "phone_fax",
                        title: !1,
                        prefix: "",
                        suffix: "htmlFormFaxAbbrev",
                        size: ""
                    }, {
                        key: "assistant_name",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "assistant_phone",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "e",
                brSeparated: !0,
                groups: [ {
                    title: "htmlFormTitlePersonal",
                    size: "big",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "birthday",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "g",
                brSeparated: !0,
                groups: [ {
                    title: "htmlFormTitleOtherContactDetails",
                    size: "big",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "alt_address_street",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "alt_address_city",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "alt_address_zipcode",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "alt_address_state",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "alt_address_country",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "phone_other",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "lead_source",
                        title: !1,
                        prefix: "htmlTextContactOrigin",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "contact_type",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Account: {
            isAttachment: !1,
            icon: "building-o",
            colorType: "m",
            fields: [ "company_name", "phone", "fax", "web_url", "bil_addr_street", "bil_addr_city", "bil_addr_postal_code", "bil_addr_state", "bil_addr_country", "description", "annual_revenue", "nb_employees", "industry", "sic", "type", "parent_id", "assigned_contact_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "assigned_contact_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "parent_id",
                one: "parent",
                many: "child",
                types: [ "Account" ],
                cascadeDelete: "many"
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                company_name: {
                    title: "htmlFormCompanyName",
                    type: "",
                    autofocus: !0,
                    defaultValue: "htmlDefaultNewAccount",
                    validations: [ {
                        expr: "object.company_name.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormCompanyName'])"
                    }, {
                        expr: "object.company_name.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCompanyName', 255])"
                    } ]
                },
                fax: {
                    title: "htmlFormFax",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.fax.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormFax', 40])"
                    }, {
                        expr: "object.fax.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.fax)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormFax'])"
                    } ]
                },
                phone: {
                    title: "htmlFormPhone",
                    type: "tel",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.phone.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormPhone', 40])"
                    }, {
                        expr: "object.phone.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.phone)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormPhone'])"
                    } ]
                },
                web_url: {
                    title: "htmlFormWebsite",
                    type: "url",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.web_url.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormWebsite', 255])"
                    } ]
                },
                bil_addr_street: {
                    title: "htmlFormStreet",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.bil_addr_street.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormStreet', 255])"
                    } ]
                },
                bil_addr_city: {
                    title: "htmlFormCity",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.bil_addr_city.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCity', 40])"
                    } ]
                },
                bil_addr_postal_code: {
                    title: "htmlFormZipCode",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.bil_addr_postal_code.length < 20",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormZipCode', 20])"
                    } ]
                },
                bil_addr_state: {
                    title: "htmlFormState",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.bil_addr_state.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormState', 80])"
                    } ]
                },
                bil_addr_country: {
                    title: "htmlFormCountry",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.bil_addr_country.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCountry', 80])"
                    } ]
                },
                description: {
                    title: "htmlFormDescription",
                    type: "textarea",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.description.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormDescription', 32000])"
                    } ]
                },
                annual_revenue: {
                    title: "htmlFormAnnualIncome",
                    type: "currency",
                    defaultValue: 0,
                    validations: [ {
                        expr: "/^\\d+$/.test(object.annual_revenue) && object.annual_revenue >= 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequireInteger', ['htmlFormAnnualIncome'])"
                    } ]
                },
                nb_employees: {
                    title: "htmlFormEmployeeNumber",
                    type: "number",
                    defaultValue: 0,
                    validations: [ {
                        expr: "/^\\d+$/.test(object.nb_employees) && object.nb_employees >= 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequireInteger', ['htmlFormEmployeeNumber'])"
                    } ]
                },
                industry: {
                    title: "htmlFormIndustry",
                    type: "select",
                    defaultValue: "",
                    defaultSetter: "firstOptionItem",
                    defaultSetterParam: [ "htmlOptionsIndustry" ],
                    optionList: "htmlOptionsIndustry",
                    validations: [ {
                        expr: "object.industry.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormIndustry', 40])"
                    } ]
                },
                sic: {
                    title: "htmlFormSicCode",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.sic.length < 20",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormSicCode', 20])"
                    } ]
                },
                type: {
                    title: "htmlFormType",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.type.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormType', 40])"
                    } ]
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [ {
                key: "web_url",
                fields: [ "web_url" ],
                force: !0,
                getter: "httpPrefixUrl"
            } ],
            editObjectGroups: [ {
                key: "title",
                title: "htmlFieldsetTitle",
                fields: [ "company_name" ]
            }, {
                key: "phones",
                title: "htmlFieldsetPhones",
                fields: [ "phone", "fax" ]
            }, {
                key: "bil_addr",
                title: "htmlFieldsetBillingAddress",
                fields: [ "bil_addr_street", "bil_addr_city", "bil_addr_postal_code", "bil_addr_state", "bil_addr_country" ]
            }, {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "description", "web_url" ]
            }, {
                key: "work",
                title: "htmlFieldsetWork",
                fields: [ "annual_revenue", "nb_employees", "industry", "sic", "type" ]
            } ],
            displayNameList: [ [ "company_name" ] ],
            displayDescription: [ "description" ],
            displayResumedObjectGroups: [ {
                key: "title",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "type",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            }, {
                key: "phones",
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "phone",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "web_url",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            } ],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "building-o",
                name: !0,
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "type",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            }, {
                key: "phones",
                synchro: !1,
                icon: "",
                name: !1,
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "phone",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "web_url",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "building-o",
                    name: !0,
                    title: "",
                    size: "",
                    fields: [ {
                        key: "type",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "big"
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "phone",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "fax",
                        title: !1,
                        prefix: "",
                        suffix: "htmlFormFaxAbbrev",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "web_url",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "c",
                brSeparated: !0,
                groups: [ {
                    title: "htmlFormTitleSegmentation",
                    size: "big",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "industry",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "nb_employees",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "annual_revenue",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "sic",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "e",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "bil_addr_street",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "bil_addr_city",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "bil_addr_postal_code",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "bil_addr_state",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "bil_addr_country",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Event: {
            isAttachment: !1,
            icon: "comments",
            colorType: "b",
            fields: [ "name", "location", "date_start", "date_end", "duration_hours", "duration_minutes", "description", "what_id", "owner_id", "assigned_contact_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "owner_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "assigned_contact_id",
                one: "leader",
                many: "led",
                types: [ "Contact" ]
            }, {
                key: "what_id",
                one: "affecter",
                many: "affected",
                types: [ "Account", "Opportunity" ]
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                name: {
                    title: "htmlFormName",
                    type: "",
                    defaultValue: "htmlDefaultEventName",
                    autofocus: !0,
                    validations: [ {
                        expr: "object.name.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormName'])"
                    }, {
                        expr: "object.name.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormName', 255])"
                    } ]
                },
                location: {
                    title: "htmlFormLocation",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.location.length < 200",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormLocation', 200])"
                    } ]
                },
                date_start: {
                    title: "htmlFormDateStart",
                    type: "datetime",
                    defaultValue: "",
                    defaultSetter: "nextHour",
                    calculations: [ {
                        toField: "date_end",
                        fromFields: [ "date_start", "duration_hours", "duration_minutes" ],
                        getter: "dateEndFromStart"
                    }, {
                        toField: "duration_hours",
                        fromFields: [ "date_start", "date_end" ],
                        getter: "diffHours"
                    }, {
                        toField: "duration_minutes",
                        fromFields: [ "date_start", "date_end" ],
                        getter: "diffMinutesInHour"
                    } ],
                    validations: [ {
                        expr: "object.date_start.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormDateStart'])"
                    }, {
                        expr: "a4pDateParse(object.date_start).getTime() < a4pDateParse(object.date_end).getTime()",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorDatesOrder', ['htmlFormDateStart', 'htmlFormDateEnd'])"
                    } ]
                },
                date_end: {
                    title: "htmlFormDateEnd",
                    type: "datetime",
                    defaultValue: "",
                    defaultSetter: "nextNextHour",
                    calculations: [ {
                        toField: "date_start",
                        fromFields: [ "date_start", "date_end", "duration_hours", "duration_minutes" ],
                        getter: "dateStartFromEnd"
                    }, {
                        toField: "duration_hours",
                        fromFields: [ "date_start", "date_end" ],
                        getter: "diffHours"
                    }, {
                        toField: "duration_minutes",
                        fromFields: [ "date_start", "date_end" ],
                        getter: "diffMinutesInHour"
                    } ],
                    validations: [ {
                        expr: "object.date_end.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormDateEnd'])"
                    }, {
                        expr: "a4pDateParse(object.date_start).getTime() < a4pDateParse(object.date_end).getTime()",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorDatesOrder', ['htmlFormDateStart', 'htmlFormDateEnd'])"
                    } ]
                },
                description: {
                    title: "htmlFormDescription",
                    type: "textarea",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.description.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormDescription', 32000])"
                    } ]
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [ {
                key: "duration_hours",
                fields: [ "date_start", "date_end" ],
                force: !0,
                getter: "diffHours"
            }, {
                key: "duration_minutes",
                fields: [ "date_start", "date_end" ],
                force: !0,
                getter: "diffMinutesInHour"
            } ],
            editObjectGroups: [ {
                key: "title",
                title: "htmlFieldsetDetails",
                fields: [ "name", "location", "date_start", "date_end" ]
            }, {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "description" ]
            } ],
            displayNameList: [ [ "name" ] ],
            displayDescription: [ "description" ],
            displayResumedObjectGroups: [ {
                key: "title",
                icon: "map-marker",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "location",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            }, {
                key: "time",
                icon: "clock-o",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "date_start",
                    type: "dateTIME",
                    title: !1,
                    prefix: "",
                    suffix: "rangeSeparator",
                    size: "smaller"
                }, {
                    key: "date_end",
                    type: "samedayTIME",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "smaller"
                } ]
            }, {
                key: "attendees",
                icon: "user",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "attendee",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            } ],
            displaySummarizedObjectGroups: [ {
                key: "title",
                icon: "map-marker",
                synchro: !0,
                name: !0,
                title: "",
                size: "",
                type: "a",
                brSeparated: !0,
                fields: [ {
                    key: "location",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            }, {
                key: "time",
                icon: "clock-o",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "date_start",
                    type: "dateTIME",
                    title: !1,
                    prefix: "",
                    suffix: "rangeSeparator",
                    size: "smaller"
                }, {
                    key: "date_end",
                    type: "samedayTIME",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "smaller"
                } ]
            }, {
                key: "attendees",
                icon: "user",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "attendee",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "comments",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                }, {
                    icon: "map-marker",
                    title: "",
                    size: "",
                    fields: [ {
                        key: "location",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    } ]
                }, {
                    icon: "clock-o",
                    title: "",
                    size: "",
                    fields: [ {
                        key: "date_start",
                        type: "dateTIME",
                        title: !1,
                        prefix: "",
                        suffix: "rangeSeparator",
                        size: "small"
                    }, {
                        key: "date_end",
                        type: "samedayTIME",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    } ]
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "leader",
                        title: !1,
                        prefix: "htmlTextContactOrigin",
                        suffix: "",
                        size: ""
                    }, {
                        key: "leaderType",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Task: {
            isAttachment: !1,
            icon: "tasks",
            colorType: "b",
            fields: [ "name", "date_start", "is_reminder_set", "date_reminder", "description", "status", "what_id", "owner_id", "assigned_contact_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "owner_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "assigned_contact_id",
                one: "leader",
                many: "led",
                types: [ "Contact" ]
            }, {
                key: "what_id",
                one: "affecter",
                many: "affected",
                types: [ "Account", "Opportunity" ]
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                name: {
                    title: "htmlFormName",
                    type: "",
                    defaultValue: "htmlDefaultTaskName",
                    autofocus: !0,
                    validations: [ {
                        expr: "object.name.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormName'])"
                    }, {
                        expr: "object.name.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormName', 255])"
                    } ]
                },
                date_start: {
                    title: "htmlFormDueDate",
                    type: "date",
                    defaultValue: "",
                    defaultSetter: "tomorrow",
                    validations: [ {
                        expr: "object.date_start.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormDateStart'])"
                    } ]
                },
                is_reminder_set: {
                    title: "htmlFormReminderSet",
                    type: "boolean",
                    defaultValue: !1
                },
                date_reminder: {
                    title: "htmlFormDateReminder",
                    type: "datetime",
                    defaultValue: "",
                    defaultSetter: "tomorrowPrevHour",
                    validations: [ {
                        expr: "!object.is_reminder_set || (object.date_reminder.length > 0)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormDateReminder'])"
                    }, {
                        expr: "!object.is_reminder_set || (a4pDateParse(object.date_reminder).getTime() < a4pDateParse(object.date_start).getTime())",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorDatesOrder', ['htmlFormDateStart', 'htmlFormDateReminder'])"
                    } ]
                },
                description: {
                    title: "htmlFormDescription",
                    type: "textarea",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.description.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormDescription', 32000])"
                    } ]
                },
                status: {
                    title: "htmlFormStatus",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.status.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormStatus', 255])"
                    } ]
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [],
            editObjectGroups: [ {
                key: "title",
                title: "htmlFieldsetDetails",
                fields: [ "name", "date_start", "is_reminder_set", "date_reminder" ]
            }, {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "description" ]
            }, {
                key: "other",
                title: "htmlFieldsetOther",
                fields: [ "status" ]
            } ],
            displayNameList: [ [ "name" ] ],
            displayDescription: [ "description" ],
            displayResumedObjectGroups: [ {
                key: "title",
                icon: "map-marker",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "location",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            }, {
                key: "time",
                icon: "clock-o",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "date_start",
                    type: "dateTIME",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "smaller"
                } ]
            } ],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "map-marker",
                name: !0,
                title: "",
                size: "",
                type: "a",
                brSeparated: !0,
                fields: [ {
                    key: "location",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            }, {
                key: "time",
                icon: "clock-o",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "date_start",
                    type: "dateTIME",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "smaller"
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "tasks",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                }, {
                    icon: "map-marker",
                    title: "",
                    size: "",
                    fields: [ {
                        key: "location",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    } ]
                }, {
                    icon: "clock-o",
                    title: "",
                    size: "",
                    fields: [ {
                        key: "date_start",
                        type: "dateTIME",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    } ]
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "date_reminder",
                        title: !1,
                        prefix: "htmlTextReminder",
                        suffix: "",
                        size: ""
                    }, {
                        key: "is_reminder_set",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Opportunity: {
            isAttachment: !1,
            icon: "flag",
            colorType: "m",
            fields: [ "name", "date_closed", "stage", "amount", "next_step", "probability", "type", "description", "account_id", "contact_id", "assigned_contact_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "assigned_contact_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "contact_id",
                one: "accounter",
                many: "accounted",
                types: [ "Contact" ]
            }, {
                key: "account_id",
                one: "accounter",
                many: "accounted",
                types: [ "Account" ]
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                name: {
                    title: "htmlFormName",
                    type: "",
                    defaultValue: "htmlDefaultOpportunityName",
                    autofocus: !0,
                    validations: [ {
                        expr: "object.name.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormName'])"
                    }, {
                        expr: "object.name.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormName', 255])"
                    } ]
                },
                date_closed: {
                    title: "htmlFormDateClosed",
                    type: "date",
                    defaultValue: "",
                    defaultSetter: "tomorrow",
                    validations: [ {
                        expr: "object.date_closed.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormDateClosed'])"
                    } ]
                },
                stage: {
                    title: "htmlFormStage",
                    type: "select",
                    defaultSetter: "firstOptionItem",
                    defaultSetterParam: [ "htmlOptionsOpportunityStage" ],
                    optionList: "htmlOptionsOpportunityStage",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.stage.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormStage'])"
                    }, {
                        expr: "object.stage.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormStage', 40])"
                    } ]
                },
                amount: {
                    title: "htmlFormAmount",
                    type: "currency",
                    defaultValue: 0,
                    validations: [ {
                        expr: "object.amount != null && /^(\\d+)([.,]\\d{1,2})?$/.test(object.amount) && object.amount >= 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequireDouble', ['htmlFormAmount'])"
                    } ]
                },
                next_step: {
                    title: "htmlFormNextStep",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.next_step.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormNextStep', 255])"
                    } ]
                },
                probability: {
                    title: "htmlFormProbability",
                    type: "probability",
                    defaultValue: 100,
                    validations: [ {
                        expr: "/^\\d+$/.test(object.probability) && object.probability >= 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequireInteger', ['htmlFormProbability'])"
                    }, {
                        expr: "object.probability <= 100",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxValue', ['htmlFormProbability', 100])"
                    } ]
                },
                type: {
                    title: "htmlFormType",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.type.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormType', 40])"
                    } ]
                },
                description: {
                    title: "htmlFormDescription",
                    type: "textarea",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.description.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormDescription', 32000])"
                    } ]
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [],
            editObjectGroups: [ {
                key: "details",
                title: "htmlFieldsetDetails",
                fields: [ "name" ]
            }, {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "description" ]
            }, {
                key: "work",
                title: "htmlFieldsetWork",
                fields: [ "date_closed", "stage", "amount", "next_step", "probability", "type" ]
            } ],
            displayNameList: [ [ "name" ] ],
            displayDescription: [ "amount", "description" ],
            displayResumedObjectGroups: [ {
                key: "title",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "type",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            }, {
                key: "amount",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "amount",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            }, {
                key: "probability",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "probability",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            }, {
                key: "closed",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "date_closed",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            } ],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "flag",
                name: !0,
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "type",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            }, {
                key: "amount",
                synchro: !1,
                icon: "",
                name: !1,
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "amount",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            }, {
                key: "probability",
                synchro: !1,
                icon: "",
                name: !1,
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "probability",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            }, {
                key: "closed",
                synchro: !1,
                icon: "",
                name: !1,
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "date_closed",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "flag",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "type",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "amount",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "big"
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "probability",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    }, {
                        key: "date_closed",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    }, {
                        key: "stage",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    }, {
                        key: "next_step",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    } ]
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Lead: {
            isAttachment: !1,
            icon: "trophy",
            colorType: "m",
            fields: [ "salutation", "first_name", "last_name", "description", "lead_source", "email", "fax", "phone", "phone_mobile", "web_url", "company_name", "industry", "annual_revenue", "nb_employees", "primary_address_city", "primary_address_country", "primary_address_state", "primary_address_street", "primary_address_zipcode", "is_converted", "converted_account_id", "converted_contact_id", "converted_opportunity_id", "converted_date", "assigned_contact_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "assigned_contact_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "converted_account_id",
                one: "converted_to",
                many: "converted_from",
                types: [ "Account" ]
            }, {
                key: "converted_contact_id",
                one: "converted_to",
                many: "converted_from",
                types: [ "Contact" ]
            }, {
                key: "converted_opportunity_id",
                one: "converted_to",
                many: "converted_from",
                types: [ "Opportunity" ]
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                salutation: {
                    title: "htmlFormSalutation",
                    type: "select",
                    defaultValue: "",
                    defaultSetter: "firstOptionItem",
                    defaultSetterParam: [ "htmlOptionsSalutation" ],
                    optionList: "htmlOptionsSalutation",
                    validations: [ {
                        expr: "object.salutation.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormSalutation', 40])"
                    } ]
                },
                first_name: {
                    title: "htmlFormFirstName",
                    type: "",
                    autofocus: !0,
                    defaultValue: "htmlDefaultNewLead",
                    validations: [ {
                        expr: "object.first_name.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormFirstName'])"
                    }, {
                        expr: "object.first_name.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormFirstName', 40])"
                    } ]
                },
                last_name: {
                    title: "htmlFormLastName",
                    type: "",
                    defaultValue: "htmlDefaultNewLead",
                    validations: [ {
                        expr: "object.last_name.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormLastName'])"
                    }, {
                        expr: "object.last_name.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormLastName', 80])"
                    } ]
                },
                description: {
                    title: "htmlFormDescription",
                    type: "textarea",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.description.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormDescription', 32000])"
                    } ]
                },
                lead_source: {
                    title: "htmlFormLeadSource",
                    type: "select",
                    defaultValue: "",
                    defaultSetter: "firstOptionItem",
                    defaultSetterParam: [ "htmlOptionsLeadSource" ],
                    optionList: "htmlOptionsLeadSource",
                    validations: [ {
                        expr: "object.lead_source.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormLeadSource', 40])"
                    } ]
                },
                email: {
                    title: "htmlFormEmail",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.email.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormEmail', 80])"
                    }, {
                        expr: "object.email.length == 0 || /^[\\w._-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}$/.test(object.email)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorEmailFormat', ['htmlFormEmail'])"
                    } ]
                },
                fax: {
                    title: "htmlFormFax",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.fax.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormFax', 40])"
                    }, {
                        expr: "object.fax.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.fax)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormFax'])"
                    } ]
                },
                phone: {
                    title: "htmlFormPhone",
                    type: "tel",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.phone.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormPhone', 40])"
                    }, {
                        expr: "object.phone.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.phone)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormPhone'])"
                    } ]
                },
                phone_mobile: {
                    title: "htmlFormMobile",
                    type: "tel",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.phone_mobile.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormMobile', 40])"
                    }, {
                        expr: "object.phone_mobile.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.phone_mobile)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormMobile'])"
                    } ]
                },
                web_url: {
                    title: "htmlFormWebsite",
                    type: "url",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.web_url.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormWebsite', 255])"
                    } ]
                },
                company_name: {
                    title: "htmlFormCompanyName",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.company_name.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCompanyName', 255])"
                    } ]
                },
                industry: {
                    title: "htmlFormIndustry",
                    type: "select",
                    defaultValue: "",
                    defaultSetter: "firstOptionItem",
                    defaultSetterParam: [ "htmlOptionsIndustry" ],
                    optionList: "htmlOptionsIndustry",
                    validations: [ {
                        expr: "object.industry.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormIndustry', 40])"
                    } ]
                },
                annual_revenue: {
                    title: "htmlFormAnnualIncome",
                    type: "currency",
                    defaultValue: 0,
                    validations: [ {
                        expr: "/^\\d+$/.test(object.annual_revenue) && object.annual_revenue >= 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequireInteger', ['htmlFormAnnualIncome'])"
                    } ]
                },
                nb_employees: {
                    title: "htmlFormEmployeeNumber",
                    type: "number",
                    defaultValue: 0,
                    validations: [ {
                        expr: "/^\\d+$/.test(object.nb_employees) && object.nb_employees >= 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequireInteger', ['htmlFormEmployeeNumber'])"
                    } ]
                },
                primary_address_street: {
                    title: "htmlFormStreet",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_street.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormStreet', 255])"
                    } ]
                },
                primary_address_city: {
                    title: "htmlFormCity",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_city.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCity', 40])"
                    } ]
                },
                primary_address_zipcode: {
                    title: "htmlFormZipCode",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_zipcode.length < 20",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormZipCode', 20])"
                    } ]
                },
                primary_address_state: {
                    title: "htmlFormState",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_state.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormState', 80])"
                    } ]
                },
                primary_address_country: {
                    title: "htmlFormCountry",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_country.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCountry', 80])"
                    } ]
                },
                is_converted: {
                    title: "",
                    type: "boolean",
                    defaultValue: !1
                },
                converted_date: {
                    title: "htmlFormConvertedDate",
                    type: "date",
                    defaultValue: ""
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [ {
                key: "web_url",
                fields: [ "web_url" ],
                force: !0,
                getter: "httpPrefixUrl"
            } ],
            editObjectGroups: [ {
                key: "details",
                title: "htmlFieldsetDetails",
                fields: [ "salutation", "first_name", "last_name" ]
            }, {
                key: "contact",
                title: "htmlFieldsetContact",
                fields: [ "phone", "phone_mobile", "fax", "email" ]
            }, {
                key: "address",
                title: "htmlFieldsetAddress",
                fields: [ "primary_address_street", "primary_address_city", "primary_address_zipcode", "primary_address_state", "primary_address_country" ]
            }, {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "description", "lead_source", "web_url" ]
            }, {
                key: "work",
                title: "htmlFieldsetWork",
                fields: [ "company_name", "annual_revenue", "nb_employees", "industry" ]
            } ],
            displayNameList: [ [ "last_name", "first_name" ], [ "first_name", "last_name" ], [ "salutation", "first_name", "last_name" ], [ "salutation", "last_name", "first_name" ] ],
            displayDescription: [ "description" ],
            displayResumedObjectGroups: [ {
                key: "title",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "company_name",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "web_url",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            }, {
                key: "phones",
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "phone",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "phone_mobile",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "email",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            } ],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "trophy",
                name: !0,
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "company_name",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "web_url",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            }, {
                key: "phones",
                synchro: !1,
                icon: "",
                name: !1,
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "phone",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "phone_mobile",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "email",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "trophy",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "title",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "big"
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "company_name",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "web_url",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "phone",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "phone_mobile",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "email",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "fax",
                        title: !1,
                        prefix: "",
                        suffix: "htmlFormFaxAbbrev",
                        size: ""
                    } ]
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "c",
                brSeparated: !0,
                groups: [ {
                    title: "htmlFormTitleContactDetails",
                    size: "big",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "primary_address_street",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "primary_address_city",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "primary_address_zipcode",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "primary_address_state",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "primary_address_country",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "htmlFormTitleSegmentation",
                    size: "big",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "industry",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "nb_employees",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "annual_revenue",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "lead_source",
                        title: !1,
                        prefix: "htmlTextContactOrigin",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "converted_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Document: {
            isAttachment: !1,
            icon: "book",
            colorType: "j",
            fields: [ "document_type", "name", "mimetype", "description", "length", "path", "extension", "rootname", "filePath", "fileUrl", "parent_id", "owner_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "owner_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "parent_id",
                one: "parent",
                many: "child",
                types: [ "Account", "Contact", "Event", "Opportunity" ],
                cascadeDelete: "many"
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                rootname: {
                    title: "htmlFormName",
                    type: "",
                    autofocus: !0,
                    defaultValue: "",
                    validations: [ {
                        expr: "object.rootname.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormName'])"
                    } ]
                },
                description: {
                    title: "htmlFormDescription",
                    type: "textarea",
                    defaultValue: ""
                },
                length: {
                    title: "",
                    type: "number",
                    defaultValue: 0
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [ {
                key: "document_type",
                fields: [],
                force: !1,
                getter: "attachmentType"
            }, {
                key: "extension",
                fields: [ "name" ],
                force: !1,
                getter: "fileExtension"
            }, {
                key: "rootname",
                fields: [ "name" ],
                force: !1,
                getter: "fileRootname"
            }, {
                key: "name",
                fields: [ "rootname", "extension" ],
                force: !0,
                getter: "fileName"
            }, {
                key: "mimetype",
                fields: [ "name" ],
                force: !1,
                getter: "fileFirstMimetype"
            }, {
                key: "path",
                fields: [],
                force: !1,
                getter: "dirPath"
            }, {
                key: "filePath",
                fields: [ "path", "id", "extension" ],
                force: !1,
                getter: "filePath"
            }, {
                key: "fileUrl",
                fields: [ "filePath" ],
                force: !1,
                getter: "fileUrl"
            } ],
            editObjectGroups: [ {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "rootname", "description" ]
            } ],
            displayNameList: [ [ "name" ] ],
            displayDescription: [ "description" ],
            displayResumedObjectGroups: [],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "book",
                name: !0,
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: []
            }, {
                key: "data",
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "created_by_id",
                    title: !1,
                    prefix: "htmlFormCreatedBy",
                    suffix: "",
                    size: ""
                }, {
                    key: "created_date",
                    title: !1,
                    prefix: "htmlFormCreatedOn",
                    suffix: "",
                    size: ""
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "book",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Note: {
            isAttachment: !1,
            icon: "file-text-o",
            colorType: "j",
            fields: [ "title", "when", "description", "parent_id", "owner_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "owner_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "parent_id",
                one: "parent",
                many: "child",
                types: [ "Account", "Contact", "Event", "Opportunity" ],
                cascadeDelete: "many"
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                title: {
                    title: "htmlFormTitle",
                    autofocus: !0,
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.title.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormTitle'])"
                    }, {
                        expr: "object.title.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormTitle', 255])"
                    } ]
                },
                description: {
                    title: "htmlFormDescription",
                    type: "textarea",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.description.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormDescription', 32000])"
                    } ]
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [],
            editObjectGroups: [ {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "title", "description" ]
            } ],
            displayNameList: [ [ "title" ] ],
            displayDescription: [ "description" ],
            displayResumedObjectGroups: [],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "file-text-o",
                name: !0,
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: []
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "file-text-o",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "c",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "message",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Report: {
            isAttachment: !1,
            icon: "book",
            colorType: "j",
            fields: [ "title", "when", "description", "message", "contact_ids", "document_ids", "ratings", "parent_id", "owner_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "owner_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "parent_id",
                one: "parent",
                many: "child",
                types: [ "Account", "Contact", "Event", "Opportunity" ],
                cascadeDelete: "many"
            }, {
                key: "contact_ids",
                one: "mail_to",
                many: "mailed_from",
                types: [ "Contact" ]
            }, {
                key: "document_ids",
                one: "join_to",
                many: "joined_from",
                types: [ "Document" ]
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                title: {
                    title: "htmlFormTitle",
                    autofocus: !0,
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.title.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormTitle'])"
                    }, {
                        expr: "object.title.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormTitle', 255])"
                    } ]
                },
                description: {
                    title: "htmlFormDescription",
                    type: "textarea",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.description.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormDescription', 32000])"
                    } ]
                },
                message: {
                    title: "htmlFormMessage",
                    type: "textarea",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.message.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormMessage', 32000])"
                    } ]
                },
                ratings: {
                    title: "htmlTextRatings",
                    type: "rating",
                    defaultValue: {
                        code: "Feeling",
                        name: "Feeling",
                        type: "star",
                        value: 0
                    }
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [],
            editObjectGroups: [ {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "title", "description", "message" ]
            } ],
            displayNameList: [ [ "title" ] ],
            displayDescription: [ "description" ],
            displayResumedObjectGroups: [],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "book",
                name: !0,
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: []
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "book",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "c",
                brSeparated: !0,
                groups: [ {
                    title: "htmlTitleMailedPeople",
                    size: "big",
                    fields: [ {
                        key: "contact_ids",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "",
                        separator: " , "
                    } ]
                }, {
                    title: "htmlTitleJoinedDoc",
                    size: "big",
                    fields: [ {
                        key: "document_ids",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "",
                        separator: " , "
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "ratings",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "",
                        separator: "br"
                    } ]
                } ]
            }, {
                type: "e",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "message",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Plan: {
            isAttachment: !1,
            icon: "th-list",
            colorType: "j",
            fields: [ "title", "pos", "parent_id", "owner_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "owner_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "parent_id",
                one: "parent",
                many: "child",
                types: [ "Event", "Plan" ],
                cascadeDelete: "many"
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                title: {
                    title: "htmlFormTitle",
                    autofocus: !0,
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.title.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormTitle'])"
                    }, {
                        expr: "object.title.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormTitle', 255])"
                    } ]
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [],
            editObjectGroups: [ {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "title" ]
            } ],
            displayNameList: [ [ "title" ] ],
            displayDescription: [],
            displayResumedObjectGroups: [],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "th-list",
                name: !0,
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: []
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "th-list",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "pos",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Attachee: {
            isAttachment: !0,
            icon: "file",
            colorType: "m",
            fields: [ "event_id", "document_id" ],
            linkFields: [ {
                key: "event_id",
                one: "attached",
                many: "attachee",
                types: [ "Account", "Contact", "Event", "Opportunity" ],
                cascadeDelete: "many"
            }, {
                key: "document_id",
                one: "attachee",
                many: "attached",
                types: [ "Document" ],
                cascadeDelete: "many"
            } ],
            attachee: "document_id",
            attached: "event_id",
            editObjectFields: {},
            calculateObjectFields: [],
            editObjectGroups: [],
            displayNameList: [ [] ],
            displayDescription: [],
            displayResumedObjectGroups: [],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "file",
                name: !1,
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "event_id",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "",
                    separator: ""
                }, {
                    key: "document_id",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "",
                    separator: ""
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "file",
                    name: !1,
                    title: "",
                    size: "bigger",
                    fields: [ {
                        key: "event_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "",
                        separator: ""
                    }, {
                        key: "document_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "",
                        separator: ""
                    } ]
                } ]
            } ]
        },
        Attendee: {
            isAttachment: !0,
            icon: "user",
            colorType: "m",
            fields: [ "event_id", "relation_id" ],
            linkFields: [ {
                key: "event_id",
                one: "attended",
                many: "attendee",
                types: [ "Event" ],
                cascadeDelete: "many"
            }, {
                key: "relation_id",
                one: "attendee",
                many: "attended",
                types: [ "Contact" ],
                cascadeDelete: "many"
            } ],
            attachee: "relation_id",
            attached: "event_id",
            editObjectFields: {},
            calculateObjectFields: [],
            editObjectGroups: [],
            displayNameList: [ [] ],
            displayDescription: [],
            displayResumedObjectGroups: [],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "user",
                name: !1,
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "event_id",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "",
                    separator: ""
                }, {
                    key: "relation_id",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "",
                    separator: ""
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "user",
                    name: !1,
                    title: "",
                    size: "bigger",
                    fields: [ {
                        key: "event_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "",
                        separator: ""
                    }, {
                        key: "relation_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "",
                        separator: ""
                    } ]
                } ]
            } ]
        },
        Plannee: {
            isAttachment: !0,
            icon: "file",
            colorType: "m",
            fields: [ "parent_id", "object_id" ],
            linkFields: [ {
                key: "parent_id",
                one: "planned",
                many: "plannee",
                types: [ "Event", "Plan" ],
                cascadeDelete: "many"
            }, {
                key: "object_id",
                one: "plannee",
                many: "planned",
                types: [ "Document", "Note", "Report" ],
                cascadeDelete: "many"
            } ],
            attachee: "object_id",
            attached: "parent_id",
            editObjectFields: {},
            calculateObjectFields: [],
            editObjectGroups: [],
            displayNameList: [ [] ],
            displayDescription: [],
            displayResumedObjectGroups: [],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "file",
                name: !1,
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "parent_id",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "",
                    separator: ""
                }, {
                    key: "object_id",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "",
                    separator: ""
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "file",
                    name: !1,
                    title: "",
                    size: "bigger",
                    fields: [ {
                        key: "parent_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "",
                        separator: ""
                    }, {
                        key: "object_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "",
                        separator: ""
                    } ]
                } ]
            } ]
        }
    }, Model.objectArrays = {
        Facet: {
            facets_ids: !0,
            items_ids: !0
        },
        Contact: {},
        Account: {},
        Event: {},
        Task: {},
        Opportunity: {},
        Lead: {},
        Document: {},
        Note: {},
        Report: {
            contact_ids: !0,
            document_ids: !0,
            ratings: !0
        },
        Plan: {},
        Attendee: {},
        Attachee: {},
        Plannee: {}
    }, Model.allPossibleLinkActionList = [ {
        fromType: "Account",
        fromLink: "child",
        toType: "Account"
    }, {
        fromType: "Account",
        fromLink: "parent",
        toType: "Account"
    }, {
        fromType: "Account",
        fromLink: "accounted",
        toType: "Contact"
    }, {
        fromType: "Account",
        fromLink: "attachee",
        toType: "Document"
    }, {
        fromType: "Account",
        fromLink: "child",
        toType: "Document"
    }, {
        fromType: "Account",
        fromLink: "affected",
        toType: "Event"
    }, {
        fromType: "Account",
        fromLink: "faceter",
        toType: "Facet"
    }, {
        fromType: "Account",
        fromLink: "child",
        toType: "Note"
    }, {
        fromType: "Account",
        fromLink: "accounted",
        toType: "Opportunity"
    }, {
        fromType: "Account",
        fromLink: "child",
        toType: "Report"
    }, {
        fromType: "Account",
        fromLink: "affected",
        toType: "Task"
    }, {
        fromType: "Contact",
        fromLink: "accounter",
        toType: "Account"
    }, {
        fromType: "Contact",
        fromLink: "manager",
        toType: "Contact"
    }, {
        fromType: "Contact",
        fromLink: "managed",
        toType: "Contact"
    }, {
        fromType: "Contact",
        fromLink: "attachee",
        toType: "Document"
    }, {
        fromType: "Contact",
        fromLink: "child",
        toType: "Document"
    }, {
        fromType: "Contact",
        fromLink: "attended",
        toType: "Event"
    }, {
        fromType: "Contact",
        fromLink: "led",
        toType: "Event"
    }, {
        fromType: "Contact",
        fromLink: "faceter",
        toType: "Facet"
    }, {
        fromType: "Contact",
        fromLink: "child",
        toType: "Note"
    }, {
        fromType: "Contact",
        fromLink: "accounted",
        toType: "Opportunity"
    }, {
        fromType: "Contact",
        fromLink: "mailed_from",
        toType: "Report"
    }, {
        fromType: "Contact",
        fromLink: "child",
        toType: "Report"
    }, {
        fromType: "Contact",
        fromLink: "led",
        toType: "Task"
    }, {
        fromType: "Document",
        fromLink: "attached",
        toType: "Account"
    }, {
        fromType: "Document",
        fromLink: "parent",
        toType: "Account"
    }, {
        fromType: "Document",
        fromLink: "attached",
        toType: "Contact"
    }, {
        fromType: "Document",
        fromLink: "parent",
        toType: "Contact"
    }, {
        fromType: "Document",
        fromLink: "attached",
        toType: "Event"
    }, {
        fromType: "Document",
        fromLink: "planned",
        toType: "Event"
    }, {
        fromType: "Document",
        fromLink: "parent",
        toType: "Event"
    }, {
        fromType: "Document",
        fromLink: "faceter",
        toType: "Facet"
    }, {
        fromType: "Document",
        fromLink: "attached",
        toType: "Opportunity"
    }, {
        fromType: "Document",
        fromLink: "parent",
        toType: "Opportunity"
    }, {
        fromType: "Document",
        fromLink: "planned",
        toType: "Plan"
    }, {
        fromType: "Document",
        fromLink: "joined_from",
        toType: "Report"
    }, {
        fromType: "Event",
        fromLink: "affecter",
        toType: "Account"
    }, {
        fromType: "Event",
        fromLink: "attendee",
        toType: "Contact"
    }, {
        fromType: "Event",
        fromLink: "leader",
        toType: "Contact"
    }, {
        fromType: "Event",
        fromLink: "attachee",
        toType: "Document"
    }, {
        fromType: "Event",
        fromLink: "plannee",
        toType: "Document"
    }, {
        fromType: "Event",
        fromLink: "child",
        toType: "Document"
    }, {
        fromType: "Event",
        fromLink: "faceter",
        toType: "Facet"
    }, {
        fromType: "Event",
        fromLink: "plannee",
        toType: "Note"
    }, {
        fromType: "Event",
        fromLink: "child",
        toType: "Note"
    }, {
        fromType: "Event",
        fromLink: "affecter",
        toType: "Opportunity"
    }, {
        fromType: "Event",
        fromLink: "child",
        toType: "Plan"
    }, {
        fromType: "Event",
        fromLink: "plannee",
        toType: "Report"
    }, {
        fromType: "Event",
        fromLink: "child",
        toType: "Report"
    }, {
        fromType: "Facet",
        fromLink: "faceted",
        toType: "Account"
    }, {
        fromType: "Facet",
        fromLink: "faceted",
        toType: "Contact"
    }, {
        fromType: "Facet",
        fromLink: "faceted",
        toType: "Document"
    }, {
        fromType: "Facet",
        fromLink: "faceted",
        toType: "Event"
    }, {
        fromType: "Facet",
        fromLink: "child",
        toType: "Facet"
    }, {
        fromType: "Facet",
        fromLink: "parent",
        toType: "Facet"
    }, {
        fromType: "Facet",
        fromLink: "faceted",
        toType: "Lead"
    }, {
        fromType: "Facet",
        fromLink: "faceted",
        toType: "Opportunity"
    }, {
        fromType: "Facet",
        fromLink: "faceted",
        toType: "Task"
    }, {
        fromType: "Lead",
        fromLink: "faceter",
        toType: "Facet"
    }, {
        fromType: "Note",
        fromLink: "parent",
        toType: "Account"
    }, {
        fromType: "Note",
        fromLink: "parent",
        toType: "Contact"
    }, {
        fromType: "Note",
        fromLink: "planned",
        toType: "Event"
    }, {
        fromType: "Note",
        fromLink: "parent",
        toType: "Event"
    }, {
        fromType: "Note",
        fromLink: "parent",
        toType: "Opportunity"
    }, {
        fromType: "Note",
        fromLink: "planned",
        toType: "Plan"
    }, {
        fromType: "Opportunity",
        fromLink: "accounter",
        toType: "Account"
    }, {
        fromType: "Opportunity",
        fromLink: "accounter",
        toType: "Contact"
    }, {
        fromType: "Opportunity",
        fromLink: "attachee",
        toType: "Document"
    }, {
        fromType: "Opportunity",
        fromLink: "child",
        toType: "Document"
    }, {
        fromType: "Opportunity",
        fromLink: "affected",
        toType: "Event"
    }, {
        fromType: "Opportunity",
        fromLink: "faceter",
        toType: "Facet"
    }, {
        fromType: "Opportunity",
        fromLink: "child",
        toType: "Note"
    }, {
        fromType: "Opportunity",
        fromLink: "child",
        toType: "Report"
    }, {
        fromType: "Opportunity",
        fromLink: "affected",
        toType: "Task"
    }, {
        fromType: "Plan",
        fromLink: "plannee",
        toType: "Document"
    }, {
        fromType: "Plan",
        fromLink: "parent",
        toType: "Event"
    }, {
        fromType: "Plan",
        fromLink: "plannee",
        toType: "Note"
    }, {
        fromType: "Plan",
        fromLink: "parent",
        toType: "Plan"
    }, {
        fromType: "Plan",
        fromLink: "child",
        toType: "Plan"
    }, {
        fromType: "Plan",
        fromLink: "plannee",
        toType: "Report"
    }, {
        fromType: "Report",
        fromLink: "parent",
        toType: "Account"
    }, {
        fromType: "Report",
        fromLink: "mail_to",
        toType: "Contact"
    }, {
        fromType: "Report",
        fromLink: "parent",
        toType: "Contact"
    }, {
        fromType: "Report",
        fromLink: "join_to",
        toType: "Document"
    }, {
        fromType: "Report",
        fromLink: "planned",
        toType: "Event"
    }, {
        fromType: "Report",
        fromLink: "parent",
        toType: "Event"
    }, {
        fromType: "Report",
        fromLink: "parent",
        toType: "Opportunity"
    }, {
        fromType: "Report",
        fromLink: "planned",
        toType: "Plan"
    }, {
        fromType: "Task",
        fromLink: "affecter",
        toType: "Account"
    }, {
        fromType: "Task",
        fromLink: "leader",
        toType: "Contact"
    }, {
        fromType: "Task",
        fromLink: "faceter",
        toType: "Facet"
    }, {
        fromType: "Task",
        fromLink: "affecter",
        toType: "Opportunity"
    } ], Model.linkActionMap = {};
    for (var i = 0, n = Model.allPossibleLinkActionList.length; n > i; i++) {
        var desc = Model.allPossibleLinkActionList[i];
        a4p.isUndefined(Model.linkActionMap[desc.fromType]) && (Model.linkActionMap[desc.fromType] = {}), 
        a4p.isUndefined(Model.linkActionMap[desc.fromType][desc.toType]) && (Model.linkActionMap[desc.fromType][desc.toType] = []), 
        Model.linkActionMap[desc.fromType][desc.toType].push(desc.fromLink);
    }
    Model.allTypes = [], Model.objectTypes = [], Model.attachTypes = [], Model.isAttachType = {}, 
    Model.isAutonomousType = {};
    for (var a4p_type in Model.a4p_types) if (Model.a4p_types.hasOwnProperty(a4p_type)) {
        var desc = Model.a4p_types[a4p_type];
        desc.displayName = desc.displayNameList[0] || [], desc.isAttachment ? (Model.attachTypes.push(a4p_type), 
        Model.isAttachType[a4p_type] = !0) : (Model.objectTypes.push(a4p_type), Model.isAttachType[a4p_type] = !1), 
        Model.allTypes.push(a4p_type), desc.isAutonomousType = !0, desc.linkDescs = {};
        for (var linkIdx = 0; linkIdx < desc.linkFields.length; linkIdx++) {
            var linkDesc = desc.linkFields[linkIdx];
            desc.linkDescs[linkDesc.key] = linkDesc, "many" != linkDesc.cascadeDelete || 1 == linkDesc.types.length && linkDesc.types[0] == a4p_type || (desc.isAutonomousType = !1);
        }
    }
    return Model.formatEventName = function(date_start, name) {
        var date = "";
        return date_start && (date = date_start.substring(0, 16)), name = date + " " + name;
    }, Model.getTypeIcon = function(type) {
        var result = "";
        return type && a4p.isDefined(Model.a4p_types[type]) && (result = Model.a4p_types[type].icon), 
        result;
    }, Model.getTypeColor = function(type) {
        var result = "";
        return type && a4p.isDefined(Model.a4p_types[type]) && (result = Model.a4p_types[type].colorType), 
        result;
    }, Model.getItemIcon = function(item) {
        var result = "";
        return null != item && a4p.isDefined(Model.a4p_types[item.a4p_type]) && (result = Model.a4p_types[item.a4p_type].icon), 
        result;
    }, Model.getItemColor = function(item) {
        var result = "";
        return null != item && a4p.isDefined(Model.a4p_types[item.a4p_type]) && (result = Model.a4p_types[item.a4p_type].colorType), 
        result;
    }, Model.getItemHtmlDescription = function(item) {
        var result = "";
        if (null != item && a4p.isDefined(Model.a4p_types[item.a4p_type])) {
            for (var fieldNameIdx = 0; fieldNameIdx < Model.a4p_types[item.a4p_type].displayDescription.length; fieldNameIdx++) {
                var fieldName = Model.a4p_types[item.a4p_type].displayDescription[fieldNameIdx];
                result = result + " " + item[fieldName];
            }
            result = "<p>" + result.trim() + "</p>";
        }
        return result;
    }, Model.files = {
        Document: {
            filePath: "filePath",
            fileName: "name",
            fileExtension: "extension",
            parent: "parent_id"
        }
    }, Model.mimetypes = {
        "3dm": [ "x-world/x-3dmf" ],
        "3dmf": [ "x-world/x-3dmf" ],
        a: [ "application/octet-stream" ],
        aab: [ "application/x-authorware-bin" ],
        aam: [ "application/x-authorware-map" ],
        aas: [ "application/x-authorware-seg" ],
        abc: [ "text/vnd.abc" ],
        acgi: [ "text/html" ],
        afl: [ "video/animaflex" ],
        ai: [ "application/postscript" ],
        aif: [ "audio/aiff", "audio/x-aiff" ],
        aifc: [ "audio/aiff", "audio/x-aiff" ],
        aiff: [ "audio/aiff", "audio/x-aiff" ],
        aim: [ "application/x-aim" ],
        aip: [ "text/x-audiosoft-intra" ],
        ani: [ "application/x-navi-animation" ],
        aos: [ "application/x-nokia-9000-communicator-add-on-software" ],
        aps: [ "application/mime" ],
        arc: [ "application/octet-stream" ],
        arj: [ "application/arj", "application/octet-stream" ],
        art: [ "image/x-jg" ],
        asf: [ "video/x-ms-asf" ],
        asm: [ "text/x-asm" ],
        asp: [ "text/asp" ],
        asx: [ "application/x-mplayer2", "video/x-ms-asf", "video/x-ms-asf-plugin" ],
        au: [ "audio/basic", "audio/x-au" ],
        avi: [ "video/avi", "video/msvideo", "video/x-msvideo", "application/x-troff-msvideo" ],
        avs: [ "video/avs-video" ],
        bcpio: [ "application/x-bcpio" ],
        bin: [ "application/octet-stream", "application/mac-binary", "application/macbinary", "application/x-binary", "application/x-macbinary" ],
        bm: [ "image/bmp" ],
        bmp: [ "image/bmp", "image/x-windows-bmp" ],
        boo: [ "application/book" ],
        book: [ "application/book" ],
        boz: [ "application/x-bzip2" ],
        bsh: [ "application/x-bsh" ],
        bz: [ "application/x-bzip" ],
        bz2: [ "application/x-bzip2" ],
        c: [ "text/plain", "text/x-c" ],
        "c++": [ "text/plain" ],
        cat: [ "application/vnd.ms-pki.seccat" ],
        cc: [ "text/plain", "text/x-c" ],
        ccad: [ "application/clariscad" ],
        cco: [ "application/x-cocoa" ],
        cdf: [ "application/cdf", "application/x-cdf", "application/x-netcdf" ],
        cer: [ "application/pkix-cert", "application/x-x509-ca-cert" ],
        cha: [ "application/x-chat" ],
        chat: [ "application/x-chat" ],
        "class": [ "application/java", "application/java-byte-code", "application/x-java-class" ],
        com: [ "application/octet-stream", "text/plain" ],
        conf: [ "text/plain" ],
        cpio: [ "application/x-cpio" ],
        cpp: [ "text/x-c" ],
        cpt: [ "application/mac-compactpro", "application/x-compactpro", "application/x-cpt" ],
        crl: [ "application/pkcs-crl", "application/pkix-crl" ],
        crt: [ "application/pkix-cert", "application/x-x509-ca-cert", "application/x-x509-user-cert" ],
        csh: [ "application/x-csh", "text/x-script.csh" ],
        css: [ "application/x-pointplus", "text/css" ],
        cxx: [ "text/plain" ],
        dcr: [ "application/x-director" ],
        deepv: [ "application/x-deepv" ],
        def: [ "text/plain" ],
        der: [ "application/x-x509-ca-cert" ],
        dif: [ "video/x-dv" ],
        dir: [ "application/x-director" ],
        dl: [ "video/dl", "video/x-dl" ],
        doc: [ "application/msword" ],
        docx: [ "application/msword" ],
        dot: [ "application/msword" ],
        dp: [ "application/commonground" ],
        drw: [ "application/drafting" ],
        dump: [ "application/octet-stream" ],
        dv: [ "video/x-dv" ],
        dvi: [ "application/x-dvi" ],
        dwf: [ "drawing/x-dwf", "model/vnd.dwf" ],
        dwg: [ "application/acad", "image/vnd.dwg", "image/x-dwg" ],
        dxf: [ "application/dxf", "image/vnd.dwg", "image/x-dwg" ],
        dxr: [ "application/x-director" ],
        el: [ "text/x-script.elisp" ],
        elc: [ "application/x-bytecode.elisp", "application/x-elc" ],
        env: [ "application/x-envoy" ],
        eps: [ "application/postscript" ],
        es: [ "application/x-esrehber" ],
        etx: [ "text/x-setext" ],
        evy: [ "application/envoy", "application/x-envoy" ],
        exe: [ "application/octet-stream" ],
        f: [ "text/plain", "text/x-fortran" ],
        f77: [ "text/x-fortran" ],
        f90: [ "text/plain", "text/x-fortran" ],
        fdf: [ "application/vnd.fdf" ],
        fif: [ "application/fractals", "image/fif" ],
        fli: [ "video/fli", "video/x-fli" ],
        flo: [ "image/florian" ],
        flx: [ "text/vnd.fmi.flexstor" ],
        fmf: [ "video/x-atomic3d-feature" ],
        "for": [ "text/plain", "text/x-fortran" ],
        fpx: [ "image/vnd.fpx", "image/vnd.net-fpx" ],
        frl: [ "application/freeloader" ],
        funk: [ "audio/make" ],
        g: [ "text/plain" ],
        g3: [ "image/g3fax" ],
        gif: [ "image/gif" ],
        gl: [ "video/gl", "video/x-gl" ],
        gsd: [ "audio/x-gsm" ],
        gsm: [ "audio/x-gsm" ],
        gsp: [ "application/x-gsp" ],
        gss: [ "application/x-gss" ],
        gtar: [ "application/x-gtar" ],
        gz: [ "application/x-compressed", "application/x-gzip" ],
        gzip: [ "application/x-gzip", "multipart/x-gzip" ],
        h: [ "text/plain", "text/x-h" ],
        hdf: [ "application/x-hdf" ],
        help: [ "application/x-helpfile" ],
        hgl: [ "application/vnd.hp-hpgl" ],
        hh: [ "text/plain", "text/x-h" ],
        hlb: [ "text/x-script" ],
        hlp: [ "application/hlp", "application/x-helpfile", "application/x-winhelp" ],
        hpg: [ "application/vnd.hp-hpgl" ],
        hpgl: [ "application/vnd.hp-hpgl" ],
        hqx: [ "application/binhex", "application/binhex4", "application/mac-binhex", "application/mac-binhex40", "application/x-binhex40", "application/x-mac-binhex40" ],
        hta: [ "application/hta" ],
        htc: [ "text/x-component" ],
        htm: [ "text/html" ],
        html: [ "text/html" ],
        htmls: [ "text/html" ],
        htt: [ "text/webviewhtml" ],
        htx: [ "text/html" ],
        ice: [ "x-conference/x-cooltalk" ],
        ico: [ "image/x-icon" ],
        idc: [ "text/plain" ],
        ief: [ "image/ief" ],
        iefs: [ "image/ief" ],
        iges: [ "application/iges", "model/iges" ],
        igs: [ "application/iges", "model/iges" ],
        ima: [ "application/x-ima" ],
        imap: [ "application/x-httpd-imap" ],
        inf: [ "application/inf" ],
        ins: [ "application/x-internett-signup" ],
        ip: [ "application/x-ip2" ],
        isu: [ "video/x-isvideo" ],
        it: [ "audio/it" ],
        iv: [ "application/x-inventor" ],
        ivr: [ "i-world/i-vrml" ],
        ivy: [ "application/x-livescreen" ],
        jam: [ "audio/x-jam" ],
        jav: [ "text/plain", "text/x-java-source" ],
        java: [ "text/plain", "text/x-java-source" ],
        jcm: [ "application/x-java-commerce" ],
        jfif: [ "image/jpeg", "image/pjpeg" ],
        "jfif-tbnl": [ "image/jpeg" ],
        jpe: [ "image/jpeg", "image/pjpeg" ],
        jpeg: [ "image/jpeg", "image/pjpeg" ],
        jpg: [ "image/jpeg", "image/pjpeg" ],
        jps: [ "image/x-jps" ],
        js: [ "application/x-javascript" ],
        jut: [ "image/jutvision" ],
        kar: [ "audio/midi", "music/x-karaoke" ],
        ksh: [ "application/x-ksh", "text/x-script.ksh" ],
        la: [ "audio/nspaudio", "audio/x-nspaudio" ],
        lam: [ "audio/x-liveaudio" ],
        latex: [ "application/x-latex" ],
        lha: [ "application/lha", "application/octet-stream", "application/x-lha" ],
        lhx: [ "application/octet-stream" ],
        list: [ "text/plain" ],
        lma: [ "audio/nspaudio", "audio/x-nspaudio" ],
        log: [ "text/plain" ],
        lsp: [ "application/x-lisp", "text/x-script.lisp" ],
        lst: [ "text/plain" ],
        lsx: [ "text/x-la-asf" ],
        ltx: [ "application/x-latex" ],
        lzh: [ "application/octet-stream", "application/x-lzh" ],
        lzx: [ "application/lzx", "application/octet-stream", "application/x-lzx" ],
        m: [ "text/plain", "text/x-m" ],
        m1v: [ "video/mpeg" ],
        m2a: [ "audio/mpeg" ],
        m2v: [ "video/mpeg" ],
        m3u: [ "audio/x-mpequrl" ],
        man: [ "application/x-troff-man" ],
        map: [ "application/x-navimap" ],
        mar: [ "text/plain" ],
        mbd: [ "application/mbedlet" ],
        mc$: [ "application/x-magic-cap-package-1.0" ],
        mcd: [ "application/mcad", "application/x-mathcad" ],
        mcf: [ "image/vasa", "text/mcf" ],
        mcp: [ "application/netmc" ],
        me: [ "application/x-troff-me" ],
        mht: [ "message/rfc822" ],
        mhtml: [ "message/rfc822" ],
        mid: [ "application/x-midi", "audio/midi", "audio/x-mid", "audio/x-midi", "music/crescendo", "x-music/x-midi" ],
        midi: [ "application/x-midi", "audio/midi", "audio/x-mid", "audio/x-midi", "music/crescendo", "x-music/x-midi" ],
        mif: [ "application/x-frame", "application/x-mif" ],
        mime: [ "message/rfc822", "www/mime" ],
        mjf: [ "audio/x-vnd.audioexplosion.mjuicemediafile" ],
        mjpg: [ "video/x-motion-jpeg" ],
        mm: [ "application/base64", "application/x-meme" ],
        mme: [ "application/base64" ],
        mod: [ "audio/mod", "audio/x-mod" ],
        moov: [ "video/quicktime" ],
        mov: [ "video/quicktime" ],
        movie: [ "video/x-sgi-movie" ],
        mp2: [ "audio/mpeg", "audio/x-mpeg", "video/mpeg", "video/x-mpeg", "video/x-mpeq2a" ],
        mp3: [ "audio/mpeg3", "audio/x-mpeg-3", "video/mpeg", "video/x-mpeg" ],
        mp4: [ "video/mp4" ],
        mpa: [ "audio/mpeg", "video/mpeg" ],
        mpc: [ "application/x-project" ],
        mpe: [ "video/mpeg" ],
        mpeg: [ "video/mpeg" ],
        mpg: [ "audio/mpeg", "video/mpeg" ],
        mpga: [ "audio/mpeg" ],
        mpp: [ "application/vnd.ms-project" ],
        mpt: [ "application/x-project" ],
        mpv: [ "application/x-project" ],
        mpx: [ "application/x-project" ],
        mrc: [ "application/marc" ],
        ms: [ "application/x-troff-ms" ],
        mv: [ "video/x-sgi-movie" ],
        my: [ "audio/make" ],
        mzz: [ "application/x-vnd.audioexplosion.mzz" ],
        nap: [ "image/naplps" ],
        naplps: [ "image/naplps" ],
        nc: [ "application/x-netcdf" ],
        ncm: [ "application/vnd.nokia.configuration-message" ],
        nif: [ "image/x-niff" ],
        niff: [ "image/x-niff" ],
        nix: [ "application/x-mix-transfer" ],
        nsc: [ "application/x-conference" ],
        nvd: [ "application/x-navidoc" ],
        o: [ "application/octet-stream" ],
        oda: [ "application/oda" ],
        ogv: [ "video/ogg" ],
        omc: [ "application/x-omc" ],
        omcd: [ "application/x-omcdatamaker" ],
        omcr: [ "application/x-omcregerator" ],
        p: [ "text/x-pascal" ],
        p10: [ "application/pkcs10", "application/x-pkcs10" ],
        p12: [ "application/pkcs-12", "application/x-pkcs12" ],
        p7a: [ "application/x-pkcs7-signature" ],
        p7c: [ "application/pkcs7-mime", "application/x-pkcs7-mime" ],
        p7m: [ "application/pkcs7-mime", "application/x-pkcs7-mime" ],
        p7r: [ "application/x-pkcs7-certreqresp" ],
        p7s: [ "application/pkcs7-signature" ],
        part: [ "application/pro_eng" ],
        pas: [ "text/pascal" ],
        pbm: [ "image/x-portable-bitmap" ],
        pcl: [ "application/vnd.hp-pcl", "application/x-pcl" ],
        pct: [ "image/x-pict" ],
        pcx: [ "image/x-pcx" ],
        pdb: [ "chemical/x-pdb" ],
        pdf: [ "application/pdf" ],
        pfunk: [ "audio/make", "audio/make.my.funk" ],
        pgm: [ "image/x-portable-graymap", "image/x-portable-greymap" ],
        pic: [ "image/pict" ],
        pict: [ "image/pict" ],
        pkg: [ "application/x-newton-compatible-pkg" ],
        pko: [ "application/vnd.ms-pki.pko" ],
        pl: [ "text/plain", "text/x-script.perl" ],
        plx: [ "application/x-pixclscript" ],
        pm: [ "image/x-xpixmap", "text/x-script.perl-module" ],
        pm4: [ "application/x-pagemaker" ],
        pm5: [ "application/x-pagemaker" ],
        png: [ "image/png" ],
        pnm: [ "application/x-portable-anymap", "image/x-portable-anymap" ],
        pot: [ "application/mspowerpoint", "application/vnd.ms-powerpoint" ],
        pov: [ "model/x-pov" ],
        ppa: [ "application/vnd.ms-powerpoint" ],
        ppm: [ "image/x-portable-pixmap" ],
        pps: [ "application/mspowerpoint", "application/vnd.ms-powerpoint" ],
        ppt: [ "application/mspowerpoint", "application/powerpoint", "application/vnd.ms-powerpoint", "application/x-mspowerpoint" ],
        ppz: [ "application/mspowerpoint" ],
        pre: [ "application/x-freelance" ],
        prt: [ "application/pro_eng" ],
        ps: [ "application/postscript" ],
        psd: [ "application/octet-stream" ],
        pvu: [ "paleovu/x-pv" ],
        pwz: [ "application/vnd.ms-powerpoint" ],
        py: [ "text/x-script.phyton" ],
        pyc: [ "applicaiton/x-bytecode.python" ],
        qcp: [ "audio/vnd.qcelp" ],
        qd3: [ "x-world/x-3dmf" ],
        qd3d: [ "x-world/x-3dmf" ],
        qif: [ "image/x-quicktime" ],
        qt: [ "video/quicktime" ],
        qtc: [ "video/x-qtc" ],
        qti: [ "image/x-quicktime" ],
        qtif: [ "image/x-quicktime" ],
        ra: [ "audio/x-pn-realaudio", "audio/x-pn-realaudio-plugin", "audio/x-realaudio" ],
        ram: [ "audio/x-pn-realaudio" ],
        ras: [ "application/x-cmu-raster", "image/cmu-raster", "image/x-cmu-raster" ],
        rast: [ "image/cmu-raster" ],
        rexx: [ "text/x-script.rexx" ],
        rf: [ "image/vnd.rn-realflash" ],
        rgb: [ "image/x-rgb" ],
        rm: [ "application/vnd.rn-realmedia", "audio/x-pn-realaudio" ],
        rmi: [ "audio/mid" ],
        rmm: [ "audio/x-pn-realaudio" ],
        rmp: [ "audio/x-pn-realaudio", "audio/x-pn-realaudio-plugin" ],
        rng: [ "application/ringing-tones", "application/vnd.nokia.ringing-tone" ],
        rnx: [ "application/vnd.rn-realplayer" ],
        roff: [ "application/x-troff" ],
        rp: [ "image/vnd.rn-realpix" ],
        rpm: [ "audio/x-pn-realaudio-plugin" ],
        rt: [ "text/richtext", "text/vnd.rn-realtext" ],
        rtf: [ "application/rtf", "application/x-rtf", "text/richtext" ],
        rtx: [ "application/rtf", "text/richtext" ],
        rv: [ "video/vnd.rn-realvideo" ],
        s: [ "text/x-asm" ],
        s3m: [ "audio/s3m" ],
        saveme: [ "application/octet-stream" ],
        sbk: [ "application/x-tbook" ],
        scm: [ "application/x-lotusscreencam", "text/x-script.guile", "text/x-script.scheme", "video/x-scm" ],
        sdml: [ "text/plain" ],
        sdp: [ "application/sdp", "application/x-sdp" ],
        sdr: [ "application/sounder" ],
        sea: [ "application/sea", "application/x-sea" ],
        set: [ "application/set" ],
        sgm: [ "text/sgml", "text/x-sgml" ],
        sgml: [ "text/sgml", "text/x-sgml" ],
        sh: [ "application/x-bsh", "application/x-sh", "application/x-shar", "text/x-script.sh" ],
        shar: [ "application/x-bsh", "application/x-shar" ],
        shtml: [ "text/html", "text/x-server-parsed-html" ],
        sid: [ "audio/x-psid" ],
        sit: [ "application/x-sit", "application/x-stuffit" ],
        skd: [ "application/x-koan" ],
        skm: [ "application/x-koan" ],
        skp: [ "application/x-koan" ],
        skt: [ "application/x-koan" ],
        sl: [ "application/x-seelogo" ],
        smi: [ "application/smil" ],
        smil: [ "application/smil" ],
        snd: [ "audio/basic", "audio/x-adpcm" ],
        sol: [ "application/solids" ],
        spc: [ "application/x-pkcs7-certificates", "text/x-speech" ],
        spl: [ "application/futuresplash" ],
        spr: [ "application/x-sprite" ],
        sprite: [ "application/x-sprite" ],
        src: [ "application/x-wais-source" ],
        ssi: [ "text/x-server-parsed-html" ],
        ssm: [ "application/streamingmedia" ],
        sst: [ "application/vnd.ms-pki.certstore" ],
        step: [ "application/step" ],
        stl: [ "application/sla", "application/vnd.ms-pki.stl", "application/x-navistyle" ],
        stp: [ "application/step" ],
        sv4cpio: [ "application/x-sv4cpio" ],
        sv4crc: [ "application/x-sv4crc" ],
        svf: [ "image/vnd.dwg", "image/x-dwg" ],
        svr: [ "application/x-world", "x-world/x-svr" ],
        swf: [ "application/x-shockwave-flash" ],
        t: [ "application/x-troff" ],
        talk: [ "text/x-speech" ],
        tar: [ "application/x-tar" ],
        tbk: [ "application/toolbook", "application/x-tbook" ],
        tcl: [ "application/x-tcl", "text/x-script.tcl" ],
        tcsh: [ "text/x-script.tcsh" ],
        tex: [ "application/x-tex" ],
        texi: [ "application/x-texinfo" ],
        texinfo: [ "application/x-texinfo" ],
        text: [ "application/plain", "text/plain" ],
        tgz: [ "application/gnutar", "application/x-compressed" ],
        tif: [ "image/tiff", "image/x-tiff" ],
        tiff: [ "image/tiff", "image/x-tiff" ],
        tr: [ "application/x-troff" ],
        tsi: [ "audio/tsp-audio" ],
        tsp: [ "application/dsptype", "audio/tsplayer" ],
        tsv: [ "text/tab-separated-values" ],
        turbot: [ "image/florian" ],
        txt: [ "text/plain" ],
        uil: [ "text/x-uil" ],
        uni: [ "text/uri-list" ],
        unis: [ "text/uri-list" ],
        unv: [ "application/i-deas" ],
        uri: [ "text/uri-list" ],
        uris: [ "text/uri-list" ],
        ustar: [ "application/x-ustar", "multipart/x-ustar" ],
        uu: [ "application/octet-stream", "text/x-uuencode" ],
        uue: [ "text/x-uuencode" ],
        vcd: [ "application/x-cdlink" ],
        vcs: [ "text/x-vcalendar" ],
        vda: [ "application/vda" ],
        vdo: [ "video/vdo" ],
        vew: [ "application/groupwise" ],
        viv: [ "video/vivo", "video/vnd.vivo" ],
        vivo: [ "video/vivo", "video/vnd.vivo" ],
        vmd: [ "application/vocaltec-media-desc" ],
        vmf: [ "application/vocaltec-media-file" ],
        voc: [ "audio/voc", "audio/x-voc" ],
        vos: [ "video/vosaic" ],
        vox: [ "audio/voxware" ],
        vqe: [ "audio/x-twinvq-plugin" ],
        vqf: [ "audio/x-twinvq" ],
        vql: [ "audio/x-twinvq-plugin" ],
        vrml: [ "application/x-vrml", "model/vrml", "x-world/x-vrml" ],
        vrt: [ "x-world/x-vrt" ],
        vsd: [ "application/x-visio" ],
        vst: [ "application/x-visio" ],
        vsw: [ "application/x-visio" ],
        w60: [ "application/wordperfect6.0" ],
        w61: [ "application/wordperfect6.1" ],
        w6w: [ "application/msword" ],
        wav: [ "audio/wav", "audio/x-wav" ],
        wb1: [ "application/x-qpro" ],
        wbmp: [ "image/vnd.wap.wbmp" ],
        web: [ "application/vnd.xara" ],
        webm: [ "video/webm" ],
        wiz: [ "application/msword" ],
        wk1: [ "application/x-123" ],
        wmf: [ "windows/metafile" ],
        wml: [ "text/vnd.wap.wml" ],
        wmlc: [ "application/vnd.wap.wmlc" ],
        wmls: [ "text/vnd.wap.wmlscript" ],
        wmlsc: [ "application/vnd.wap.wmlscriptc" ],
        word: [ "application/msword" ],
        wp: [ "application/wordperfect" ],
        wp5: [ "application/wordperfect", "application/wordperfect6.0" ],
        wp6: [ "application/wordperfect" ],
        wpd: [ "application/wordperfect", "application/x-wpwin" ],
        wq1: [ "application/x-lotus" ],
        wri: [ "application/mswrite", "application/x-wri" ],
        wrl: [ "application/x-world", "model/vrml", "x-world/x-vrml" ],
        wrz: [ "model/vrml", "x-world/x-vrml" ],
        wsc: [ "text/scriplet" ],
        wsrc: [ "application/x-wais-source" ],
        wtk: [ "application/x-wintalk" ],
        xbm: [ "image/x-xbitmap", "image/x-xbm", "image/xbm" ],
        xdr: [ "video/x-amt-demorun" ],
        xgz: [ "xgl/drawing" ],
        xif: [ "image/vnd.xiff" ],
        xl: [ "application/excel" ],
        xla: [ "application/excel", "application/x-excel", "application/x-msexcel" ],
        xlb: [ "application/excel", "application/vnd.ms-excel", "application/x-excel" ],
        xlc: [ "application/excel", "application/vnd.ms-excel", "application/x-excel" ],
        xld: [ "application/excel", "application/x-excel" ],
        xlk: [ "application/excel", "application/x-excel" ],
        xll: [ "application/excel", "application/vnd.ms-excel", "application/x-excel" ],
        xlm: [ "application/excel", "application/vnd.ms-excel", "application/x-excel" ],
        xls: [ "application/excel", "application/vnd.ms-excel", "application/x-excel", "application/x-msexcel" ],
        xlt: [ "application/excel", "application/x-excel" ],
        xlv: [ "application/excel", "application/x-excel" ],
        xlw: [ "application/excel", "application/vnd.ms-excel", "application/x-excel", "application/x-msexcel" ],
        xm: [ "audio/xm" ],
        xml: [ "application/xml", "text/xml" ],
        xmz: [ "xgl/movie" ],
        xpix: [ "application/x-vnd.ls-xpix" ],
        xpm: [ "image/x-xpixmap", "image/xpm" ],
        "x-png": [ "image/png" ],
        xsr: [ "video/x-amt-showrun" ],
        xwd: [ "image/x-xwd", "image/x-xwindowdump" ],
        xyz: [ "chemical/x-pdb" ],
        z: [ "application/x-compress", "application/x-compressed" ],
        zip: [ "application/x-compressed", "application/x-zip-compressed", "application/zip", "multipart/x-zip" ],
        zoo: [ "application/octet-stream" ],
        zsh: [ "text/x-script.zsh" ]
    }, Model.isImage = function(fileExtension) {
        var mimeTypes = Model.mimetypes[fileExtension];
        if (a4p.isUndefined(mimeTypes)) return !1;
        for (var i = 0, len = mimeTypes.length; len > i; i++) {
            if ("image/png" == mimeTypes[i]) return !0;
            if ("image/jpeg" == mimeTypes[i]) return !0;
            if ("image/gif" == mimeTypes[i]) return !0;
            if ("image/bmp" == mimeTypes[i]) return !0;
        }
        return !1;
    }, Model.isVideo = function(fileExtension) {
        var mimeTypes = Model.mimetypes[fileExtension];
        if (a4p.isUndefined(mimeTypes)) return !1;
        for (var i = 0, len = mimeTypes.length; len > i; i++) {
            if ("video/mp4" == mimeTypes[i]) return !0;
            if ("video/ogg" == mimeTypes[i]) return !0;
            if ("video/webm" == mimeTypes[i]) return !0;
        }
        return !1;
    }, Model.getErrorMsg = function(scope, errorExpr) {
        return eval(errorExpr);
    }, Model.createErrMsg = function(scope, errorKey, valuesArr) {
        for (var errMsg = Model.translate(scope, errorKey), i = 0; i < valuesArr.length; i++) errMsg = errMsg.replace("{" + i + "}", Model.translate(scope, valuesArr[i]));
        return errMsg;
    }, Model.translate = function(scope, key) {
        var translated = scope.srvLocale.translations[key];
        return void 0 != translated ? translated : key;
    }, Model.validateObject = function(object, expr) {
        return eval(expr);
    }, Model.firstOptionItem = function(srvLocale, defaultSetterParam) {
        var optionList = srvLocale.translations[defaultSetterParam];
        for (var key in optionList) return optionList[key];
    }, Model.now = function() {
        var now = new Date();
        return a4pDateFormat(now);
    }, Model.tomorrow = function() {
        var now = new Date(), dateFrom = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, now.getHours(), 0, 0, 0);
        return a4pDateFormat(dateFrom);
    }, Model.tomorrowPrevHour = function() {
        var now = new Date(), dateFrom = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, now.getHours() - 1, 0, 0, 0);
        return a4pDateFormat(dateFrom);
    }, Model.nextHour = function() {
        var now = new Date(), dateFrom = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours() + 1, 0, 0, 0);
        return a4pDateFormat(dateFrom);
    }, Model.nextNextHour = function() {
        var now = new Date(), dateTo = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours() + 2, 0, 0, 0);
        return a4pDateFormat(dateTo);
    }, Model.contactType = function() {
        return "Contact";
    }, Model.attachmentType = function() {
        return "Attachment";
    }, Model.dateEndFromStart = function(date_start, duration_hours, duration_minutes) {
        var dateStart = a4pDateParse(date_start);
        return a4pDateFormat(new Date(dateStart.getTime() + 1e3 * (3600 * duration_hours + 60 * duration_minutes)));
    }, Model.dateStartFromEnd = function(date_start, date_end, duration_hours, duration_minutes) {
        var dateStart = a4pDateParse(date_start), dateStop = a4pDateParse(date_end);
        return dateStop.getTime() < dateStart.getTime() ? a4pDateFormat(new Date(dateStop.getTime() - 1e3 * (3600 * duration_hours + 60 * duration_minutes))) : date_start;
    }, Model.diffHours = function(date_start, date_end) {
        var dateStart = a4pDateParse(date_start), dateStop = a4pDateParse(date_end);
        return Math.floor((dateStop.getTime() - dateStart.getTime()) / 1e3 / 3600);
    }, Model.diffMinutesInHour = function(date_start, date_end) {
        var dateStart = a4pDateParse(date_start), dateStop = a4pDateParse(date_end), minutes = Math.floor((dateStop.getTime() - dateStart.getTime()) / 1e3 / 60);
        return minutes % 60;
    }, Model.httpPrefixUrl = function(url) {
        if (a4p.isUndefined(url) || 0 == url.length) return url;
        var i = url.indexOf("http:");
        return 0 == i ? url : (i = url.indexOf("https:"), 0 == i ? url : (i = url.indexOf("//"), 
        0 == i ? "http:" + url : "http://" + url));
    }, Model.fileFirstMimetype = function(filename) {
        var extension = Model.fileExtension(filename), mimetypes = Model.mimetypes[extension.toLowerCase()];
        return a4p.isDefined(mimetypes) ? mimetypes[0] : "application/octet-stream";
    }, Model.filePossibleMimetypes = function(filename) {
        var extension = Model.fileExtension(filename), mimetypes = Model.mimetypes[extension.toLowerCase()];
        return a4p.isDefined(mimetypes) ? mimetypes : [ "application/octet-stream", "text/plain" ];
    }, Model.fileExtension = function(filename) {
        var i = filename.lastIndexOf(".");
        return i >= 0 ? filename.substr(1 + i) : "";
    }, Model.fileRootname = function(filename) {
        var i = filename.lastIndexOf(".");
        return i >= 0 ? filename.substr(0, i) : filename;
    }, Model.fileName = function(rootname, extension) {
        return rootname && rootname.length > 0 ? extension && extension.length > 0 ? rootname + "." + extension : rootname : extension && extension.length > 0 ? "." + extension : "";
    }, Model.fileLastname = function(filename) {
        var i = filename.lastIndexOf("/");
        return i >= 0 && (filename = filename.substr(1 + i)), i = filename.lastIndexOf("\\"), 
        i >= 0 && (filename = filename.substr(1 + i)), filename;
    }, Model.fileDirname = function(filename) {
        var i = filename.lastIndexOf("/"), j = filename.lastIndexOf("\\");
        return i >= 0 ? filename = j > i ? filename.substr(0, j) : filename.substr(0, i) : j >= 0 && (filename = filename.substr(0, j)), 
        "";
    }, Model.dirPath = function() {
        return "/a4p/c4p/doc/sf/";
    }, Model.filePath = function(dirPath, id, extension) {
        return normalizedPath(dirPath, id.dbid, extension);
    }, Model.fileUrl = function(filePath) {
        return filePath;
    }, Model;
}();